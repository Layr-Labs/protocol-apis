openapi: 3.0.0
info:
  title: eigenlayer/pds/v1/aprs.proto
  version: version not set
tags:
  - name: Aprs
  - name: Events
  - name: Health
  - name: Protocol
  - name: Rewards
  - name: Rpc
paths:
  "/aprs/v1/earners/{earnerAddress}/strategies/{strategy}/daily-apr/{date}":
    get:
      operationId: Aprs_GetDailyAprForEarnerStrategy
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1GetDailyAprForEarnerStrategyResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: earnerAddress
          in: path
          required: true
          schema:
            type: string
        - name: strategy
          in: path
          required: true
          schema:
            type: string
        - name: date
          in: path
          required: true
          schema:
            type: string
      tags:
        - Aprs
  "/aprs/v1/operators/{operatorAddress}/daily-aprs/{date}":
    get:
      operationId: Aprs_GetDailyOperatorStrategyAprs
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v1GetDailyOperatorStrategyAprsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: operatorAddress
          in: path
          required: true
          schema:
            type: string
        - name: date
          in: path
          required: true
          schema:
            type: string
      tags:
        - Aprs
  /events/v1/stream-eigen-state-changes:
    post:
      operationId: Events_StreamEigenStateChanges
      responses:
        "200":
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/eventsStreamEigenStateChangesResponse"
                  error:
                    $ref: "#/components/schemas/rpcStatus"
                title: Stream result of eventsStreamEigenStateChangesResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventsStreamEigenStateChangesRequest"
        required: true
      tags:
        - Events
  /events/v1/stream-indexed-blocks:
    post:
      operationId: Events_StreamIndexedBlocks
      responses:
        "200":
          description: A successful response.(streaming responses)
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: "#/components/schemas/eventsStreamIndexedBlocksResponse"
                  error:
                    $ref: "#/components/schemas/rpcStatus"
                title: Stream result of eventsStreamIndexedBlocksResponse
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/eventsStreamIndexedBlocksRequest"
        required: true
      tags:
        - Events
  /protocol/v1/eigen-state-changes:
    post:
      operationId: Protocol_GetEigenStateChanges
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/protocolGetEigenStateChangesResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/protocolGetEigenStateChangesRequest"
        required: true
      tags:
        - Protocol
  "/protocol/v1/operators/{operatorAddress}/delegated-stakers":
    get:
      summary: >-
        GetDelegatedStakersForOperator returns the list of stakers that have
        delegated to an operator.

        BlockHeight is optional, otherwise latest is used.
      operationId: Protocol_GetDelegatedStakersForOperator
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/protocolGetDelegatedStakersForOperatorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: operatorAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.pageNumber
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: pagination.pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int64
      tags:
        - Protocol
  "/protocol/v1/operators/{operatorAddress}/delegated-strategies":
    get:
      summary: GetDelegatedStrategiesForOperator returns strategies an Operator has
        delegated
      operationId: Protocol_GetDelegatedStrategiesForOperator
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/protocolGetDelegatedStrategiesForOperatorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: operatorAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Protocol
  "/protocol/v1/operators/{operatorAddress}/registered-avs":
    get:
      summary: >-
        GetRegisteredAvsForOperator returns the list of registered AVs for a
        given operator

        BlockHeight is optional, otherwise latest is used.
      operationId: Protocol_GetRegisteredAvsForOperator
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/protocolGetRegisteredAvsForOperatorResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: operatorAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Protocol
  "/protocol/v1/operators/{operatorAddress}/strategies/{strategyAddress}/delegated-stake":
    get:
      summary: GetOperatorDelegatedStakeForStrategy returns the amount of delegated
        stake for a given strategy for an operator
      operationId: Protocol_GetOperatorDelegatedStakeForStrategy
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/protocolGetOperatorDelegatedStakeForStrategyRespons\
                  e"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: operatorAddress
          in: path
          required: true
          schema:
            type: string
        - name: strategyAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Protocol
  "/protocol/v1/stakers/{stakerAddress}/shares":
    get:
      summary: >-
        GetStakerShares returns the shares of a staker, and optionally, the
        operator operator they've delegated to and

        the AVS the operator has registered with.
      operationId: Protocol_GetStakerShares
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/protocolGetStakerSharesResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: stakerAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Protocol
  "/rewards/v1/attributable-rewards-by-root/{distributionRoot}":
    get:
      operationId: Rewards_GetAttributableRewardsForDistributionRoot
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetAttributableRewardsForDistributionRootRes\
                  ponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: distributionRoot
          in: path
          required: true
          schema:
            type: string
      tags:
        - Rewards
  "/rewards/v1/attributable-rewards/{snapshot}":
    get:
      summary: >-
        GetAttributableRewardsForSnapshot returns the attributable rewards for
        the provided snapshot.

        This takes the cumulative rewards amounts and breaks them down across operators, avss, strategies, etc
      operationId: Rewards_GetAttributableRewardsForSnapshot
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetAttributableRewardsForSnapshotResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: snapshot
          in: path
          required: true
          schema:
            type: string
      tags:
        - Rewards
  "/rewards/v1/avs-rewards-by-root/{rootIndex}":
    get:
      operationId: Rewards_GetRewardsByAvsForDistributionRoot
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetRewardsByAvsForDistributionRootResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: rootIndex
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  /rewards/v1/backfill-staker-operators:
    post:
      operationId: Rewards_BackfillStakerOperators
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsBackfillStakerOperatorsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/rewardsBackfillStakerOperatorsRequest"
        required: true
      tags:
        - Rewards
  "/rewards/v1/blocks/{blockHeight}/claimed-rewards":
    get:
      summary: GetClaimedRewardsByBlock returns the claimed rewards for the provided
        block height
      operationId: Rewards_GetClaimedRewardsByBlock
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetClaimedRewardsByBlockResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: blockHeight
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  "/rewards/v1/blocks/{blockHeight}/rewards-root":
    get:
      summary: GetRewardsRoot returns the posted on-chain root for the give block height
      operationId: Rewards_GetRewardsRoot
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetRewardsRootResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: blockHeight
          in: path
          required: true
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  /rewards/v1/claim-proof:
    post:
      summary: >-
        GenerateClaimProof generates a proof for the given earner address and
        tokens for claiming

        tokens against the RewardsCoordinator
      operationId: Rewards_GenerateClaimProof
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGenerateClaimProofResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/rewardsGenerateClaimProofRequest"
        required: true
      tags:
        - Rewards
  /rewards/v1/distribution-roots:
    get:
      operationId: Rewards_ListDistributionRoots
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsListDistributionRootsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  "/rewards/v1/earners/{earnerAddress}/available-rewards-tokens":
    get:
      summary: GetAvailableRewardsTokens returns the available rewards tokens for the
        given earner address
      operationId: Rewards_GetAvailableRewardsTokens
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetAvailableRewardsTokensResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: earnerAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  "/rewards/v1/earners/{earnerAddress}/claimable-rewards":
    get:
      summary: >-
        GetClaimableRewards returns the claimable rewards for the given earner
        address.

        This takes the current active tokens earned and subtracts total claimed.
      operationId: Rewards_GetClaimableRewards
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetClaimableRewardsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: earnerAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  "/rewards/v1/earners/{earnerAddress}/claimed-rewards":
    get:
      summary: >-
        ListClaimedRewardsByBlockRange returns the claimed rewards for the given
        earner address and block range,

        inclusive of the start and end block heights
      operationId: Rewards_ListClaimedRewardsByBlockRange
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsListClaimedRewardsByBlockRangeResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: earnerAddress
          in: path
          required: true
          schema:
            type: string
        - name: startBlockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: endBlockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  "/rewards/v1/earners/{earnerAddress}/summarized-rewards":
    get:
      summary: >-
        GetSummarizedRewardsForEarner returns the summarized rewards for the
        given earner address, including:

        - total tokens earned

        - total tokens active (subset of earned that are in roots that have surpassed their activation delay)

        - total claimed

        - total claimable (total active - total claimed)
      operationId: Rewards_GetSummarizedRewardsForEarner
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetSummarizedRewardsForEarnerResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: earnerAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  "/rewards/v1/earners/{earnerAddress}/total-claimed-rewards":
    get:
      summary: >-
        GetTotalClaimedRewards returns the total claimed rewards for the given
        earner address, summed up to and including

        the provided blockHeight. If a blockHeight is omitted, the most recent indexed block is used.
      operationId: Rewards_GetTotalClaimedRewards
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetTotalClaimedRewardsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: earnerAddress
          in: path
          required: true
          schema:
            type: string
        - name: blockHeight
          in: query
          required: false
          schema:
            type: string
            format: uint64
      tags:
        - Rewards
  /rewards/v1/generate-rewards:
    post:
      summary: >-
        GenerateRewards generates rewards for the given cutoff_date.

        If respondWithRewardsData is true, the response will include the rewards data, otherwise

        the sidecar will cache the data to be requested later.
      operationId: Rewards_GenerateRewards
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGenerateRewardsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/rewardsGenerateRewardsRequest"
        required: true
      tags:
        - Rewards
  /rewards/v1/generate-rewards-root:
    post:
      summary: >-
        GenerateRewardsRoot generates a rewards root for the given snapshot.

        Returns an error if the rewards have not been generated for the snapshot.
      operationId: Rewards_GenerateRewardsRoot
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGenerateRewardsRootResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/rewardsGenerateRewardsRootRequest"
        required: true
      tags:
        - Rewards
  /rewards/v1/generate-staker-operators:
    post:
      operationId: Rewards_GenerateStakerOperators
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGenerateStakerOperatorsResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/rewardsGenerateStakerOperatorsRequest"
        required: true
      tags:
        - Rewards
  "/rewards/v1/rewards/{snapshot}":
    get:
      summary: |-
        GetRewardsForSnapshot returns the rewards for the provided snapshot.
        Useful if you generated the rewards and want to fetch them later.
      operationId: Rewards_GetRewardsForSnapshot
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rewardsGetRewardsForSnapshotResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: snapshot
          in: path
          required: true
          schema:
            type: string
      tags:
        - Rewards
  /rpc/v1/about:
    get:
      summary: About returns information about the running sidecar process
      operationId: Rpc_About
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sidecarAboutResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      tags:
        - Rpc
  /rpc/v1/latest-block:
    post:
      operationId: Rpc_GetBlockHeight
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sidecarGetBlockHeightResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/sidecarGetBlockHeightRequest"
        required: true
      tags:
        - Rpc
  "/rpc/v1/state-roots/{blockNumber}":
    post:
      operationId: Rpc_GetStateRoot
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sidecarGetStateRootResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: blockNumber
          in: path
          required: true
          schema:
            type: string
            format: uint64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RpcGetStateRootBody"
        required: true
      tags:
        - Rpc
  /v1/health:
    get:
      operationId: Health_HealthCheck
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/healthHealthCheckResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      parameters:
        - name: service
          in: query
          required: false
          schema:
            type: string
      tags:
        - Health
  /v1/ready:
    get:
      operationId: Health_ReadyCheck
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/healthReadyResponse"
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/rpcStatus"
      tags:
        - Health
components:
  schemas:
    HealthCheckResponseServingStatus:
      type: string
      enum:
        - UNKNOWN
        - SERVING
        - NOT_SERVING
        - SERVICE_UNKNOWN
      default: UNKNOWN
      description: " - SERVICE_UNKNOWN: Used only by the Watch method."
    RpcGetStateRootBody:
      type: object
    commonPagination:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
    eigenStateAvsOperatorStateChange:
      type: object
      properties:
        avs:
          type: string
        operator:
          type: string
        registered:
          type: boolean
        transactionMetadata:
          $ref: "#/components/schemas/eigenStateTransactionMetadata"
    eigenStateDisabledDistributionRoot:
      type: object
      properties:
        rootIndex:
          type: string
          format: uint64
        transactionMetadata:
          $ref: "#/components/schemas/eigenStateTransactionMetadata"
    eigenStateEigenStateChange:
      type: object
      properties:
        avsOperatorStateChange:
          $ref: "#/components/schemas/eigenStateAvsOperatorStateChange"
        operatorShareDelta:
          $ref: "#/components/schemas/eigenStateOperatorShareDelta"
        rewardSubmission:
          $ref: "#/components/schemas/eigenStateRewardSubmission"
        stakerDelegationChange:
          $ref: "#/components/schemas/eigenStateStakerDelegationChange"
        stakerShareDelta:
          $ref: "#/components/schemas/eigenStateStakerShareDelta"
        submittedDistributionRoot:
          $ref: "#/components/schemas/eigenStateSubmittedDistributionRoot"
        disabledDistributionRoot:
          $ref: "#/components/schemas/eigenStateDisabledDistributionRoot"
    eigenStateOperatorShareDelta:
      type: object
      properties:
        operator:
          type: string
        staker:
          type: string
        strategy:
          type: string
        shares:
          type: string
        blockTime:
          type: string
          format: date-time
        blockDate:
          type: string
        transactionMetadata:
          $ref: "#/components/schemas/eigenStateTransactionMetadata"
    eigenStateRewardSubmission:
      type: object
      properties:
        avs:
          type: string
        rewardHash:
          type: string
        token:
          type: string
        amount:
          type: string
        strategy:
          type: string
        strategyIndex:
          type: string
          format: uint64
        multiplier:
          type: string
        startTimestamp:
          type: string
          format: date-time
        endTimestamp:
          type: string
          format: date-time
        duration:
          type: string
          format: uint64
        rewardType:
          $ref: "#/components/schemas/eigenStateRewardSubmissionRewardType"
        transactionMetadata:
          $ref: "#/components/schemas/eigenStateTransactionMetadata"
    eigenStateRewardSubmissionRewardType:
      type: string
      enum:
        - AVS
        - ALL_STAKERS
        - ALL_EARNERS
      default: AVS
    eigenStateStakerDelegationChange:
      type: object
      properties:
        staker:
          type: string
        operator:
          type: string
        delegated:
          type: boolean
        transactionMetadata:
          $ref: "#/components/schemas/eigenStateTransactionMetadata"
    eigenStateStakerShareDelta:
      type: object
      properties:
        staker:
          type: string
        strategy:
          type: string
        shares:
          type: string
        strategyIndex:
          type: string
          format: uint64
        blockTime:
          type: string
          format: date-time
        blockDate:
          type: string
        transactionMetadata:
          $ref: "#/components/schemas/eigenStateTransactionMetadata"
    eigenStateStateRoot:
      type: object
      properties:
        ethBlockNumber:
          type: string
          format: uint64
        ethBlockHash:
          type: string
        stateRoot:
          type: string
    eigenStateSubmittedDistributionRoot:
      type: object
      properties:
        root:
          type: string
        rootIndex:
          type: string
          format: uint64
        rewardsCalculationEnd:
          type: string
          format: date-time
        rewardsCalculationEndUnit:
          type: string
        activatedAt:
          type: string
          format: date-time
        activatedAtUnit:
          type: string
        createdAtBlockNumber:
          type: string
          format: uint64
        transactionMetadata:
          $ref: "#/components/schemas/eigenStateTransactionMetadata"
    eigenStateTransactionMetadata:
      type: object
      properties:
        logIndex:
          type: string
          format: uint64
        transactionHash:
          type: string
        blockHeight:
          type: string
          format: uint64
    ethereumTypesBlock:
      type: object
      properties:
        blockNumber:
          type: string
          format: uint64
        blockHash:
          type: string
        parentHash:
          type: string
        blockTime:
          type: string
          format: date-time
        transactions:
          type: array
          items:
            $ref: "#/components/schemas/ethereumTypesTransaction"
    ethereumTypesTransaction:
      type: object
      properties:
        transactionHash:
          type: string
        transactionIndex:
          type: string
          format: uint64
        blockNumber:
          type: string
          format: uint64
        fromAddress:
          type: string
        toAddress:
          type: string
        contractAddress:
          type: string
        logs:
          type: array
          items:
            $ref: "#/components/schemas/ethereumTypesTransactionLog"
    ethereumTypesTransactionLog:
      type: object
      properties:
        transactionHash:
          type: string
        transactionIndex:
          type: string
          format: uint64
        logIndex:
          type: string
          format: uint64
        blockNumber:
          type: string
          format: uint64
        address:
          type: string
        eventName:
          type: string
        arguments:
          type: string
          format: byte
        outputData:
          type: string
          format: byte
    eventsStreamEigenStateChangesRequest:
      type: object
    eventsStreamEigenStateChangesResponse:
      type: object
      properties:
        blockNumber:
          type: string
          format: uint64
        stateRoot:
          $ref: "#/components/schemas/eigenStateStateRoot"
        changes:
          type: array
          items:
            $ref: "#/components/schemas/eigenStateEigenStateChange"
    eventsStreamIndexedBlocksRequest:
      type: object
      properties:
        includeStateChanges:
          type: boolean
          title: In addition to block data, include EigenState changes related to the
            block
    eventsStreamIndexedBlocksResponse:
      type: object
      properties:
        block:
          $ref: "#/components/schemas/ethereumTypesBlock"
        stateRoot:
          $ref: "#/components/schemas/eigenStateStateRoot"
        changes:
          type: array
          items:
            $ref: "#/components/schemas/eigenStateEigenStateChange"
    healthHealthCheckResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/HealthCheckResponseServingStatus"
    healthReadyResponse:
      type: object
      properties:
        ready:
          type: boolean
    protobufAny:
      type: object
      properties:
        "@type":
          type: string
      additionalProperties: {}
    protocolGetDelegatedStakersForOperatorResponse:
      type: object
      properties:
        stakerAddresses:
          type: array
          items:
            type: string
        nextPage:
          $ref: "#/components/schemas/commonPagination"
    protocolGetDelegatedStrategiesForOperatorResponse:
      type: object
      properties:
        strategyAddresses:
          type: array
          items:
            type: string
    protocolGetEigenStateChangesRequest:
      type: object
      properties:
        blockHeight:
          type: string
          format: uint64
    protocolGetEigenStateChangesResponse:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/eigenStateEigenStateChange"
    protocolGetOperatorDelegatedStakeForStrategyResponse:
      type: object
      properties:
        shares:
          type: string
        avsAddresses:
          type: array
          items:
            type: string
    protocolGetRegisteredAvsForOperatorResponse:
      type: object
      properties:
        avsAddresses:
          type: array
          items:
            type: string
    protocolGetStakerSharesResponse:
      type: object
      properties:
        shares:
          type: array
          items:
            $ref: "#/components/schemas/protocolStakerShare"
    protocolStakerShare:
      type: object
      properties:
        strategy:
          type: string
        shares:
          type: string
        operatorAddress:
          type: string
          title: Operator the staker has delegated to if present
        avsAddresses:
          type: array
          items:
            type: string
          title: The operator could be regietered with 0 or many AVSs
    rewardsAttributableReward:
      type: object
      properties:
        earner:
          type: string
        operator:
          type: string
        avs:
          type: string
        token:
          type: string
        strategy:
          type: string
        multiplier:
          type: string
        amount:
          type: string
        shares:
          type: string
        rewardHash:
          type: string
        snapshot:
          type: string
        rewardType:
          $ref: "#/components/schemas/v1rewardsRewardType"
    rewardsAvsReward:
      type: object
      properties:
        earner:
          type: string
        avs:
          type: string
        token:
          type: string
        amount:
          type: string
        rewardHash:
          type: string
        snapshot:
          type: string
        rewardType:
          $ref: "#/components/schemas/v1rewardsRewardType"
    rewardsBackfillStakerOperatorsRequest:
      type: object
      properties:
        waitForComplete:
          type: boolean
    rewardsBackfillStakerOperatorsResponse:
      type: object
      properties:
        queued:
          type: boolean
    rewardsClaimedReward:
      type: object
      properties:
        earner:
          type: string
        claimer:
          type: string
        token:
          type: string
        amount:
          type: string
        distributionRoot:
          type: string
        blockNumber:
          type: string
          format: uint64
    rewardsDistributionRoot:
      type: object
      properties:
        root:
          type: string
        rootIndex:
          type: string
          format: uint64
        rewardsCalculationEnd:
          type: string
          format: date-time
        rewardsCalculationEndUnit:
          type: string
        activatedAt:
          type: string
          format: date-time
        activatedAtUnit:
          type: string
        createdAtBlockNumber:
          type: string
          format: uint64
        transactionHash:
          type: string
        blockHeight:
          type: string
          format: uint64
        logIndex:
          type: string
          format: uint64
        disabled:
          type: boolean
    rewardsEarnerLeaf:
      type: object
      properties:
        earner:
          type: string
        earnerTokenRoot:
          type: string
          format: byte
    rewardsGenerateClaimProofRequest:
      type: object
      properties:
        earnerAddress:
          type: string
        tokens:
          type: array
          items:
            type: string
        rootIndex:
          type: string
          format: int64
          title: if root_index is omitted, the current active root will be used
    rewardsGenerateClaimProofResponse:
      type: object
      properties:
        proof:
          $ref: "#/components/schemas/rewardsProof"
    rewardsGenerateRewardsRequest:
      type: object
      properties:
        cutoffDate:
          type: string
        respondWithRewardsData:
          type: boolean
        waitForComplete:
          type: boolean
    rewardsGenerateRewardsResponse:
      type: object
      properties:
        cutoffDate:
          type: string
        rewards:
          $ref: "#/components/schemas/rewardsReward"
        queued:
          type: boolean
    rewardsGenerateRewardsRootRequest:
      type: object
      properties:
        cutoffDate:
          type: string
          title: The date to calculate rewards up to, exclusive
    rewardsGenerateRewardsRootResponse:
      type: object
      properties:
        rewardsRoot:
          type: string
        rewardsCalcEndDate:
          type: string
    rewardsGenerateStakerOperatorsRequest:
      type: object
      properties:
        cutoffDate:
          type: string
        waitForComplete:
          type: boolean
    rewardsGenerateStakerOperatorsResponse:
      type: object
      properties:
        queued:
          type: boolean
    rewardsGetAttributableRewardsForDistributionRootResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsAttributableReward"
    rewardsGetAttributableRewardsForSnapshotResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsAttributableReward"
    rewardsGetAvailableRewardsTokensResponse:
      type: object
      properties:
        tokens:
          type: array
          items:
            type: string
    rewardsGetClaimableRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsReward"
    rewardsGetClaimedRewardsByBlockResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsClaimedReward"
    rewardsGetRewardsByAvsForDistributionRootResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsAvsReward"
    rewardsGetRewardsForSnapshotResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsReward"
    rewardsGetRewardsRootResponse:
      type: object
      properties:
        rewardsRoot:
          $ref: "#/components/schemas/rewardsDistributionRoot"
    rewardsGetSummarizedRewardsForEarnerResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsSummarizedEarnerReward"
    rewardsGetTotalClaimedRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsTotalClaimedReward"
    rewardsListClaimedRewardsByBlockRangeResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: "#/components/schemas/rewardsClaimedReward"
    rewardsListDistributionRootsResponse:
      type: object
      properties:
        distributionRoots:
          type: array
          items:
            $ref: "#/components/schemas/rewardsDistributionRoot"
    rewardsProof:
      type: object
      properties:
        root:
          type: string
          format: byte
        rootIndex:
          type: integer
          format: int64
        earnerIndex:
          type: integer
          format: int64
        earnerTreeProof:
          type: string
          format: byte
        earnerLeaf:
          $ref: "#/components/schemas/rewardsEarnerLeaf"
        tokenIndices:
          type: array
          items:
            type: integer
            format: int64
        tokenTreeProofs:
          type: array
          items:
            type: string
            format: byte
        tokenLeaves:
          type: array
          items:
            $ref: "#/components/schemas/rewardsTokenLeaf"
      title: >-
        Proof closely models the IRewardsCoordinatorRewardsMerkleClaim interface
        found

        in the RewardsCoordinator contract
    rewardsReward:
      type: object
      properties:
        earner:
          type: string
        token:
          type: string
        amount:
          type: string
        snapshot:
          type: string
    rewardsSummarizedEarnerReward:
      type: object
      properties:
        token:
          type: string
        earned:
          type: string
          title: Rewards that have been earned but not necessarily activated yet
        active:
          type: string
          title: total rewards that are claimable (does not account for claimed)
        claimed:
          type: string
          title: total rewards that have been claimed
        claimable:
          type: string
          title: rewards that can be claimed at the block height
    rewardsTokenLeaf:
      type: object
      properties:
        token:
          type: string
        cumulativeEarnings:
          type: string
    rewardsTotalClaimedReward:
      type: object
      properties:
        earner:
          type: string
        token:
          type: string
        amount:
          type: string
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: "#/components/schemas/protobufAny"
    sidecarAboutResponse:
      type: object
      properties:
        version:
          type: string
        commit:
          type: string
        chain:
          type: string
    sidecarGetBlockHeightRequest:
      type: object
      properties:
        verified:
          type: boolean
    sidecarGetBlockHeightResponse:
      type: object
      properties:
        blockNumber:
          type: string
          format: uint64
        blockHash:
          type: string
    sidecarGetStateRootResponse:
      type: object
      properties:
        ethBlockNumber:
          type: string
          format: uint64
        ethBlockHash:
          type: string
        stateRoot:
          type: string
    v1GetDailyAprForEarnerStrategyResponse:
      type: object
      properties:
        apr:
          type: string
    v1GetDailyOperatorStrategyAprsResponse:
      type: object
      properties:
        aprs:
          type: array
          items:
            $ref: "#/components/schemas/v1OperatorStrategyApr"
    v1OperatorStrategyApr:
      type: object
      properties:
        strategy:
          type: string
        apr:
          type: string
    v1rewardsRewardType:
      type: string
      enum:
        - REWARD_TYPE_AVS
        - REWARD_TYPE_FOR_ALL
        - REWARD_TYPE_FOR_ALL_EARNERS
      default: REWARD_TYPE_AVS
