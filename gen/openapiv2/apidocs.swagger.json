{
  "swagger": "2.0",
  "info": {
    "title": "eigenlayer/pds/v1/aprs.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Aprs"
    },
    {
      "name": "Events"
    },
    {
      "name": "Health"
    },
    {
      "name": "OperatorSets"
    },
    {
      "name": "Protocol"
    },
    {
      "name": "Rewards"
    },
    {
      "name": "Rpc"
    },
    {
      "name": "Slashing"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/aprs/v1/earners/{earnerAddress}/strategies/{strategy}/daily-apr/{date}": {
      "get": {
        "operationId": "Aprs_GetDailyAprForEarnerStrategy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDailyAprForEarnerStrategyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategy",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Aprs"
        ]
      }
    },
    "/aprs/v1/operators/{operatorAddress}/daily-aprs/{date}": {
      "get": {
        "operationId": "Aprs_GetDailyOperatorStrategyAprs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDailyOperatorStrategyAprsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Aprs"
        ]
      }
    },
    "/events/v1/stream-eigen-state-changes": {
      "post": {
        "operationId": "Events_StreamEigenStateChanges",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/eventsStreamEigenStateChangesResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of eventsStreamEigenStateChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsStreamEigenStateChangesRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/events/v1/stream-indexed-blocks": {
      "post": {
        "operationId": "Events_StreamIndexedBlocks",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/eventsStreamIndexedBlocksResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of eventsStreamIndexedBlocksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/eventsStreamIndexedBlocksRequest"
            }
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/protocol/v1/eigen-state-changes": {
      "get": {
        "operationId": "Protocol_GetEigenStateChanges",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolGetEigenStateChangesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/operators/{operatorAddress}/delegated-stakers": {
      "get": {
        "summary": "GetDelegatedStakersForOperator returns the list of stakers that have delegated to an operator.\nBlockHeight is optional, otherwise latest is used.",
        "operationId": "Protocol_GetDelegatedStakersForOperator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolGetDelegatedStakersForOperatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/operators/{operatorAddress}/delegated-strategies": {
      "get": {
        "summary": "GetDelegatedStrategiesForOperator returns strategies an Operator has delegated",
        "operationId": "Protocol_GetDelegatedStrategiesForOperator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolGetDelegatedStrategiesForOperatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/operators/{operatorAddress}/queued-withdrawals": {
      "get": {
        "operationId": "Protocol_ListOperatorQueuedWithdrawals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolListOperatorQueuedWithdrawalsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/operators/{operatorAddress}/registered-avs": {
      "get": {
        "summary": "GetRegisteredAvsForOperator returns the list of registered AVs for a given operator\nBlockHeight is optional, otherwise latest is used.",
        "operationId": "Protocol_GetRegisteredAvsForOperator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolGetRegisteredAvsForOperatorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/operators/{operatorAddress}/strategies/{strategyAddress}/delegated-stake": {
      "get": {
        "summary": "GetOperatorDelegatedStakeForStrategy returns the amount of delegated stake for a given strategy for an operator",
        "operationId": "Protocol_GetOperatorDelegatedStakeForStrategy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolGetOperatorDelegatedStakeForStrategyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategyAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/operators/{operatorAddress}/strategies/{strategyAddress}/queued-withdrawals": {
      "get": {
        "operationId": "Protocol_ListOperatorStrategyQueuedWithdrawals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolListOperatorStrategyQueuedWithdrawalsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategyAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/stakers/{stakerAddress}/queued-withdrawals": {
      "get": {
        "operationId": "Protocol_ListStakerQueuedWithdrawals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolListStakerQueuedWithdrawalsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stakerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/stakers/{stakerAddress}/shares": {
      "get": {
        "summary": "GetStakerShares returns the shares of a staker, and optionally, the operator operator they've delegated to and\nthe AVS the operator has registered with.",
        "operationId": "Protocol_GetStakerShares",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolGetStakerSharesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stakerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/stakers/{stakerAddress}/strategies": {
      "get": {
        "operationId": "Protocol_ListStakerStrategies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolListStakerStrategiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stakerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/stakers/{stakerAddress}/strategies/{strategyAddress}": {
      "get": {
        "operationId": "Protocol_GetStrategyForStaker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolGetStrategyForStakerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stakerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "strategyAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/strategies": {
      "get": {
        "operationId": "Protocol_ListStrategies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolListStrategiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Protocol"
        ]
      }
    },
    "/protocol/v1/strategies/{strategyAddress}/queued-withdrawals": {
      "get": {
        "operationId": "Protocol_ListStrategyQueuedWithdrawals",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protocolListStrategyQueuedWithdrawalsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "strategyAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Protocol"
        ]
      }
    },
    "/rewards/v1/attributable-rewards-by-root/{distributionRoot}": {
      "get": {
        "operationId": "Rewards_GetAttributableRewardsForDistributionRoot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetAttributableRewardsForDistributionRootResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "distributionRoot",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/attributable-rewards/{snapshot}": {
      "get": {
        "summary": "GetAttributableRewardsForSnapshot returns the attributable rewards for the provided snapshot.\nThis takes the cumulative rewards amounts and breaks them down across operators, avss, strategies, etc",
        "operationId": "Rewards_GetAttributableRewardsForSnapshot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetAttributableRewardsForSnapshotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "snapshot",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/avs-rewards-by-root/{rootIndex}": {
      "get": {
        "operationId": "Rewards_GetRewardsByAvsForDistributionRoot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetRewardsByAvsForDistributionRootResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "rootIndex",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/backfill-staker-operators": {
      "post": {
        "operationId": "Rewards_BackfillStakerOperators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsBackfillStakerOperatorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rewardsBackfillStakerOperatorsRequest"
            }
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/blocks/{blockHeight}/claimed-rewards": {
      "get": {
        "summary": "GetClaimedRewardsByBlock returns the claimed rewards for the provided block height",
        "operationId": "Rewards_GetClaimedRewardsByBlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetClaimedRewardsByBlockResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHeight",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/blocks/{blockHeight}/rewards-root": {
      "get": {
        "summary": "GetRewardsRoot returns the posted on-chain root for the give block height",
        "operationId": "Rewards_GetRewardsRoot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetRewardsRootResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHeight",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/claim-proof": {
      "post": {
        "summary": "GenerateClaimProof generates a proof for the given earner address and tokens for claiming\ntokens against the RewardsCoordinator",
        "operationId": "Rewards_GenerateClaimProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGenerateClaimProofResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rewardsGenerateClaimProofRequest"
            }
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/distribution-roots": {
      "get": {
        "operationId": "Rewards_ListDistributionRoots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsListDistributionRootsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/distribution-roots/{rootIndex}/rewards": {
      "get": {
        "operationId": "Rewards_GetRewardsForDistributionRoot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetRewardsForDistributionRootResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "rootIndex",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/earners/{earnerAddress}/available-rewards-tokens": {
      "get": {
        "summary": "GetAvailableRewardsTokens returns the available rewards tokens for the given earner address",
        "operationId": "Rewards_GetAvailableRewardsTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetAvailableRewardsTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/earners/{earnerAddress}/claimable-rewards": {
      "get": {
        "summary": "GetClaimableRewards returns the claimable rewards for the given earner address.\nThis takes the current active tokens earned and subtracts total claimed.",
        "operationId": "Rewards_GetClaimableRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetClaimableRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/earners/{earnerAddress}/claimed-rewards": {
      "get": {
        "summary": "ListClaimedRewardsByBlockRange returns the claimed rewards for the given earner address and block range,\ninclusive of the start and end block heights",
        "operationId": "Rewards_ListClaimedRewardsByBlockRange",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsListClaimedRewardsByBlockRangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startBlockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "endBlockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/earners/{earnerAddress}/historical-rewards": {
      "get": {
        "summary": "List historical rewards for a given earner address",
        "description": "Returns a list of tokens containing a list of delta rewards for each snapshot date",
        "operationId": "Rewards_ListEarnerHistoricalRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsListEarnerHistoricalRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "startBlockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "endBlockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "tokens",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/earners/{earnerAddress}/lifetime-rewards": {
      "get": {
        "summary": "Lists the lifetime rewards for an earner",
        "description": "Returns a list of tokens and the total amount accumulated",
        "operationId": "Rewards_ListEarnerLifetimeRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsListEarnerLifetimeRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "pagination.pageNumber",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "pagination.pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/earners/{earnerAddress}/summarized-rewards": {
      "get": {
        "summary": "GetSummarizedRewardsForEarner returns the summarized rewards for the given earner address, including:\n- total tokens earned\n- total tokens active (subset of earned that are in roots that have surpassed their activation delay)\n- total claimed\n- total claimable (total active - total claimed)",
        "operationId": "Rewards_GetSummarizedRewardsForEarner",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetSummarizedRewardsForEarnerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/earners/{earnerAddress}/total-claimed-rewards": {
      "get": {
        "summary": "GetTotalClaimedRewards returns the total claimed rewards for the given earner address, summed up to and including\nthe provided blockHeight. If a blockHeight is omitted, the most recent indexed block is used.",
        "operationId": "Rewards_GetTotalClaimedRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetTotalClaimedRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "earnerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "blockHeight",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/generate-rewards": {
      "post": {
        "summary": "GenerateRewards generates rewards for the given cutoff_date.\nIf respondWithRewardsData is true, the response will include the rewards data, otherwise\nthe sidecar will cache the data to be requested later.",
        "operationId": "Rewards_GenerateRewards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGenerateRewardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rewardsGenerateRewardsRequest"
            }
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/generate-rewards-root": {
      "post": {
        "summary": "GenerateRewardsRoot generates a rewards root for the given snapshot.\nReturns an error if the rewards have not been generated for the snapshot.",
        "operationId": "Rewards_GenerateRewardsRoot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGenerateRewardsRootResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rewardsGenerateRewardsRootRequest"
            }
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/generate-staker-operators": {
      "post": {
        "operationId": "Rewards_GenerateStakerOperators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGenerateStakerOperatorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rewardsGenerateStakerOperatorsRequest"
            }
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rewards/v1/rewards/{snapshot}": {
      "get": {
        "summary": "GetRewardsForSnapshot returns the rewards for the provided snapshot.\nUseful if you generated the rewards and want to fetch them later.",
        "operationId": "Rewards_GetRewardsForSnapshot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rewardsGetRewardsForSnapshotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "snapshot",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "earner",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Rewards"
        ]
      }
    },
    "/rpc/v1/about": {
      "get": {
        "summary": "About returns information about the running sidecar process",
        "operationId": "Rpc_About",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarAboutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Rpc"
        ]
      }
    },
    "/rpc/v1/latest-block": {
      "get": {
        "operationId": "Rpc_GetBlockHeight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarGetBlockHeightResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "verified",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Rpc"
        ]
      }
    },
    "/rpc/v1/load-contract": {
      "post": {
        "operationId": "Rpc_LoadContract",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarLoadContractResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarLoadContractRequest"
            }
          }
        ],
        "tags": [
          "Rpc"
        ]
      }
    },
    "/rpc/v1/load-contracts": {
      "post": {
        "operationId": "Rpc_LoadContracts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarLoadContractsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarLoadContractsRequest"
            }
          }
        ],
        "tags": [
          "Rpc"
        ]
      }
    },
    "/rpc/v1/state-roots/{blockNumber}": {
      "get": {
        "operationId": "Rpc_GetStateRoot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarGetStateRootResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockNumber",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Rpc"
        ]
      }
    },
    "/v1/health": {
      "get": {
        "operationId": "Health_HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthHealthCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Health"
        ]
      }
    },
    "/v1/operatorSets/avss/{avsAddress}/operators": {
      "get": {
        "operationId": "OperatorSets_ListOperatorsForAvs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/operatorSetsListOperatorsForAvsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "avsAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OperatorSets"
        ]
      }
    },
    "/v1/operatorSets/stakers/{stakerAddress}/operators": {
      "get": {
        "operationId": "OperatorSets_ListOperatorsForStaker",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/operatorSetsListOperatorsForStakerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stakerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OperatorSets"
        ]
      }
    },
    "/v1/operatorSets/strategies/{strategyAddress}/operators": {
      "get": {
        "operationId": "OperatorSets_ListOperatorsForStrategy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/operatorSetsListOperatorsForStrategyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "strategyAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "OperatorSets"
        ]
      }
    },
    "/v1/ready": {
      "get": {
        "operationId": "Health_ReadyCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthReadyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/v1/slashing/avss/{avsAddress}/operator-sets/{operatorSetId}/slashing-history": {
      "get": {
        "operationId": "Slashing_ListAvsOperatorSetSlashingHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/slashingListAvsOperatorSetSlashingHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "avsAddress",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "operatorSetId",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Slashing"
        ]
      }
    },
    "/v1/slashing/avss/{avsAddress}/slashing-history": {
      "get": {
        "operationId": "Slashing_ListAvsSlashingHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/slashingListAvsSlashingHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "avsAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Slashing"
        ]
      }
    },
    "/v1/slashing/operators/{operatorAddress}/slashing-history": {
      "get": {
        "operationId": "Slashing_ListOperatorSlashingHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/slashingListOperatorSlashingHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "operatorAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Slashing"
        ]
      }
    },
    "/v1/slashing/stakers/{stakerAddress}/slashing-history": {
      "get": {
        "operationId": "Slashing_ListStakerSlashingHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/slashingListStakerSlashingHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "stakerAddress",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Slashing"
        ]
      }
    }
  },
  "definitions": {
    "HealthCheckResponseServingStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVING",
        "NOT_SERVING",
        "SERVICE_UNKNOWN"
      ],
      "default": "UNKNOWN",
      "description": " - SERVICE_UNKNOWN: Used only by the Watch method."
    },
    "HistoricalRewardHistoricalRewardAmount": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "snapshot": {
          "type": "string"
        }
      }
    },
    "StreamIndexedBlocksRequestFilters": {
      "type": "object",
      "properties": {
        "blockFilter": {
          "type": "string"
        },
        "stateChangeFilter": {
          "type": "string"
        }
      }
    },
    "commonPagination": {
      "type": "object",
      "properties": {
        "pageNumber": {
          "type": "integer",
          "format": "int64"
        },
        "pageSize": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "eigenStateAvsOperatorStateChange": {
      "type": "object",
      "properties": {
        "avs": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "registered": {
          "type": "boolean"
        },
        "transactionMetadata": {
          "$ref": "#/definitions/eigenStateTransactionMetadata"
        }
      }
    },
    "eigenStateDisabledDistributionRoot": {
      "type": "object",
      "properties": {
        "rootIndex": {
          "type": "string",
          "format": "uint64"
        },
        "transactionMetadata": {
          "$ref": "#/definitions/eigenStateTransactionMetadata"
        }
      }
    },
    "eigenStateEigenStateChange": {
      "type": "object",
      "properties": {
        "avsOperatorStateChange": {
          "$ref": "#/definitions/eigenStateAvsOperatorStateChange"
        },
        "operatorShareDelta": {
          "$ref": "#/definitions/eigenStateOperatorShareDelta"
        },
        "rewardSubmission": {
          "$ref": "#/definitions/eigenStateRewardSubmission"
        },
        "stakerDelegationChange": {
          "$ref": "#/definitions/eigenStateStakerDelegationChange"
        },
        "stakerShareDelta": {
          "$ref": "#/definitions/eigenStateStakerShareDelta"
        },
        "submittedDistributionRoot": {
          "$ref": "#/definitions/eigenStateSubmittedDistributionRoot"
        },
        "disabledDistributionRoot": {
          "$ref": "#/definitions/eigenStateDisabledDistributionRoot"
        }
      }
    },
    "eigenStateOperatorShareDelta": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string"
        },
        "staker": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "shares": {
          "type": "string"
        },
        "blockTime": {
          "type": "string",
          "format": "date-time"
        },
        "blockDate": {
          "type": "string"
        },
        "transactionMetadata": {
          "$ref": "#/definitions/eigenStateTransactionMetadata"
        }
      }
    },
    "eigenStateRewardSubmission": {
      "type": "object",
      "properties": {
        "avs": {
          "type": "string"
        },
        "rewardHash": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "strategyIndex": {
          "type": "string",
          "format": "uint64"
        },
        "multiplier": {
          "type": "string"
        },
        "startTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "endTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "duration": {
          "type": "string",
          "format": "uint64"
        },
        "rewardType": {
          "$ref": "#/definitions/eigenStateRewardSubmissionRewardType"
        },
        "transactionMetadata": {
          "$ref": "#/definitions/eigenStateTransactionMetadata"
        }
      }
    },
    "eigenStateRewardSubmissionRewardType": {
      "type": "string",
      "enum": [
        "AVS",
        "ALL_STAKERS",
        "ALL_EARNERS"
      ],
      "default": "AVS"
    },
    "eigenStateStakerDelegationChange": {
      "type": "object",
      "properties": {
        "staker": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "delegated": {
          "type": "boolean"
        },
        "transactionMetadata": {
          "$ref": "#/definitions/eigenStateTransactionMetadata"
        }
      }
    },
    "eigenStateStakerShareDelta": {
      "type": "object",
      "properties": {
        "staker": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "shares": {
          "type": "string"
        },
        "strategyIndex": {
          "type": "string",
          "format": "uint64"
        },
        "blockTime": {
          "type": "string",
          "format": "date-time"
        },
        "blockDate": {
          "type": "string"
        },
        "transactionMetadata": {
          "$ref": "#/definitions/eigenStateTransactionMetadata"
        }
      }
    },
    "eigenStateStateRoot": {
      "type": "object",
      "properties": {
        "ethBlockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "ethBlockHash": {
          "type": "string"
        },
        "stateRoot": {
          "type": "string"
        }
      }
    },
    "eigenStateSubmittedDistributionRoot": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string"
        },
        "rootIndex": {
          "type": "string",
          "format": "uint64"
        },
        "rewardsCalculationEnd": {
          "type": "string",
          "format": "date-time"
        },
        "rewardsCalculationEndUnit": {
          "type": "string"
        },
        "activatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "activatedAtUnit": {
          "type": "string"
        },
        "createdAtBlockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "transactionMetadata": {
          "$ref": "#/definitions/eigenStateTransactionMetadata"
        }
      }
    },
    "eigenStateTransactionMetadata": {
      "type": "object",
      "properties": {
        "logIndex": {
          "type": "string",
          "format": "uint64"
        },
        "transactionHash": {
          "type": "string"
        },
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "ethereumTypesBlock": {
      "type": "object",
      "properties": {
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "blockHash": {
          "type": "string"
        },
        "parentHash": {
          "type": "string"
        },
        "blockTime": {
          "type": "string",
          "format": "date-time"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ethereumTypesTransaction"
          }
        }
      }
    },
    "ethereumTypesTransaction": {
      "type": "object",
      "properties": {
        "transactionHash": {
          "type": "string"
        },
        "transactionIndex": {
          "type": "string",
          "format": "uint64"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "fromAddress": {
          "type": "string"
        },
        "toAddress": {
          "type": "string"
        },
        "contractAddress": {
          "type": "string"
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ethereumTypesTransactionLog"
          }
        }
      }
    },
    "ethereumTypesTransactionLog": {
      "type": "object",
      "properties": {
        "transactionHash": {
          "type": "string"
        },
        "transactionIndex": {
          "type": "string",
          "format": "uint64"
        },
        "logIndex": {
          "type": "string",
          "format": "uint64"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "address": {
          "type": "string"
        },
        "eventName": {
          "type": "string"
        },
        "arguments": {
          "type": "string",
          "format": "byte"
        },
        "outputData": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "eventsStreamEigenStateChangesRequest": {
      "type": "object",
      "properties": {
        "stateChangeFilter": {
          "type": "string"
        }
      }
    },
    "eventsStreamEigenStateChangesResponse": {
      "type": "object",
      "properties": {
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "stateRoot": {
          "$ref": "#/definitions/eigenStateStateRoot"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eigenStateEigenStateChange"
          }
        }
      }
    },
    "eventsStreamIndexedBlocksRequest": {
      "type": "object",
      "properties": {
        "includeStateChanges": {
          "type": "boolean",
          "title": "In addition to block data, include EigenState changes related to the block"
        },
        "onlyBlocksWithData": {
          "type": "boolean",
          "title": "If true, only returns blocks that had transactions/logs index or state changes if included"
        },
        "filters": {
          "$ref": "#/definitions/StreamIndexedBlocksRequestFilters"
        }
      }
    },
    "eventsStreamIndexedBlocksResponse": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/ethereumTypesBlock"
        },
        "stateRoot": {
          "$ref": "#/definitions/eigenStateStateRoot"
        },
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eigenStateEigenStateChange"
          }
        }
      }
    },
    "healthHealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/HealthCheckResponseServingStatus"
        }
      }
    },
    "healthReadyResponse": {
      "type": "object",
      "properties": {
        "ready": {
          "type": "boolean"
        }
      }
    },
    "operatorSetsListOperatorsForAvsResponse": {
      "type": "object",
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/operatorSetsOperator"
          }
        }
      }
    },
    "operatorSetsListOperatorsForStakerResponse": {
      "type": "object",
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/operatorSetsOperator"
          }
        }
      }
    },
    "operatorSetsListOperatorsForStrategyResponse": {
      "type": "object",
      "properties": {
        "operators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/operatorSetsOperator"
          }
        }
      }
    },
    "operatorSetsOperator": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string"
        },
        "operatorSets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1operatorSetsOperatorSet"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protocolGetDelegatedStakersForOperatorResponse": {
      "type": "object",
      "properties": {
        "stakerAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextPage": {
          "$ref": "#/definitions/commonPagination"
        }
      }
    },
    "protocolGetDelegatedStrategiesForOperatorResponse": {
      "type": "object",
      "properties": {
        "strategyAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protocolGetEigenStateChangesResponse": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/eigenStateEigenStateChange"
          }
        }
      }
    },
    "protocolGetOperatorDelegatedStakeForStrategyResponse": {
      "type": "object",
      "properties": {
        "shares": {
          "type": "string"
        },
        "avsAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protocolGetRegisteredAvsForOperatorResponse": {
      "type": "object",
      "properties": {
        "avsAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "protocolGetStakerSharesResponse": {
      "type": "object",
      "properties": {
        "shares": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protocolStakerShare"
          }
        }
      }
    },
    "protocolGetStrategyForStakerResponse": {
      "type": "object",
      "properties": {
        "stakerStrategy": {
          "$ref": "#/definitions/protocolStakerStrategy"
        }
      }
    },
    "protocolListOperatorQueuedWithdrawalsResponse": {
      "type": "object",
      "properties": {
        "strategies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protocolQueueStakerStrategyWithdrawal"
          }
        }
      }
    },
    "protocolListOperatorStrategyQueuedWithdrawalsResponse": {
      "type": "object",
      "properties": {
        "withdrawals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protocolStakerWithdrawal"
          }
        }
      }
    },
    "protocolListStakerQueuedWithdrawalsResponse": {
      "type": "object",
      "properties": {
        "queuedWithdrawals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protocolQueuedStrategyWithdrawal"
          }
        }
      }
    },
    "protocolListStakerStrategiesResponse": {
      "type": "object",
      "properties": {
        "stakerStrategies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protocolStakerStrategy"
          }
        }
      }
    },
    "protocolListStrategiesResponse": {
      "type": "object",
      "properties": {
        "strategies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1protocolStrategy"
          }
        }
      }
    },
    "protocolListStrategyQueuedWithdrawalsResponse": {
      "type": "object",
      "properties": {
        "withdrawals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protocolStakerWithdrawal"
          }
        }
      }
    },
    "protocolQueueStakerStrategyWithdrawal": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "withdrawals": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protocolStakerWithdrawal"
          }
        }
      }
    },
    "protocolQueuedStrategyWithdrawal": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "protocolStakerShare": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "shares": {
          "type": "string"
        },
        "operatorAddress": {
          "type": "string",
          "title": "Operator the staker has delegated to if present"
        },
        "avsAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The operator could be regietered with 0 or many AVSs"
        }
      }
    },
    "protocolStakerStrategy": {
      "type": "object",
      "properties": {
        "stakedAmount": {
          "type": "string"
        },
        "strategy": {
          "$ref": "#/definitions/v1protocolStrategy"
        }
      }
    },
    "protocolStakerWithdrawal": {
      "type": "object",
      "properties": {
        "staker": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "rewardsAttributableReward": {
      "type": "object",
      "properties": {
        "earner": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "avs": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "multiplier": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "shares": {
          "type": "string"
        },
        "rewardHash": {
          "type": "string"
        },
        "snapshot": {
          "type": "string"
        },
        "rewardType": {
          "$ref": "#/definitions/v1rewardsRewardType"
        }
      }
    },
    "rewardsAvsReward": {
      "type": "object",
      "properties": {
        "earner": {
          "type": "string"
        },
        "avs": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "rewardHash": {
          "type": "string"
        },
        "snapshot": {
          "type": "string"
        },
        "rewardType": {
          "$ref": "#/definitions/v1rewardsRewardType"
        }
      }
    },
    "rewardsBackfillStakerOperatorsRequest": {
      "type": "object",
      "properties": {
        "waitForComplete": {
          "type": "boolean"
        }
      }
    },
    "rewardsBackfillStakerOperatorsResponse": {
      "type": "object",
      "properties": {
        "queued": {
          "type": "boolean"
        }
      }
    },
    "rewardsClaimedReward": {
      "type": "object",
      "properties": {
        "earner": {
          "type": "string"
        },
        "claimer": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "distributionRoot": {
          "type": "string"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "recipient": {
          "type": "string"
        }
      }
    },
    "rewardsDistributionRoot": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string"
        },
        "rootIndex": {
          "type": "string",
          "format": "uint64"
        },
        "rewardsCalculationEnd": {
          "type": "string",
          "format": "date-time"
        },
        "rewardsCalculationEndUnit": {
          "type": "string"
        },
        "activatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "activatedAtUnit": {
          "type": "string"
        },
        "createdAtBlockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "transactionHash": {
          "type": "string"
        },
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        },
        "logIndex": {
          "type": "string",
          "format": "uint64"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "rewardsEarnerLeaf": {
      "type": "object",
      "properties": {
        "earner": {
          "type": "string"
        },
        "earnerTokenRoot": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rewardsGenerateClaimProofRequest": {
      "type": "object",
      "properties": {
        "earnerAddress": {
          "type": "string"
        },
        "tokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rootIndex": {
          "type": "string",
          "format": "int64",
          "title": "if root_index is omitted, the current active root will be used"
        }
      }
    },
    "rewardsGenerateClaimProofResponse": {
      "type": "object",
      "properties": {
        "proof": {
          "$ref": "#/definitions/rewardsProof"
        }
      }
    },
    "rewardsGenerateRewardsRequest": {
      "type": "object",
      "properties": {
        "cutoffDate": {
          "type": "string"
        },
        "respondWithRewardsData": {
          "type": "boolean"
        },
        "waitForComplete": {
          "type": "boolean"
        }
      }
    },
    "rewardsGenerateRewardsResponse": {
      "type": "object",
      "properties": {
        "cutoffDate": {
          "type": "string"
        },
        "rewards": {
          "$ref": "#/definitions/rewardsReward",
          "title": "Returned if respondWithRewardsData is true in the request"
        },
        "queued": {
          "type": "boolean"
        }
      }
    },
    "rewardsGenerateRewardsRootRequest": {
      "type": "object",
      "properties": {
        "cutoffDate": {
          "type": "string",
          "title": "The date to calculate rewards up to, exclusive"
        }
      }
    },
    "rewardsGenerateRewardsRootResponse": {
      "type": "object",
      "properties": {
        "rewardsRoot": {
          "type": "string"
        },
        "rewardsCalcEndDate": {
          "type": "string"
        }
      }
    },
    "rewardsGenerateStakerOperatorsRequest": {
      "type": "object",
      "properties": {
        "cutoffDate": {
          "type": "string"
        },
        "waitForComplete": {
          "type": "boolean"
        }
      }
    },
    "rewardsGenerateStakerOperatorsResponse": {
      "type": "object",
      "properties": {
        "queued": {
          "type": "boolean"
        }
      }
    },
    "rewardsGetAttributableRewardsForDistributionRootResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsAttributableReward"
          }
        }
      }
    },
    "rewardsGetAttributableRewardsForSnapshotResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsAttributableReward"
          }
        }
      }
    },
    "rewardsGetAvailableRewardsTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "rewardsGetClaimableRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsReward"
          }
        }
      }
    },
    "rewardsGetClaimedRewardsByBlockResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsClaimedReward"
          }
        }
      }
    },
    "rewardsGetRewardsByAvsForDistributionRootResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsAvsReward"
          }
        }
      }
    },
    "rewardsGetRewardsForDistributionRootResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsReward"
          }
        }
      }
    },
    "rewardsGetRewardsForSnapshotResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsReward"
          }
        }
      }
    },
    "rewardsGetRewardsRootResponse": {
      "type": "object",
      "properties": {
        "rewardsRoot": {
          "$ref": "#/definitions/rewardsDistributionRoot"
        }
      }
    },
    "rewardsGetSummarizedRewardsForEarnerResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsSummarizedEarnerReward"
          }
        }
      }
    },
    "rewardsGetTotalClaimedRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsTotalClaimedReward"
          }
        }
      }
    },
    "rewardsHistoricalReward": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "amounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/HistoricalRewardHistoricalRewardAmount"
          }
        }
      }
    },
    "rewardsListClaimedRewardsByBlockRangeResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsClaimedReward"
          }
        }
      }
    },
    "rewardsListDistributionRootsResponse": {
      "type": "object",
      "properties": {
        "distributionRoots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsDistributionRoot"
          }
        }
      }
    },
    "rewardsListEarnerHistoricalRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsHistoricalReward"
          }
        },
        "nextPage": {
          "$ref": "#/definitions/commonPagination"
        }
      }
    },
    "rewardsListEarnerLifetimeRewardsResponse": {
      "type": "object",
      "properties": {
        "rewards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsRewardAmount"
          }
        },
        "nextPage": {
          "$ref": "#/definitions/commonPagination"
        }
      }
    },
    "rewardsProof": {
      "type": "object",
      "properties": {
        "root": {
          "type": "string",
          "format": "byte"
        },
        "rootIndex": {
          "type": "integer",
          "format": "int64"
        },
        "earnerIndex": {
          "type": "integer",
          "format": "int64"
        },
        "earnerTreeProof": {
          "type": "string",
          "format": "byte"
        },
        "earnerLeaf": {
          "$ref": "#/definitions/rewardsEarnerLeaf"
        },
        "tokenIndices": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "tokenTreeProofs": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "tokenLeaves": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/rewardsTokenLeaf"
          }
        }
      },
      "title": "Proof closely models the IRewardsCoordinatorRewardsMerkleClaim interface found\nin the RewardsCoordinator contract"
    },
    "rewardsReward": {
      "type": "object",
      "properties": {
        "earner": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "snapshot": {
          "type": "string"
        }
      }
    },
    "rewardsRewardAmount": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        }
      }
    },
    "rewardsSummarizedEarnerReward": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "earned": {
          "type": "string",
          "title": "Rewards that have been earned but not necessarily activated yet"
        },
        "active": {
          "type": "string",
          "title": "total rewards that are claimable (does not account for claimed)"
        },
        "claimed": {
          "type": "string",
          "title": "total rewards that have been claimed"
        },
        "claimable": {
          "type": "string",
          "title": "rewards that can be claimed at the block height"
        }
      }
    },
    "rewardsTokenLeaf": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "cumulativeEarnings": {
          "type": "string"
        }
      }
    },
    "rewardsTotalClaimedReward": {
      "type": "object",
      "properties": {
        "earner": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "sidecarAboutResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "chain": {
          "type": "string"
        }
      }
    },
    "sidecarGetBlockHeightResponse": {
      "type": "object",
      "properties": {
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "blockHash": {
          "type": "string"
        }
      }
    },
    "sidecarGetStateRootResponse": {
      "type": "object",
      "properties": {
        "ethBlockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "ethBlockHash": {
          "type": "string"
        },
        "stateRoot": {
          "type": "string"
        }
      }
    },
    "sidecarLoadContractRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "abi": {
          "type": "string"
        },
        "bytecodeHash": {
          "type": "string"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "associateToProxy": {
          "type": "string"
        }
      }
    },
    "sidecarLoadContractResponse": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        },
        "address": {
          "type": "string"
        }
      }
    },
    "sidecarLoadContractsRequest": {
      "type": "object",
      "properties": {
        "contractsJson": {
          "type": "string"
        }
      }
    },
    "sidecarLoadContractsResponse": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "slashingListAvsOperatorSetSlashingHistoryResponse": {
      "type": "object",
      "properties": {
        "slashingEvents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/slashingSlashingEvent"
          }
        }
      }
    },
    "slashingListAvsSlashingHistoryResponse": {
      "type": "object",
      "properties": {
        "slashingEvents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/slashingSlashingEvent"
          }
        }
      }
    },
    "slashingListOperatorSlashingHistoryResponse": {
      "type": "object",
      "properties": {
        "slashingEvents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/slashingSlashingEvent"
          }
        }
      }
    },
    "slashingListStakerSlashingHistoryResponse": {
      "type": "object",
      "properties": {
        "stakerSlashingEvents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/slashingStakerSlashingEvent"
          }
        }
      }
    },
    "slashingSlashingEvent": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "transactionHash": {
          "type": "string"
        },
        "logIndex": {
          "type": "string",
          "format": "uint64"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        },
        "strategies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/slashingSlashingEventStrategy"
          }
        },
        "operatorSet": {
          "$ref": "#/definitions/slashingSlashingEventOperatorSet"
        }
      }
    },
    "slashingSlashingEventOperatorSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "avs": {
          "type": "string"
        }
      }
    },
    "slashingSlashingEventStrategy": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "wadSlashed": {
          "type": "string"
        },
        "totalSharesSlashed": {
          "type": "string"
        }
      }
    },
    "slashingStakerSlashingEvent": {
      "type": "object",
      "properties": {
        "staker": {
          "type": "string"
        },
        "slashingEvent": {
          "$ref": "#/definitions/slashingSlashingEvent"
        }
      }
    },
    "v1GetDailyAprForEarnerStrategyResponse": {
      "type": "object",
      "properties": {
        "apr": {
          "type": "string"
        }
      }
    },
    "v1GetDailyOperatorStrategyAprsResponse": {
      "type": "object",
      "properties": {
        "aprs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OperatorStrategyApr"
          }
        }
      }
    },
    "v1OperatorStrategyApr": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "apr": {
          "type": "string"
        }
      }
    },
    "v1operatorSetsOperatorSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "avs": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        },
        "magnitude": {
          "type": "string"
        },
        "totalStaked": {
          "type": "string"
        }
      }
    },
    "v1protocolStrategy": {
      "type": "object",
      "properties": {
        "strategy": {
          "type": "string"
        },
        "totalStake": {
          "type": "string"
        },
        "rewardedTokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1rewardsRewardType": {
      "type": "string",
      "enum": [
        "REWARD_TYPE_AVS",
        "REWARD_TYPE_FOR_ALL",
        "REWARD_TYPE_FOR_ALL_EARNERS"
      ],
      "default": "REWARD_TYPE_AVS"
    }
  }
}
