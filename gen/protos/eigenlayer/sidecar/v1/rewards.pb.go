// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: eigenlayer/sidecar/v1/rewards.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttributableRewardRewardType int32

const (
	AttributableReward_REWARD_TYPE_AVS             AttributableRewardRewardType = 0
	AttributableReward_REWARD_TYPE_FOR_ALL         AttributableRewardRewardType = 1
	AttributableReward_REWARD_TYPE_FOR_ALL_EARNERS AttributableRewardRewardType = 2
)

// Enum value maps for AttributableRewardRewardType.
var (
	AttributableRewardRewardType_name = map[int32]string{
		0: "REWARD_TYPE_AVS",
		1: "REWARD_TYPE_FOR_ALL",
		2: "REWARD_TYPE_FOR_ALL_EARNERS",
	}
	AttributableRewardRewardType_value = map[string]int32{
		"REWARD_TYPE_AVS":             0,
		"REWARD_TYPE_FOR_ALL":         1,
		"REWARD_TYPE_FOR_ALL_EARNERS": 2,
	}
)

func (x AttributableRewardRewardType) Enum() *AttributableRewardRewardType {
	p := new(AttributableRewardRewardType)
	*p = x
	return p
}

func (x AttributableRewardRewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributableRewardRewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_eigenlayer_sidecar_v1_rewards_proto_enumTypes[0].Descriptor()
}

func (AttributableRewardRewardType) Type() protoreflect.EnumType {
	return &file_eigenlayer_sidecar_v1_rewards_proto_enumTypes[0]
}

func (x AttributableRewardRewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributableRewardRewardType.Descriptor instead.
func (AttributableRewardRewardType) EnumDescriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{4, 0}
}

type EarnerLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earner          string `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	EarnerTokenRoot string `protobuf:"bytes,2,opt,name=earner_token_root,json=earnerTokenRoot,proto3" json:"earner_token_root,omitempty"`
}

func (x *EarnerLeaf) Reset() {
	*x = EarnerLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarnerLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarnerLeaf) ProtoMessage() {}

func (x *EarnerLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarnerLeaf.ProtoReflect.Descriptor instead.
func (*EarnerLeaf) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{0}
}

func (x *EarnerLeaf) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *EarnerLeaf) GetEarnerTokenRoot() string {
	if x != nil {
		return x.EarnerTokenRoot
	}
	return ""
}

type TokenLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token              string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CumulativeEarnings string `protobuf:"bytes,2,opt,name=cumulative_earnings,json=cumulativeEarnings,proto3" json:"cumulative_earnings,omitempty"`
}

func (x *TokenLeaf) Reset() {
	*x = TokenLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenLeaf) ProtoMessage() {}

func (x *TokenLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenLeaf.ProtoReflect.Descriptor instead.
func (*TokenLeaf) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{1}
}

func (x *TokenLeaf) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenLeaf) GetCumulativeEarnings() string {
	if x != nil {
		return x.CumulativeEarnings
	}
	return ""
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root            string       `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	RootIndex       uint32       `protobuf:"varint,2,opt,name=root_index,json=rootIndex,proto3" json:"root_index,omitempty"`
	EarnerIndex     uint32       `protobuf:"varint,3,opt,name=earner_index,json=earnerIndex,proto3" json:"earner_index,omitempty"`
	EarnerTreeProof string       `protobuf:"bytes,4,opt,name=earner_tree_proof,json=earnerTreeProof,proto3" json:"earner_tree_proof,omitempty"`
	EarnerLeaf      *EarnerLeaf  `protobuf:"bytes,5,opt,name=earner_leaf,json=earnerLeaf,proto3" json:"earner_leaf,omitempty"`
	LeafIndices     []uint32     `protobuf:"varint,6,rep,packed,name=leaf_indices,json=leafIndices,proto3" json:"leaf_indices,omitempty"`
	TokenTreeProofs []string     `protobuf:"bytes,7,rep,name=token_tree_proofs,json=tokenTreeProofs,proto3" json:"token_tree_proofs,omitempty"`
	TokenLeaves     []*TokenLeaf `protobuf:"bytes,8,rep,name=token_leaves,json=tokenLeaves,proto3" json:"token_leaves,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{2}
}

func (x *Proof) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Proof) GetRootIndex() uint32 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

func (x *Proof) GetEarnerIndex() uint32 {
	if x != nil {
		return x.EarnerIndex
	}
	return 0
}

func (x *Proof) GetEarnerTreeProof() string {
	if x != nil {
		return x.EarnerTreeProof
	}
	return ""
}

func (x *Proof) GetEarnerLeaf() *EarnerLeaf {
	if x != nil {
		return x.EarnerLeaf
	}
	return nil
}

func (x *Proof) GetLeafIndices() []uint32 {
	if x != nil {
		return x.LeafIndices
	}
	return nil
}

func (x *Proof) GetTokenTreeProofs() []string {
	if x != nil {
		return x.TokenTreeProofs
	}
	return nil
}

func (x *Proof) GetTokenLeaves() []*TokenLeaf {
	if x != nil {
		return x.TokenLeaves
	}
	return nil
}

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earner   string `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Snapshot string `protobuf:"bytes,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{3}
}

func (x *Reward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *Reward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Reward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Reward) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type AttributableReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earner     string `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Operator   string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Avs        string `protobuf:"bytes,3,opt,name=avs,proto3" json:"avs,omitempty"`
	Token      string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Strategy   string `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Multiplier string `protobuf:"bytes,6,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	Amount     string `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Shares     string `protobuf:"bytes,8,opt,name=shares,proto3" json:"shares,omitempty"`
	RewardHash string `protobuf:"bytes,9,opt,name=reward_hash,json=rewardHash,proto3" json:"reward_hash,omitempty"`
	Snapshot   string `protobuf:"bytes,10,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *AttributableReward) Reset() {
	*x = AttributableReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributableReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributableReward) ProtoMessage() {}

func (x *AttributableReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributableReward.ProtoReflect.Descriptor instead.
func (*AttributableReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{4}
}

func (x *AttributableReward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *AttributableReward) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AttributableReward) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *AttributableReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AttributableReward) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *AttributableReward) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *AttributableReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AttributableReward) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *AttributableReward) GetRewardHash() string {
	if x != nil {
		return x.RewardHash
	}
	return ""
}

func (x *AttributableReward) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type DistributionRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root                    string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	BlockHeight             uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	CalculationEndTimestamp uint64 `protobuf:"varint,3,opt,name=calculation_end_timestamp,json=calculationEndTimestamp,proto3" json:"calculation_end_timestamp,omitempty"`
	ActivatedAt             uint64 `protobuf:"varint,4,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
	Disabled                bool   `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *DistributionRoot) Reset() {
	*x = DistributionRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistributionRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionRoot) ProtoMessage() {}

func (x *DistributionRoot) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionRoot.ProtoReflect.Descriptor instead.
func (*DistributionRoot) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{5}
}

func (x *DistributionRoot) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *DistributionRoot) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *DistributionRoot) GetCalculationEndTimestamp() uint64 {
	if x != nil {
		return x.CalculationEndTimestamp
	}
	return 0
}

func (x *DistributionRoot) GetActivatedAt() uint64 {
	if x != nil {
		return x.ActivatedAt
	}
	return 0
}

func (x *DistributionRoot) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type GetRewardsRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *GetRewardsRootRequest) Reset() {
	*x = GetRewardsRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsRootRequest) ProtoMessage() {}

func (x *GetRewardsRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsRootRequest.ProtoReflect.Descriptor instead.
func (*GetRewardsRootRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{6}
}

func (x *GetRewardsRootRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type GetRewardsRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsRoot *DistributionRoot `protobuf:"bytes,1,opt,name=rewards_root,json=rewardsRoot,proto3" json:"rewards_root,omitempty"`
}

func (x *GetRewardsRootResponse) Reset() {
	*x = GetRewardsRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsRootResponse) ProtoMessage() {}

func (x *GetRewardsRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsRootResponse.ProtoReflect.Descriptor instead.
func (*GetRewardsRootResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{7}
}

func (x *GetRewardsRootResponse) GetRewardsRoot() *DistributionRoot {
	if x != nil {
		return x.RewardsRoot
	}
	return nil
}

type GenerateRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CutoffDate             string `protobuf:"bytes,1,opt,name=cutoff_date,json=cutoffDate,proto3" json:"cutoff_date,omitempty"`
	RespondWithRewardsData bool   `protobuf:"varint,2,opt,name=respond_with_rewards_data,json=respondWithRewardsData,proto3" json:"respond_with_rewards_data,omitempty"`
}

func (x *GenerateRewardsRequest) Reset() {
	*x = GenerateRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRewardsRequest) ProtoMessage() {}

func (x *GenerateRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRewardsRequest.ProtoReflect.Descriptor instead.
func (*GenerateRewardsRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateRewardsRequest) GetCutoffDate() string {
	if x != nil {
		return x.CutoffDate
	}
	return ""
}

func (x *GenerateRewardsRequest) GetRespondWithRewardsData() bool {
	if x != nil {
		return x.RespondWithRewardsData
	}
	return false
}

type GenerateRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CutoffDate string `protobuf:"bytes,1,opt,name=cutoff_date,json=cutoffDate,proto3" json:"cutoff_date,omitempty"`
	// Returned if respondWithRewardsData is true in the request
	Rewards *Reward `protobuf:"bytes,2,opt,name=rewards,proto3,oneof" json:"rewards,omitempty"`
}

func (x *GenerateRewardsResponse) Reset() {
	*x = GenerateRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRewardsResponse) ProtoMessage() {}

func (x *GenerateRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRewardsResponse.ProtoReflect.Descriptor instead.
func (*GenerateRewardsResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateRewardsResponse) GetCutoffDate() string {
	if x != nil {
		return x.CutoffDate
	}
	return ""
}

func (x *GenerateRewardsResponse) GetRewards() *Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GenerateStakerOperatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CutoffDate string `protobuf:"bytes,1,opt,name=cutoff_date,json=cutoffDate,proto3" json:"cutoff_date,omitempty"`
}

func (x *GenerateStakerOperatorsRequest) Reset() {
	*x = GenerateStakerOperatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateStakerOperatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStakerOperatorsRequest) ProtoMessage() {}

func (x *GenerateStakerOperatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStakerOperatorsRequest.ProtoReflect.Descriptor instead.
func (*GenerateStakerOperatorsRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateStakerOperatorsRequest) GetCutoffDate() string {
	if x != nil {
		return x.CutoffDate
	}
	return ""
}

type GenerateStakerOperatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenerateStakerOperatorsResponse) Reset() {
	*x = GenerateStakerOperatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateStakerOperatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStakerOperatorsResponse) ProtoMessage() {}

func (x *GenerateStakerOperatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStakerOperatorsResponse.ProtoReflect.Descriptor instead.
func (*GenerateStakerOperatorsResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{11}
}

type BackfillStakerOperatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CutoffDate string `protobuf:"bytes,1,opt,name=cutoff_date,json=cutoffDate,proto3" json:"cutoff_date,omitempty"`
}

func (x *BackfillStakerOperatorsRequest) Reset() {
	*x = BackfillStakerOperatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillStakerOperatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillStakerOperatorsRequest) ProtoMessage() {}

func (x *BackfillStakerOperatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillStakerOperatorsRequest.ProtoReflect.Descriptor instead.
func (*BackfillStakerOperatorsRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{12}
}

func (x *BackfillStakerOperatorsRequest) GetCutoffDate() string {
	if x != nil {
		return x.CutoffDate
	}
	return ""
}

type BackfillStakerOperatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackfillStakerOperatorsResponse) Reset() {
	*x = BackfillStakerOperatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillStakerOperatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillStakerOperatorsResponse) ProtoMessage() {}

func (x *BackfillStakerOperatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillStakerOperatorsResponse.ProtoReflect.Descriptor instead.
func (*BackfillStakerOperatorsResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{13}
}

type GenerateRewardsRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date to calculate rewards up to, exclusive
	CutoffDate string `protobuf:"bytes,1,opt,name=cutoff_date,json=cutoffDate,proto3" json:"cutoff_date,omitempty"`
}

func (x *GenerateRewardsRootRequest) Reset() {
	*x = GenerateRewardsRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRewardsRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRewardsRootRequest) ProtoMessage() {}

func (x *GenerateRewardsRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRewardsRootRequest.ProtoReflect.Descriptor instead.
func (*GenerateRewardsRootRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateRewardsRootRequest) GetCutoffDate() string {
	if x != nil {
		return x.CutoffDate
	}
	return ""
}

type GenerateRewardsRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardsRoot        string `protobuf:"bytes,1,opt,name=rewards_root,json=rewardsRoot,proto3" json:"rewards_root,omitempty"`
	RewardsCalcEndDate string `protobuf:"bytes,2,opt,name=rewards_calc_end_date,json=rewardsCalcEndDate,proto3" json:"rewards_calc_end_date,omitempty"`
}

func (x *GenerateRewardsRootResponse) Reset() {
	*x = GenerateRewardsRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRewardsRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRewardsRootResponse) ProtoMessage() {}

func (x *GenerateRewardsRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRewardsRootResponse.ProtoReflect.Descriptor instead.
func (*GenerateRewardsRootResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateRewardsRootResponse) GetRewardsRoot() string {
	if x != nil {
		return x.RewardsRoot
	}
	return ""
}

func (x *GenerateRewardsRootResponse) GetRewardsCalcEndDate() string {
	if x != nil {
		return x.RewardsCalcEndDate
	}
	return ""
}

type GetRewardsForSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetRewardsForSnapshotRequest) Reset() {
	*x = GetRewardsForSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsForSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsForSnapshotRequest) ProtoMessage() {}

func (x *GetRewardsForSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsForSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetRewardsForSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{16}
}

func (x *GetRewardsForSnapshotRequest) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type GetRewardsForSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetRewardsForSnapshotResponse) Reset() {
	*x = GetRewardsForSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsForSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsForSnapshotResponse) ProtoMessage() {}

func (x *GetRewardsForSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsForSnapshotResponse.ProtoReflect.Descriptor instead.
func (*GetRewardsForSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{17}
}

func (x *GetRewardsForSnapshotResponse) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GetAttributableRewardsForSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *GetAttributableRewardsForSnapshotRequest) Reset() {
	*x = GetAttributableRewardsForSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributableRewardsForSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributableRewardsForSnapshotRequest) ProtoMessage() {}

func (x *GetAttributableRewardsForSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributableRewardsForSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetAttributableRewardsForSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{18}
}

func (x *GetAttributableRewardsForSnapshotRequest) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type GetAttributableRewardsForSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*AttributableReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetAttributableRewardsForSnapshotResponse) Reset() {
	*x = GetAttributableRewardsForSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributableRewardsForSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributableRewardsForSnapshotResponse) ProtoMessage() {}

func (x *GetAttributableRewardsForSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributableRewardsForSnapshotResponse.ProtoReflect.Descriptor instead.
func (*GetAttributableRewardsForSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{19}
}

func (x *GetAttributableRewardsForSnapshotResponse) GetRewards() []*AttributableReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GetAttributableRewardsForDistributionRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistributionRoot string `protobuf:"bytes,1,opt,name=distribution_root,json=distributionRoot,proto3" json:"distribution_root,omitempty"`
}

func (x *GetAttributableRewardsForDistributionRootRequest) Reset() {
	*x = GetAttributableRewardsForDistributionRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributableRewardsForDistributionRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributableRewardsForDistributionRootRequest) ProtoMessage() {}

func (x *GetAttributableRewardsForDistributionRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributableRewardsForDistributionRootRequest.ProtoReflect.Descriptor instead.
func (*GetAttributableRewardsForDistributionRootRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{20}
}

func (x *GetAttributableRewardsForDistributionRootRequest) GetDistributionRoot() string {
	if x != nil {
		return x.DistributionRoot
	}
	return ""
}

type GetAttributableRewardsForDistributionRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*AttributableReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetAttributableRewardsForDistributionRootResponse) Reset() {
	*x = GetAttributableRewardsForDistributionRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAttributableRewardsForDistributionRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAttributableRewardsForDistributionRootResponse) ProtoMessage() {}

func (x *GetAttributableRewardsForDistributionRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAttributableRewardsForDistributionRootResponse.ProtoReflect.Descriptor instead.
func (*GetAttributableRewardsForDistributionRootResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{21}
}

func (x *GetAttributableRewardsForDistributionRootResponse) GetRewards() []*AttributableReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GenerateClaimProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EarnerAddress string   `protobuf:"bytes,1,opt,name=earner_address,json=earnerAddress,proto3" json:"earner_address,omitempty"`
	Tokens        []string `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *GenerateClaimProofRequest) Reset() {
	*x = GenerateClaimProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateClaimProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateClaimProofRequest) ProtoMessage() {}

func (x *GenerateClaimProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateClaimProofRequest.ProtoReflect.Descriptor instead.
func (*GenerateClaimProofRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{22}
}

func (x *GenerateClaimProofRequest) GetEarnerAddress() string {
	if x != nil {
		return x.EarnerAddress
	}
	return ""
}

func (x *GenerateClaimProofRequest) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type GenerateClaimProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proof *Proof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *GenerateClaimProofResponse) Reset() {
	*x = GenerateClaimProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateClaimProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateClaimProofResponse) ProtoMessage() {}

func (x *GenerateClaimProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateClaimProofResponse.ProtoReflect.Descriptor instead.
func (*GenerateClaimProofResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{23}
}

func (x *GenerateClaimProofResponse) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type GetAvailableRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EarnerAddress string `protobuf:"bytes,1,opt,name=earner_address,json=earnerAddress,proto3" json:"earner_address,omitempty"`
}

func (x *GetAvailableRewardsRequest) Reset() {
	*x = GetAvailableRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRewardsRequest) ProtoMessage() {}

func (x *GetAvailableRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableRewardsRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{24}
}

func (x *GetAvailableRewardsRequest) GetEarnerAddress() string {
	if x != nil {
		return x.EarnerAddress
	}
	return ""
}

type GetAvailableRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetAvailableRewardsResponse) Reset() {
	*x = GetAvailableRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRewardsResponse) ProtoMessage() {}

func (x *GetAvailableRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableRewardsResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{25}
}

func (x *GetAvailableRewardsResponse) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GetTotalClaimedRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EarnerAddress string  `protobuf:"bytes,1,opt,name=earner_address,json=earnerAddress,proto3" json:"earner_address,omitempty"`
	BlockHeight   *uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
}

func (x *GetTotalClaimedRewardsRequest) Reset() {
	*x = GetTotalClaimedRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalClaimedRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalClaimedRewardsRequest) ProtoMessage() {}

func (x *GetTotalClaimedRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalClaimedRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetTotalClaimedRewardsRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{26}
}

func (x *GetTotalClaimedRewardsRequest) GetEarnerAddress() string {
	if x != nil {
		return x.EarnerAddress
	}
	return ""
}

func (x *GetTotalClaimedRewardsRequest) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

type GetTotalClaimedRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*Reward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetTotalClaimedRewardsResponse) Reset() {
	*x = GetTotalClaimedRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalClaimedRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalClaimedRewardsResponse) ProtoMessage() {}

func (x *GetTotalClaimedRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalClaimedRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetTotalClaimedRewardsResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{27}
}

func (x *GetTotalClaimedRewardsResponse) GetRewards() []*Reward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type GetAvailableRewardsTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EarnerAddress string `protobuf:"bytes,1,opt,name=earner_address,json=earnerAddress,proto3" json:"earner_address,omitempty"`
}

func (x *GetAvailableRewardsTokensRequest) Reset() {
	*x = GetAvailableRewardsTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableRewardsTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRewardsTokensRequest) ProtoMessage() {}

func (x *GetAvailableRewardsTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRewardsTokensRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableRewardsTokensRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{28}
}

func (x *GetAvailableRewardsTokensRequest) GetEarnerAddress() string {
	if x != nil {
		return x.EarnerAddress
	}
	return ""
}

type GetAvailableRewardsTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *GetAvailableRewardsTokensResponse) Reset() {
	*x = GetAvailableRewardsTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableRewardsTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableRewardsTokensResponse) ProtoMessage() {}

func (x *GetAvailableRewardsTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableRewardsTokensResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableRewardsTokensResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{29}
}

func (x *GetAvailableRewardsTokensResponse) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type SummarizedEarnerReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Rewards that have been earned but not necessarily activated yet
	Earned string `protobuf:"bytes,2,opt,name=earned,proto3" json:"earned,omitempty"`
	// total rewards that are claimable (does not account for claimed)
	Claimable string `protobuf:"bytes,3,opt,name=claimable,proto3" json:"claimable,omitempty"`
	// total rewards that have been claimed
	Claimed string `protobuf:"bytes,4,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (x *SummarizedEarnerReward) Reset() {
	*x = SummarizedEarnerReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizedEarnerReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizedEarnerReward) ProtoMessage() {}

func (x *SummarizedEarnerReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizedEarnerReward.ProtoReflect.Descriptor instead.
func (*SummarizedEarnerReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{30}
}

func (x *SummarizedEarnerReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SummarizedEarnerReward) GetEarned() string {
	if x != nil {
		return x.Earned
	}
	return ""
}

func (x *SummarizedEarnerReward) GetClaimable() string {
	if x != nil {
		return x.Claimable
	}
	return ""
}

func (x *SummarizedEarnerReward) GetClaimed() string {
	if x != nil {
		return x.Claimed
	}
	return ""
}

type GetSummarizedRewardsForEarnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EarnerAddress string  `protobuf:"bytes,1,opt,name=earner_address,json=earnerAddress,proto3" json:"earner_address,omitempty"`
	BlockHeight   *uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
}

func (x *GetSummarizedRewardsForEarnerRequest) Reset() {
	*x = GetSummarizedRewardsForEarnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummarizedRewardsForEarnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummarizedRewardsForEarnerRequest) ProtoMessage() {}

func (x *GetSummarizedRewardsForEarnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummarizedRewardsForEarnerRequest.ProtoReflect.Descriptor instead.
func (*GetSummarizedRewardsForEarnerRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{31}
}

func (x *GetSummarizedRewardsForEarnerRequest) GetEarnerAddress() string {
	if x != nil {
		return x.EarnerAddress
	}
	return ""
}

func (x *GetSummarizedRewardsForEarnerRequest) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

type GetSummarizedRewardsForEarnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*SummarizedEarnerReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetSummarizedRewardsForEarnerResponse) Reset() {
	*x = GetSummarizedRewardsForEarnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummarizedRewardsForEarnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummarizedRewardsForEarnerResponse) ProtoMessage() {}

func (x *GetSummarizedRewardsForEarnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummarizedRewardsForEarnerResponse.ProtoReflect.Descriptor instead.
func (*GetSummarizedRewardsForEarnerResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{32}
}

func (x *GetSummarizedRewardsForEarnerResponse) GetRewards() []*SummarizedEarnerReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type ClaimedReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Earner           string `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Claimer          string `protobuf:"bytes,2,opt,name=claimer,proto3" json:"claimer,omitempty"`
	Token            string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount           string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	DistributionRoot string `protobuf:"bytes,5,opt,name=distribution_root,json=distributionRoot,proto3" json:"distribution_root,omitempty"`
}

func (x *ClaimedReward) Reset() {
	*x = ClaimedReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimedReward) ProtoMessage() {}

func (x *ClaimedReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimedReward.ProtoReflect.Descriptor instead.
func (*ClaimedReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{33}
}

func (x *ClaimedReward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *ClaimedReward) GetClaimer() string {
	if x != nil {
		return x.Claimer
	}
	return ""
}

func (x *ClaimedReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ClaimedReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ClaimedReward) GetDistributionRoot() string {
	if x != nil {
		return x.DistributionRoot
	}
	return ""
}

type GetClaimedRewardsByBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *GetClaimedRewardsByBlockRequest) Reset() {
	*x = GetClaimedRewardsByBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClaimedRewardsByBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClaimedRewardsByBlockRequest) ProtoMessage() {}

func (x *GetClaimedRewardsByBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClaimedRewardsByBlockRequest.ProtoReflect.Descriptor instead.
func (*GetClaimedRewardsByBlockRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{34}
}

func (x *GetClaimedRewardsByBlockRequest) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type GetClaimedRewardsByBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards []*ClaimedReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *GetClaimedRewardsByBlockResponse) Reset() {
	*x = GetClaimedRewardsByBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClaimedRewardsByBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClaimedRewardsByBlockResponse) ProtoMessage() {}

func (x *GetClaimedRewardsByBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClaimedRewardsByBlockResponse.ProtoReflect.Descriptor instead.
func (*GetClaimedRewardsByBlockResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP(), []int{35}
}

func (x *GetClaimedRewardsByBlockResponse) GetRewards() []*ClaimedReward {
	if x != nil {
		return x.Rewards
	}
	return nil
}

var File_eigenlayer_sidecar_v1_rewards_proto protoreflect.FileDescriptor

var file_eigenlayer_sidecar_v1_rewards_proto_rawDesc = []byte{
	0x0a, 0x23, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x50, 0x0a, 0x0a, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x6f, 0x6f, 0x74, 0x22, 0x52, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x61,
	0x66, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6c,
	0x65, 0x61, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x4c, 0x65, 0x61, 0x66, 0x52, 0x0a, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x66,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x66, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12,
	0x4b, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x61, 0x66, 0x52,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x06,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0xf7, 0x02, 0x0a, 0x12, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0x5c, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x56, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x52, 0x53,
	0x10, 0x02, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x17, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3a, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0x74, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41,
	0x0a, 0x1e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x21, 0x0a, 0x1f, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x73, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x61, 0x6c,
	0x63, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x46, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x78,
	0x0a, 0x29, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x31, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x19,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x22, 0x43, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x61, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x16, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x78, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x44, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6a, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x32, 0x90, 0x17, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x34, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f,
	0x7b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x7d, 0x2f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0xa9, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x3d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0xca, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x3d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x2d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0xba, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x39, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0xba,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3b, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2f, 0x7b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x7d, 0x12, 0xeb, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x47, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x7d, 0x12, 0x94, 0x02, 0x0a, 0x29, 0x47, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x4f, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f,
	0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2d, 0x62, 0x79, 0x2d, 0x72, 0x6f, 0x6f, 0x74, 0x2f, 0x7b, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x7d,
	0x12, 0xad, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x38, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0xcc, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x39, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0xd9, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x12,
	0x3a, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3f, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0xeb, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46,
	0x6f, 0x72, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0xd6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x7d, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x95, 0x02, 0x0a, 0x21, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x42, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79,
	0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x45, 0x53, 0x52, 0xaa, 0x02, 0x1d, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x1d, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x29, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x20, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x53, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x3a, 0x3a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eigenlayer_sidecar_v1_rewards_proto_rawDescOnce sync.Once
	file_eigenlayer_sidecar_v1_rewards_proto_rawDescData = file_eigenlayer_sidecar_v1_rewards_proto_rawDesc
)

func file_eigenlayer_sidecar_v1_rewards_proto_rawDescGZIP() []byte {
	file_eigenlayer_sidecar_v1_rewards_proto_rawDescOnce.Do(func() {
		file_eigenlayer_sidecar_v1_rewards_proto_rawDescData = protoimpl.X.CompressGZIP(file_eigenlayer_sidecar_v1_rewards_proto_rawDescData)
	})
	return file_eigenlayer_sidecar_v1_rewards_proto_rawDescData
}

var file_eigenlayer_sidecar_v1_rewards_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eigenlayer_sidecar_v1_rewards_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_eigenlayer_sidecar_v1_rewards_proto_goTypes = []any{
	(AttributableRewardRewardType)(0),                         // 0: eigenlayer.sidecar.rewards.v1.AttributableReward.reward_type
	(*EarnerLeaf)(nil),                                        // 1: eigenlayer.sidecar.rewards.v1.EarnerLeaf
	(*TokenLeaf)(nil),                                         // 2: eigenlayer.sidecar.rewards.v1.TokenLeaf
	(*Proof)(nil),                                             // 3: eigenlayer.sidecar.rewards.v1.Proof
	(*Reward)(nil),                                            // 4: eigenlayer.sidecar.rewards.v1.Reward
	(*AttributableReward)(nil),                                // 5: eigenlayer.sidecar.rewards.v1.AttributableReward
	(*DistributionRoot)(nil),                                  // 6: eigenlayer.sidecar.rewards.v1.DistributionRoot
	(*GetRewardsRootRequest)(nil),                             // 7: eigenlayer.sidecar.rewards.v1.GetRewardsRootRequest
	(*GetRewardsRootResponse)(nil),                            // 8: eigenlayer.sidecar.rewards.v1.GetRewardsRootResponse
	(*GenerateRewardsRequest)(nil),                            // 9: eigenlayer.sidecar.rewards.v1.GenerateRewardsRequest
	(*GenerateRewardsResponse)(nil),                           // 10: eigenlayer.sidecar.rewards.v1.GenerateRewardsResponse
	(*GenerateStakerOperatorsRequest)(nil),                    // 11: eigenlayer.sidecar.rewards.v1.GenerateStakerOperatorsRequest
	(*GenerateStakerOperatorsResponse)(nil),                   // 12: eigenlayer.sidecar.rewards.v1.GenerateStakerOperatorsResponse
	(*BackfillStakerOperatorsRequest)(nil),                    // 13: eigenlayer.sidecar.rewards.v1.BackfillStakerOperatorsRequest
	(*BackfillStakerOperatorsResponse)(nil),                   // 14: eigenlayer.sidecar.rewards.v1.BackfillStakerOperatorsResponse
	(*GenerateRewardsRootRequest)(nil),                        // 15: eigenlayer.sidecar.rewards.v1.GenerateRewardsRootRequest
	(*GenerateRewardsRootResponse)(nil),                       // 16: eigenlayer.sidecar.rewards.v1.GenerateRewardsRootResponse
	(*GetRewardsForSnapshotRequest)(nil),                      // 17: eigenlayer.sidecar.rewards.v1.GetRewardsForSnapshotRequest
	(*GetRewardsForSnapshotResponse)(nil),                     // 18: eigenlayer.sidecar.rewards.v1.GetRewardsForSnapshotResponse
	(*GetAttributableRewardsForSnapshotRequest)(nil),          // 19: eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForSnapshotRequest
	(*GetAttributableRewardsForSnapshotResponse)(nil),         // 20: eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForSnapshotResponse
	(*GetAttributableRewardsForDistributionRootRequest)(nil),  // 21: eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForDistributionRootRequest
	(*GetAttributableRewardsForDistributionRootResponse)(nil), // 22: eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForDistributionRootResponse
	(*GenerateClaimProofRequest)(nil),                         // 23: eigenlayer.sidecar.rewards.v1.GenerateClaimProofRequest
	(*GenerateClaimProofResponse)(nil),                        // 24: eigenlayer.sidecar.rewards.v1.GenerateClaimProofResponse
	(*GetAvailableRewardsRequest)(nil),                        // 25: eigenlayer.sidecar.rewards.v1.GetAvailableRewardsRequest
	(*GetAvailableRewardsResponse)(nil),                       // 26: eigenlayer.sidecar.rewards.v1.GetAvailableRewardsResponse
	(*GetTotalClaimedRewardsRequest)(nil),                     // 27: eigenlayer.sidecar.rewards.v1.GetTotalClaimedRewardsRequest
	(*GetTotalClaimedRewardsResponse)(nil),                    // 28: eigenlayer.sidecar.rewards.v1.GetTotalClaimedRewardsResponse
	(*GetAvailableRewardsTokensRequest)(nil),                  // 29: eigenlayer.sidecar.rewards.v1.GetAvailableRewardsTokensRequest
	(*GetAvailableRewardsTokensResponse)(nil),                 // 30: eigenlayer.sidecar.rewards.v1.GetAvailableRewardsTokensResponse
	(*SummarizedEarnerReward)(nil),                            // 31: eigenlayer.sidecar.rewards.v1.SummarizedEarnerReward
	(*GetSummarizedRewardsForEarnerRequest)(nil),              // 32: eigenlayer.sidecar.rewards.v1.GetSummarizedRewardsForEarnerRequest
	(*GetSummarizedRewardsForEarnerResponse)(nil),             // 33: eigenlayer.sidecar.rewards.v1.GetSummarizedRewardsForEarnerResponse
	(*ClaimedReward)(nil),                                     // 34: eigenlayer.sidecar.rewards.v1.ClaimedReward
	(*GetClaimedRewardsByBlockRequest)(nil),                   // 35: eigenlayer.sidecar.rewards.v1.GetClaimedRewardsByBlockRequest
	(*GetClaimedRewardsByBlockResponse)(nil),                  // 36: eigenlayer.sidecar.rewards.v1.GetClaimedRewardsByBlockResponse
}
var file_eigenlayer_sidecar_v1_rewards_proto_depIdxs = []int32{
	1,  // 0: eigenlayer.sidecar.rewards.v1.Proof.earner_leaf:type_name -> eigenlayer.sidecar.rewards.v1.EarnerLeaf
	2,  // 1: eigenlayer.sidecar.rewards.v1.Proof.token_leaves:type_name -> eigenlayer.sidecar.rewards.v1.TokenLeaf
	6,  // 2: eigenlayer.sidecar.rewards.v1.GetRewardsRootResponse.rewards_root:type_name -> eigenlayer.sidecar.rewards.v1.DistributionRoot
	4,  // 3: eigenlayer.sidecar.rewards.v1.GenerateRewardsResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.Reward
	4,  // 4: eigenlayer.sidecar.rewards.v1.GetRewardsForSnapshotResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.Reward
	5,  // 5: eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForSnapshotResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.AttributableReward
	5,  // 6: eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForDistributionRootResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.AttributableReward
	3,  // 7: eigenlayer.sidecar.rewards.v1.GenerateClaimProofResponse.proof:type_name -> eigenlayer.sidecar.rewards.v1.Proof
	4,  // 8: eigenlayer.sidecar.rewards.v1.GetAvailableRewardsResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.Reward
	4,  // 9: eigenlayer.sidecar.rewards.v1.GetTotalClaimedRewardsResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.Reward
	31, // 10: eigenlayer.sidecar.rewards.v1.GetSummarizedRewardsForEarnerResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.SummarizedEarnerReward
	34, // 11: eigenlayer.sidecar.rewards.v1.GetClaimedRewardsByBlockResponse.rewards:type_name -> eigenlayer.sidecar.rewards.v1.ClaimedReward
	7,  // 12: eigenlayer.sidecar.rewards.v1.Rewards.GetRewardsRoot:input_type -> eigenlayer.sidecar.rewards.v1.GetRewardsRootRequest
	9,  // 13: eigenlayer.sidecar.rewards.v1.Rewards.GenerateRewards:input_type -> eigenlayer.sidecar.rewards.v1.GenerateRewardsRequest
	11, // 14: eigenlayer.sidecar.rewards.v1.Rewards.GenerateStakerOperators:input_type -> eigenlayer.sidecar.rewards.v1.GenerateStakerOperatorsRequest
	13, // 15: eigenlayer.sidecar.rewards.v1.Rewards.BackfillStakerOperators:input_type -> eigenlayer.sidecar.rewards.v1.BackfillStakerOperatorsRequest
	15, // 16: eigenlayer.sidecar.rewards.v1.Rewards.GenerateRewardsRoot:input_type -> eigenlayer.sidecar.rewards.v1.GenerateRewardsRootRequest
	17, // 17: eigenlayer.sidecar.rewards.v1.Rewards.GetRewardsForSnapshot:input_type -> eigenlayer.sidecar.rewards.v1.GetRewardsForSnapshotRequest
	19, // 18: eigenlayer.sidecar.rewards.v1.Rewards.GetAttributableRewardsForSnapshot:input_type -> eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForSnapshotRequest
	21, // 19: eigenlayer.sidecar.rewards.v1.Rewards.GetAttributableRewardsForDistributionRoot:input_type -> eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForDistributionRootRequest
	23, // 20: eigenlayer.sidecar.rewards.v1.Rewards.GenerateClaimProof:input_type -> eigenlayer.sidecar.rewards.v1.GenerateClaimProofRequest
	25, // 21: eigenlayer.sidecar.rewards.v1.Rewards.GetAvailableRewards:input_type -> eigenlayer.sidecar.rewards.v1.GetAvailableRewardsRequest
	27, // 22: eigenlayer.sidecar.rewards.v1.Rewards.GetTotalClaimedRewards:input_type -> eigenlayer.sidecar.rewards.v1.GetTotalClaimedRewardsRequest
	29, // 23: eigenlayer.sidecar.rewards.v1.Rewards.GetAvailableRewardsTokens:input_type -> eigenlayer.sidecar.rewards.v1.GetAvailableRewardsTokensRequest
	32, // 24: eigenlayer.sidecar.rewards.v1.Rewards.GetSummarizedRewardsForEarner:input_type -> eigenlayer.sidecar.rewards.v1.GetSummarizedRewardsForEarnerRequest
	35, // 25: eigenlayer.sidecar.rewards.v1.Rewards.GetClaimedRewardsByBlock:input_type -> eigenlayer.sidecar.rewards.v1.GetClaimedRewardsByBlockRequest
	8,  // 26: eigenlayer.sidecar.rewards.v1.Rewards.GetRewardsRoot:output_type -> eigenlayer.sidecar.rewards.v1.GetRewardsRootResponse
	10, // 27: eigenlayer.sidecar.rewards.v1.Rewards.GenerateRewards:output_type -> eigenlayer.sidecar.rewards.v1.GenerateRewardsResponse
	12, // 28: eigenlayer.sidecar.rewards.v1.Rewards.GenerateStakerOperators:output_type -> eigenlayer.sidecar.rewards.v1.GenerateStakerOperatorsResponse
	14, // 29: eigenlayer.sidecar.rewards.v1.Rewards.BackfillStakerOperators:output_type -> eigenlayer.sidecar.rewards.v1.BackfillStakerOperatorsResponse
	16, // 30: eigenlayer.sidecar.rewards.v1.Rewards.GenerateRewardsRoot:output_type -> eigenlayer.sidecar.rewards.v1.GenerateRewardsRootResponse
	18, // 31: eigenlayer.sidecar.rewards.v1.Rewards.GetRewardsForSnapshot:output_type -> eigenlayer.sidecar.rewards.v1.GetRewardsForSnapshotResponse
	20, // 32: eigenlayer.sidecar.rewards.v1.Rewards.GetAttributableRewardsForSnapshot:output_type -> eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForSnapshotResponse
	22, // 33: eigenlayer.sidecar.rewards.v1.Rewards.GetAttributableRewardsForDistributionRoot:output_type -> eigenlayer.sidecar.rewards.v1.GetAttributableRewardsForDistributionRootResponse
	24, // 34: eigenlayer.sidecar.rewards.v1.Rewards.GenerateClaimProof:output_type -> eigenlayer.sidecar.rewards.v1.GenerateClaimProofResponse
	26, // 35: eigenlayer.sidecar.rewards.v1.Rewards.GetAvailableRewards:output_type -> eigenlayer.sidecar.rewards.v1.GetAvailableRewardsResponse
	28, // 36: eigenlayer.sidecar.rewards.v1.Rewards.GetTotalClaimedRewards:output_type -> eigenlayer.sidecar.rewards.v1.GetTotalClaimedRewardsResponse
	30, // 37: eigenlayer.sidecar.rewards.v1.Rewards.GetAvailableRewardsTokens:output_type -> eigenlayer.sidecar.rewards.v1.GetAvailableRewardsTokensResponse
	33, // 38: eigenlayer.sidecar.rewards.v1.Rewards.GetSummarizedRewardsForEarner:output_type -> eigenlayer.sidecar.rewards.v1.GetSummarizedRewardsForEarnerResponse
	36, // 39: eigenlayer.sidecar.rewards.v1.Rewards.GetClaimedRewardsByBlock:output_type -> eigenlayer.sidecar.rewards.v1.GetClaimedRewardsByBlockResponse
	26, // [26:40] is the sub-list for method output_type
	12, // [12:26] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_eigenlayer_sidecar_v1_rewards_proto_init() }
func file_eigenlayer_sidecar_v1_rewards_proto_init() {
	if File_eigenlayer_sidecar_v1_rewards_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EarnerLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TokenLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AttributableReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DistributionRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardsRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardsRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateStakerOperatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateStakerOperatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*BackfillStakerOperatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*BackfillStakerOperatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateRewardsRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateRewardsRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardsForSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardsForSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetAttributableRewardsForSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetAttributableRewardsForSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetAttributableRewardsForDistributionRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetAttributableRewardsForDistributionRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateClaimProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateClaimProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetTotalClaimedRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetTotalClaimedRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableRewardsTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableRewardsTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SummarizedEarnerReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetSummarizedRewardsForEarnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetSummarizedRewardsForEarnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ClaimedReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetClaimedRewardsByBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetClaimedRewardsByBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[9].OneofWrappers = []any{}
	file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[26].OneofWrappers = []any{}
	file_eigenlayer_sidecar_v1_rewards_proto_msgTypes[31].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eigenlayer_sidecar_v1_rewards_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eigenlayer_sidecar_v1_rewards_proto_goTypes,
		DependencyIndexes: file_eigenlayer_sidecar_v1_rewards_proto_depIdxs,
		EnumInfos:         file_eigenlayer_sidecar_v1_rewards_proto_enumTypes,
		MessageInfos:      file_eigenlayer_sidecar_v1_rewards_proto_msgTypes,
	}.Build()
	File_eigenlayer_sidecar_v1_rewards_proto = out.File
	file_eigenlayer_sidecar_v1_rewards_proto_rawDesc = nil
	file_eigenlayer_sidecar_v1_rewards_proto_goTypes = nil
	file_eigenlayer_sidecar_v1_rewards_proto_depIdxs = nil
}
