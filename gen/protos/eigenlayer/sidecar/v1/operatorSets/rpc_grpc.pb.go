// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/sidecar/v1/operatorSets/rpc.proto

package operatorSets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OperatorSets_ListOperatorsForStaker_FullMethodName     = "/eigenlayer.sidecar.v1.operatorSets.OperatorSets/ListOperatorsForStaker"
	OperatorSets_ListOperatorsForStrategy_FullMethodName   = "/eigenlayer.sidecar.v1.operatorSets.OperatorSets/ListOperatorsForStrategy"
	OperatorSets_ListOperatorsForAvs_FullMethodName        = "/eigenlayer.sidecar.v1.operatorSets.OperatorSets/ListOperatorsForAvs"
	OperatorSets_ListOperatorsForBlockRange_FullMethodName = "/eigenlayer.sidecar.v1.operatorSets.OperatorSets/ListOperatorsForBlockRange"
	OperatorSets_ListOperatorSets_FullMethodName           = "/eigenlayer.sidecar.v1.operatorSets.OperatorSets/ListOperatorSets"
)

// OperatorSetsClient is the client API for OperatorSets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorSetsClient interface {
	ListOperatorsForStaker(ctx context.Context, in *ListOperatorsForStakerRequest, opts ...grpc.CallOption) (*ListOperatorsForStakerResponse, error)
	ListOperatorsForStrategy(ctx context.Context, in *ListOperatorsForStrategyRequest, opts ...grpc.CallOption) (*ListOperatorsForStrategyResponse, error)
	ListOperatorsForAvs(ctx context.Context, in *ListOperatorsForAvsRequest, opts ...grpc.CallOption) (*ListOperatorsForAvsResponse, error)
	ListOperatorsForBlockRange(ctx context.Context, in *ListOperatorsForBlockRangeRequest, opts ...grpc.CallOption) (*ListOperatorsForBlockRangeResponse, error)
	ListOperatorSets(ctx context.Context, in *ListOperatorSetsRequest, opts ...grpc.CallOption) (*ListOperatorSetsResponse, error)
}

type operatorSetsClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorSetsClient(cc grpc.ClientConnInterface) OperatorSetsClient {
	return &operatorSetsClient{cc}
}

func (c *operatorSetsClient) ListOperatorsForStaker(ctx context.Context, in *ListOperatorsForStakerRequest, opts ...grpc.CallOption) (*ListOperatorsForStakerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorsForStakerResponse)
	err := c.cc.Invoke(ctx, OperatorSets_ListOperatorsForStaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorSetsClient) ListOperatorsForStrategy(ctx context.Context, in *ListOperatorsForStrategyRequest, opts ...grpc.CallOption) (*ListOperatorsForStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorsForStrategyResponse)
	err := c.cc.Invoke(ctx, OperatorSets_ListOperatorsForStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorSetsClient) ListOperatorsForAvs(ctx context.Context, in *ListOperatorsForAvsRequest, opts ...grpc.CallOption) (*ListOperatorsForAvsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorsForAvsResponse)
	err := c.cc.Invoke(ctx, OperatorSets_ListOperatorsForAvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorSetsClient) ListOperatorsForBlockRange(ctx context.Context, in *ListOperatorsForBlockRangeRequest, opts ...grpc.CallOption) (*ListOperatorsForBlockRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorsForBlockRangeResponse)
	err := c.cc.Invoke(ctx, OperatorSets_ListOperatorsForBlockRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorSetsClient) ListOperatorSets(ctx context.Context, in *ListOperatorSetsRequest, opts ...grpc.CallOption) (*ListOperatorSetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorSetsResponse)
	err := c.cc.Invoke(ctx, OperatorSets_ListOperatorSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorSetsServer is the server API for OperatorSets service.
// All implementations should embed UnimplementedOperatorSetsServer
// for forward compatibility.
type OperatorSetsServer interface {
	ListOperatorsForStaker(context.Context, *ListOperatorsForStakerRequest) (*ListOperatorsForStakerResponse, error)
	ListOperatorsForStrategy(context.Context, *ListOperatorsForStrategyRequest) (*ListOperatorsForStrategyResponse, error)
	ListOperatorsForAvs(context.Context, *ListOperatorsForAvsRequest) (*ListOperatorsForAvsResponse, error)
	ListOperatorsForBlockRange(context.Context, *ListOperatorsForBlockRangeRequest) (*ListOperatorsForBlockRangeResponse, error)
	ListOperatorSets(context.Context, *ListOperatorSetsRequest) (*ListOperatorSetsResponse, error)
}

// UnimplementedOperatorSetsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperatorSetsServer struct{}

func (UnimplementedOperatorSetsServer) ListOperatorsForStaker(context.Context, *ListOperatorsForStakerRequest) (*ListOperatorsForStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorsForStaker not implemented")
}
func (UnimplementedOperatorSetsServer) ListOperatorsForStrategy(context.Context, *ListOperatorsForStrategyRequest) (*ListOperatorsForStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorsForStrategy not implemented")
}
func (UnimplementedOperatorSetsServer) ListOperatorsForAvs(context.Context, *ListOperatorsForAvsRequest) (*ListOperatorsForAvsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorsForAvs not implemented")
}
func (UnimplementedOperatorSetsServer) ListOperatorsForBlockRange(context.Context, *ListOperatorsForBlockRangeRequest) (*ListOperatorsForBlockRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorsForBlockRange not implemented")
}
func (UnimplementedOperatorSetsServer) ListOperatorSets(context.Context, *ListOperatorSetsRequest) (*ListOperatorSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorSets not implemented")
}
func (UnimplementedOperatorSetsServer) testEmbeddedByValue() {}

// UnsafeOperatorSetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorSetsServer will
// result in compilation errors.
type UnsafeOperatorSetsServer interface {
	mustEmbedUnimplementedOperatorSetsServer()
}

func RegisterOperatorSetsServer(s grpc.ServiceRegistrar, srv OperatorSetsServer) {
	// If the following call pancis, it indicates UnimplementedOperatorSetsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperatorSets_ServiceDesc, srv)
}

func _OperatorSets_ListOperatorsForStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsForStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSetsServer).ListOperatorsForStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorSets_ListOperatorsForStaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSetsServer).ListOperatorsForStaker(ctx, req.(*ListOperatorsForStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorSets_ListOperatorsForStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsForStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSetsServer).ListOperatorsForStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorSets_ListOperatorsForStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSetsServer).ListOperatorsForStrategy(ctx, req.(*ListOperatorsForStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorSets_ListOperatorsForAvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsForAvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSetsServer).ListOperatorsForAvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorSets_ListOperatorsForAvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSetsServer).ListOperatorsForAvs(ctx, req.(*ListOperatorsForAvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorSets_ListOperatorsForBlockRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorsForBlockRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSetsServer).ListOperatorsForBlockRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorSets_ListOperatorsForBlockRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSetsServer).ListOperatorsForBlockRange(ctx, req.(*ListOperatorsForBlockRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorSets_ListOperatorSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorSetsServer).ListOperatorSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorSets_ListOperatorSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorSetsServer).ListOperatorSets(ctx, req.(*ListOperatorSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorSets_ServiceDesc is the grpc.ServiceDesc for OperatorSets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorSets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.sidecar.v1.operatorSets.OperatorSets",
	HandlerType: (*OperatorSetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOperatorsForStaker",
			Handler:    _OperatorSets_ListOperatorsForStaker_Handler,
		},
		{
			MethodName: "ListOperatorsForStrategy",
			Handler:    _OperatorSets_ListOperatorsForStrategy_Handler,
		},
		{
			MethodName: "ListOperatorsForAvs",
			Handler:    _OperatorSets_ListOperatorsForAvs_Handler,
		},
		{
			MethodName: "ListOperatorsForBlockRange",
			Handler:    _OperatorSets_ListOperatorsForBlockRange_Handler,
		},
		{
			MethodName: "ListOperatorSets",
			Handler:    _OperatorSets_ListOperatorSets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/sidecar/v1/operatorSets/rpc.proto",
}
