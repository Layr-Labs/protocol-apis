// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/sidecar/v1/slashing/rpc.proto

package slashing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Slashing_ListStakerSlashingHistory_FullMethodName         = "/eigenlayer.sidecar.v1.slashing.Slashing/ListStakerSlashingHistory"
	Slashing_ListOperatorSlashingHistory_FullMethodName       = "/eigenlayer.sidecar.v1.slashing.Slashing/ListOperatorSlashingHistory"
	Slashing_ListAvsSlashingHistory_FullMethodName            = "/eigenlayer.sidecar.v1.slashing.Slashing/ListAvsSlashingHistory"
	Slashing_ListAvsOperatorSetSlashingHistory_FullMethodName = "/eigenlayer.sidecar.v1.slashing.Slashing/ListAvsOperatorSetSlashingHistory"
)

// SlashingClient is the client API for Slashing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlashingClient interface {
	ListStakerSlashingHistory(ctx context.Context, in *ListStakerSlashingHistoryRequest, opts ...grpc.CallOption) (*ListStakerSlashingHistoryResponse, error)
	ListOperatorSlashingHistory(ctx context.Context, in *ListOperatorSlashingHistoryRequest, opts ...grpc.CallOption) (*ListOperatorSlashingHistoryResponse, error)
	ListAvsSlashingHistory(ctx context.Context, in *ListAvsSlashingHistoryRequest, opts ...grpc.CallOption) (*ListAvsSlashingHistoryResponse, error)
	ListAvsOperatorSetSlashingHistory(ctx context.Context, in *ListAvsOperatorSetSlashingHistoryRequest, opts ...grpc.CallOption) (*ListAvsOperatorSetSlashingHistoryResponse, error)
}

type slashingClient struct {
	cc grpc.ClientConnInterface
}

func NewSlashingClient(cc grpc.ClientConnInterface) SlashingClient {
	return &slashingClient{cc}
}

func (c *slashingClient) ListStakerSlashingHistory(ctx context.Context, in *ListStakerSlashingHistoryRequest, opts ...grpc.CallOption) (*ListStakerSlashingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStakerSlashingHistoryResponse)
	err := c.cc.Invoke(ctx, Slashing_ListStakerSlashingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slashingClient) ListOperatorSlashingHistory(ctx context.Context, in *ListOperatorSlashingHistoryRequest, opts ...grpc.CallOption) (*ListOperatorSlashingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorSlashingHistoryResponse)
	err := c.cc.Invoke(ctx, Slashing_ListOperatorSlashingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slashingClient) ListAvsSlashingHistory(ctx context.Context, in *ListAvsSlashingHistoryRequest, opts ...grpc.CallOption) (*ListAvsSlashingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvsSlashingHistoryResponse)
	err := c.cc.Invoke(ctx, Slashing_ListAvsSlashingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slashingClient) ListAvsOperatorSetSlashingHistory(ctx context.Context, in *ListAvsOperatorSetSlashingHistoryRequest, opts ...grpc.CallOption) (*ListAvsOperatorSetSlashingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvsOperatorSetSlashingHistoryResponse)
	err := c.cc.Invoke(ctx, Slashing_ListAvsOperatorSetSlashingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlashingServer is the server API for Slashing service.
// All implementations should embed UnimplementedSlashingServer
// for forward compatibility.
type SlashingServer interface {
	ListStakerSlashingHistory(context.Context, *ListStakerSlashingHistoryRequest) (*ListStakerSlashingHistoryResponse, error)
	ListOperatorSlashingHistory(context.Context, *ListOperatorSlashingHistoryRequest) (*ListOperatorSlashingHistoryResponse, error)
	ListAvsSlashingHistory(context.Context, *ListAvsSlashingHistoryRequest) (*ListAvsSlashingHistoryResponse, error)
	ListAvsOperatorSetSlashingHistory(context.Context, *ListAvsOperatorSetSlashingHistoryRequest) (*ListAvsOperatorSetSlashingHistoryResponse, error)
}

// UnimplementedSlashingServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSlashingServer struct{}

func (UnimplementedSlashingServer) ListStakerSlashingHistory(context.Context, *ListStakerSlashingHistoryRequest) (*ListStakerSlashingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStakerSlashingHistory not implemented")
}
func (UnimplementedSlashingServer) ListOperatorSlashingHistory(context.Context, *ListOperatorSlashingHistoryRequest) (*ListOperatorSlashingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorSlashingHistory not implemented")
}
func (UnimplementedSlashingServer) ListAvsSlashingHistory(context.Context, *ListAvsSlashingHistoryRequest) (*ListAvsSlashingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvsSlashingHistory not implemented")
}
func (UnimplementedSlashingServer) ListAvsOperatorSetSlashingHistory(context.Context, *ListAvsOperatorSetSlashingHistoryRequest) (*ListAvsOperatorSetSlashingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvsOperatorSetSlashingHistory not implemented")
}
func (UnimplementedSlashingServer) testEmbeddedByValue() {}

// UnsafeSlashingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlashingServer will
// result in compilation errors.
type UnsafeSlashingServer interface {
	mustEmbedUnimplementedSlashingServer()
}

func RegisterSlashingServer(s grpc.ServiceRegistrar, srv SlashingServer) {
	// If the following call pancis, it indicates UnimplementedSlashingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Slashing_ServiceDesc, srv)
}

func _Slashing_ListStakerSlashingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStakerSlashingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlashingServer).ListStakerSlashingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slashing_ListStakerSlashingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlashingServer).ListStakerSlashingHistory(ctx, req.(*ListStakerSlashingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slashing_ListOperatorSlashingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorSlashingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlashingServer).ListOperatorSlashingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slashing_ListOperatorSlashingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlashingServer).ListOperatorSlashingHistory(ctx, req.(*ListOperatorSlashingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slashing_ListAvsSlashingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvsSlashingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlashingServer).ListAvsSlashingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slashing_ListAvsSlashingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlashingServer).ListAvsSlashingHistory(ctx, req.(*ListAvsSlashingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slashing_ListAvsOperatorSetSlashingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvsOperatorSetSlashingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlashingServer).ListAvsOperatorSetSlashingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Slashing_ListAvsOperatorSetSlashingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlashingServer).ListAvsOperatorSetSlashingHistory(ctx, req.(*ListAvsOperatorSetSlashingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Slashing_ServiceDesc is the grpc.ServiceDesc for Slashing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Slashing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.sidecar.v1.slashing.Slashing",
	HandlerType: (*SlashingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStakerSlashingHistory",
			Handler:    _Slashing_ListStakerSlashingHistory_Handler,
		},
		{
			MethodName: "ListOperatorSlashingHistory",
			Handler:    _Slashing_ListOperatorSlashingHistory_Handler,
		},
		{
			MethodName: "ListAvsSlashingHistory",
			Handler:    _Slashing_ListAvsSlashingHistory_Handler,
		},
		{
			MethodName: "ListAvsOperatorSetSlashingHistory",
			Handler:    _Slashing_ListAvsOperatorSetSlashingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/sidecar/v1/slashing/rpc.proto",
}
