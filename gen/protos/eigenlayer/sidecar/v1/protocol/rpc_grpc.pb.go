// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/sidecar/v1/protocol/rpc.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Protocol_GetRegisteredAvsForOperator_FullMethodName           = "/eigenlayer.sidecar.v1.protocol.Protocol/GetRegisteredAvsForOperator"
	Protocol_GetDelegatedStrategiesForOperator_FullMethodName     = "/eigenlayer.sidecar.v1.protocol.Protocol/GetDelegatedStrategiesForOperator"
	Protocol_GetOperatorDelegatedStakeForStrategy_FullMethodName  = "/eigenlayer.sidecar.v1.protocol.Protocol/GetOperatorDelegatedStakeForStrategy"
	Protocol_GetDelegatedStakersForOperator_FullMethodName        = "/eigenlayer.sidecar.v1.protocol.Protocol/GetDelegatedStakersForOperator"
	Protocol_GetStakerShares_FullMethodName                       = "/eigenlayer.sidecar.v1.protocol.Protocol/GetStakerShares"
	Protocol_GetEigenStateChanges_FullMethodName                  = "/eigenlayer.sidecar.v1.protocol.Protocol/GetEigenStateChanges"
	Protocol_ListStrategies_FullMethodName                        = "/eigenlayer.sidecar.v1.protocol.Protocol/ListStrategies"
	Protocol_ListStakerStrategies_FullMethodName                  = "/eigenlayer.sidecar.v1.protocol.Protocol/ListStakerStrategies"
	Protocol_GetStrategyForStaker_FullMethodName                  = "/eigenlayer.sidecar.v1.protocol.Protocol/GetStrategyForStaker"
	Protocol_ListStakerQueuedWithdrawals_FullMethodName           = "/eigenlayer.sidecar.v1.protocol.Protocol/ListStakerQueuedWithdrawals"
	Protocol_ListStrategyQueuedWithdrawals_FullMethodName         = "/eigenlayer.sidecar.v1.protocol.Protocol/ListStrategyQueuedWithdrawals"
	Protocol_ListOperatorQueuedWithdrawals_FullMethodName         = "/eigenlayer.sidecar.v1.protocol.Protocol/ListOperatorQueuedWithdrawals"
	Protocol_ListOperatorStrategyQueuedWithdrawals_FullMethodName = "/eigenlayer.sidecar.v1.protocol.Protocol/ListOperatorStrategyQueuedWithdrawals"
)

// ProtocolClient is the client API for Protocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolClient interface {
	// GetRegisteredAvsForOperator returns the list of registered AVs for a given operator
	// BlockHeight is optional, otherwise latest is used.
	GetRegisteredAvsForOperator(ctx context.Context, in *GetRegisteredAvsForOperatorRequest, opts ...grpc.CallOption) (*GetRegisteredAvsForOperatorResponse, error)
	// GetDelegatedStrategiesForOperator returns strategies an Operator has delegated
	GetDelegatedStrategiesForOperator(ctx context.Context, in *GetDelegatedStrategiesForOperatorRequest, opts ...grpc.CallOption) (*GetDelegatedStrategiesForOperatorResponse, error)
	// GetOperatorDelegatedStakeForStrategy returns the amount of delegated stake for a given strategy for an operator
	GetOperatorDelegatedStakeForStrategy(ctx context.Context, in *GetOperatorDelegatedStakeForStrategyRequest, opts ...grpc.CallOption) (*GetOperatorDelegatedStakeForStrategyResponse, error)
	// GetDelegatedStakersForOperator returns the list of stakers that have delegated to an operator.
	// BlockHeight is optional, otherwise latest is used.
	GetDelegatedStakersForOperator(ctx context.Context, in *GetDelegatedStakersForOperatorRequest, opts ...grpc.CallOption) (*GetDelegatedStakersForOperatorResponse, error)
	// GetStakerShares returns the shares of a staker, and optionally, the operator operator they've delegated to and
	// the AVS the operator has registered with.
	GetStakerShares(ctx context.Context, in *GetStakerSharesRequest, opts ...grpc.CallOption) (*GetStakerSharesResponse, error)
	GetEigenStateChanges(ctx context.Context, in *GetEigenStateChangesRequest, opts ...grpc.CallOption) (*GetEigenStateChangesResponse, error)
	ListStrategies(ctx context.Context, in *ListStrategiesRequest, opts ...grpc.CallOption) (*ListStrategiesResponse, error)
	ListStakerStrategies(ctx context.Context, in *ListStakerStrategiesRequest, opts ...grpc.CallOption) (*ListStakerStrategiesResponse, error)
	GetStrategyForStaker(ctx context.Context, in *GetStrategyForStakerRequest, opts ...grpc.CallOption) (*GetStrategyForStakerResponse, error)
	ListStakerQueuedWithdrawals(ctx context.Context, in *ListStakerQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListStakerQueuedWithdrawalsResponse, error)
	ListStrategyQueuedWithdrawals(ctx context.Context, in *ListStrategyQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListStrategyQueuedWithdrawalsResponse, error)
	ListOperatorQueuedWithdrawals(ctx context.Context, in *ListOperatorQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListOperatorQueuedWithdrawalsResponse, error)
	ListOperatorStrategyQueuedWithdrawals(ctx context.Context, in *ListOperatorStrategyQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListOperatorStrategyQueuedWithdrawalsResponse, error)
}

type protocolClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolClient(cc grpc.ClientConnInterface) ProtocolClient {
	return &protocolClient{cc}
}

func (c *protocolClient) GetRegisteredAvsForOperator(ctx context.Context, in *GetRegisteredAvsForOperatorRequest, opts ...grpc.CallOption) (*GetRegisteredAvsForOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegisteredAvsForOperatorResponse)
	err := c.cc.Invoke(ctx, Protocol_GetRegisteredAvsForOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) GetDelegatedStrategiesForOperator(ctx context.Context, in *GetDelegatedStrategiesForOperatorRequest, opts ...grpc.CallOption) (*GetDelegatedStrategiesForOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDelegatedStrategiesForOperatorResponse)
	err := c.cc.Invoke(ctx, Protocol_GetDelegatedStrategiesForOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) GetOperatorDelegatedStakeForStrategy(ctx context.Context, in *GetOperatorDelegatedStakeForStrategyRequest, opts ...grpc.CallOption) (*GetOperatorDelegatedStakeForStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorDelegatedStakeForStrategyResponse)
	err := c.cc.Invoke(ctx, Protocol_GetOperatorDelegatedStakeForStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) GetDelegatedStakersForOperator(ctx context.Context, in *GetDelegatedStakersForOperatorRequest, opts ...grpc.CallOption) (*GetDelegatedStakersForOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDelegatedStakersForOperatorResponse)
	err := c.cc.Invoke(ctx, Protocol_GetDelegatedStakersForOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) GetStakerShares(ctx context.Context, in *GetStakerSharesRequest, opts ...grpc.CallOption) (*GetStakerSharesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStakerSharesResponse)
	err := c.cc.Invoke(ctx, Protocol_GetStakerShares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) GetEigenStateChanges(ctx context.Context, in *GetEigenStateChangesRequest, opts ...grpc.CallOption) (*GetEigenStateChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEigenStateChangesResponse)
	err := c.cc.Invoke(ctx, Protocol_GetEigenStateChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) ListStrategies(ctx context.Context, in *ListStrategiesRequest, opts ...grpc.CallOption) (*ListStrategiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStrategiesResponse)
	err := c.cc.Invoke(ctx, Protocol_ListStrategies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) ListStakerStrategies(ctx context.Context, in *ListStakerStrategiesRequest, opts ...grpc.CallOption) (*ListStakerStrategiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStakerStrategiesResponse)
	err := c.cc.Invoke(ctx, Protocol_ListStakerStrategies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) GetStrategyForStaker(ctx context.Context, in *GetStrategyForStakerRequest, opts ...grpc.CallOption) (*GetStrategyForStakerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStrategyForStakerResponse)
	err := c.cc.Invoke(ctx, Protocol_GetStrategyForStaker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) ListStakerQueuedWithdrawals(ctx context.Context, in *ListStakerQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListStakerQueuedWithdrawalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStakerQueuedWithdrawalsResponse)
	err := c.cc.Invoke(ctx, Protocol_ListStakerQueuedWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) ListStrategyQueuedWithdrawals(ctx context.Context, in *ListStrategyQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListStrategyQueuedWithdrawalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStrategyQueuedWithdrawalsResponse)
	err := c.cc.Invoke(ctx, Protocol_ListStrategyQueuedWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) ListOperatorQueuedWithdrawals(ctx context.Context, in *ListOperatorQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListOperatorQueuedWithdrawalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorQueuedWithdrawalsResponse)
	err := c.cc.Invoke(ctx, Protocol_ListOperatorQueuedWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolClient) ListOperatorStrategyQueuedWithdrawals(ctx context.Context, in *ListOperatorStrategyQueuedWithdrawalsRequest, opts ...grpc.CallOption) (*ListOperatorStrategyQueuedWithdrawalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperatorStrategyQueuedWithdrawalsResponse)
	err := c.cc.Invoke(ctx, Protocol_ListOperatorStrategyQueuedWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolServer is the server API for Protocol service.
// All implementations should embed UnimplementedProtocolServer
// for forward compatibility.
type ProtocolServer interface {
	// GetRegisteredAvsForOperator returns the list of registered AVs for a given operator
	// BlockHeight is optional, otherwise latest is used.
	GetRegisteredAvsForOperator(context.Context, *GetRegisteredAvsForOperatorRequest) (*GetRegisteredAvsForOperatorResponse, error)
	// GetDelegatedStrategiesForOperator returns strategies an Operator has delegated
	GetDelegatedStrategiesForOperator(context.Context, *GetDelegatedStrategiesForOperatorRequest) (*GetDelegatedStrategiesForOperatorResponse, error)
	// GetOperatorDelegatedStakeForStrategy returns the amount of delegated stake for a given strategy for an operator
	GetOperatorDelegatedStakeForStrategy(context.Context, *GetOperatorDelegatedStakeForStrategyRequest) (*GetOperatorDelegatedStakeForStrategyResponse, error)
	// GetDelegatedStakersForOperator returns the list of stakers that have delegated to an operator.
	// BlockHeight is optional, otherwise latest is used.
	GetDelegatedStakersForOperator(context.Context, *GetDelegatedStakersForOperatorRequest) (*GetDelegatedStakersForOperatorResponse, error)
	// GetStakerShares returns the shares of a staker, and optionally, the operator operator they've delegated to and
	// the AVS the operator has registered with.
	GetStakerShares(context.Context, *GetStakerSharesRequest) (*GetStakerSharesResponse, error)
	GetEigenStateChanges(context.Context, *GetEigenStateChangesRequest) (*GetEigenStateChangesResponse, error)
	ListStrategies(context.Context, *ListStrategiesRequest) (*ListStrategiesResponse, error)
	ListStakerStrategies(context.Context, *ListStakerStrategiesRequest) (*ListStakerStrategiesResponse, error)
	GetStrategyForStaker(context.Context, *GetStrategyForStakerRequest) (*GetStrategyForStakerResponse, error)
	ListStakerQueuedWithdrawals(context.Context, *ListStakerQueuedWithdrawalsRequest) (*ListStakerQueuedWithdrawalsResponse, error)
	ListStrategyQueuedWithdrawals(context.Context, *ListStrategyQueuedWithdrawalsRequest) (*ListStrategyQueuedWithdrawalsResponse, error)
	ListOperatorQueuedWithdrawals(context.Context, *ListOperatorQueuedWithdrawalsRequest) (*ListOperatorQueuedWithdrawalsResponse, error)
	ListOperatorStrategyQueuedWithdrawals(context.Context, *ListOperatorStrategyQueuedWithdrawalsRequest) (*ListOperatorStrategyQueuedWithdrawalsResponse, error)
}

// UnimplementedProtocolServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProtocolServer struct{}

func (UnimplementedProtocolServer) GetRegisteredAvsForOperator(context.Context, *GetRegisteredAvsForOperatorRequest) (*GetRegisteredAvsForOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisteredAvsForOperator not implemented")
}
func (UnimplementedProtocolServer) GetDelegatedStrategiesForOperator(context.Context, *GetDelegatedStrategiesForOperatorRequest) (*GetDelegatedStrategiesForOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedStrategiesForOperator not implemented")
}
func (UnimplementedProtocolServer) GetOperatorDelegatedStakeForStrategy(context.Context, *GetOperatorDelegatedStakeForStrategyRequest) (*GetOperatorDelegatedStakeForStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorDelegatedStakeForStrategy not implemented")
}
func (UnimplementedProtocolServer) GetDelegatedStakersForOperator(context.Context, *GetDelegatedStakersForOperatorRequest) (*GetDelegatedStakersForOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedStakersForOperator not implemented")
}
func (UnimplementedProtocolServer) GetStakerShares(context.Context, *GetStakerSharesRequest) (*GetStakerSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakerShares not implemented")
}
func (UnimplementedProtocolServer) GetEigenStateChanges(context.Context, *GetEigenStateChangesRequest) (*GetEigenStateChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEigenStateChanges not implemented")
}
func (UnimplementedProtocolServer) ListStrategies(context.Context, *ListStrategiesRequest) (*ListStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategies not implemented")
}
func (UnimplementedProtocolServer) ListStakerStrategies(context.Context, *ListStakerStrategiesRequest) (*ListStakerStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStakerStrategies not implemented")
}
func (UnimplementedProtocolServer) GetStrategyForStaker(context.Context, *GetStrategyForStakerRequest) (*GetStrategyForStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategyForStaker not implemented")
}
func (UnimplementedProtocolServer) ListStakerQueuedWithdrawals(context.Context, *ListStakerQueuedWithdrawalsRequest) (*ListStakerQueuedWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStakerQueuedWithdrawals not implemented")
}
func (UnimplementedProtocolServer) ListStrategyQueuedWithdrawals(context.Context, *ListStrategyQueuedWithdrawalsRequest) (*ListStrategyQueuedWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStrategyQueuedWithdrawals not implemented")
}
func (UnimplementedProtocolServer) ListOperatorQueuedWithdrawals(context.Context, *ListOperatorQueuedWithdrawalsRequest) (*ListOperatorQueuedWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorQueuedWithdrawals not implemented")
}
func (UnimplementedProtocolServer) ListOperatorStrategyQueuedWithdrawals(context.Context, *ListOperatorStrategyQueuedWithdrawalsRequest) (*ListOperatorStrategyQueuedWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorStrategyQueuedWithdrawals not implemented")
}
func (UnimplementedProtocolServer) testEmbeddedByValue() {}

// UnsafeProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolServer will
// result in compilation errors.
type UnsafeProtocolServer interface {
	mustEmbedUnimplementedProtocolServer()
}

func RegisterProtocolServer(s grpc.ServiceRegistrar, srv ProtocolServer) {
	// If the following call pancis, it indicates UnimplementedProtocolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Protocol_ServiceDesc, srv)
}

func _Protocol_GetRegisteredAvsForOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegisteredAvsForOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).GetRegisteredAvsForOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_GetRegisteredAvsForOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).GetRegisteredAvsForOperator(ctx, req.(*GetRegisteredAvsForOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_GetDelegatedStrategiesForOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegatedStrategiesForOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).GetDelegatedStrategiesForOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_GetDelegatedStrategiesForOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).GetDelegatedStrategiesForOperator(ctx, req.(*GetDelegatedStrategiesForOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_GetOperatorDelegatedStakeForStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorDelegatedStakeForStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).GetOperatorDelegatedStakeForStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_GetOperatorDelegatedStakeForStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).GetOperatorDelegatedStakeForStrategy(ctx, req.(*GetOperatorDelegatedStakeForStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_GetDelegatedStakersForOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegatedStakersForOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).GetDelegatedStakersForOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_GetDelegatedStakersForOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).GetDelegatedStakersForOperator(ctx, req.(*GetDelegatedStakersForOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_GetStakerShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStakerSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).GetStakerShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_GetStakerShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).GetStakerShares(ctx, req.(*GetStakerSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_GetEigenStateChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEigenStateChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).GetEigenStateChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_GetEigenStateChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).GetEigenStateChanges(ctx, req.(*GetEigenStateChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_ListStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).ListStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_ListStrategies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).ListStrategies(ctx, req.(*ListStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_ListStakerStrategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStakerStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).ListStakerStrategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_ListStakerStrategies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).ListStakerStrategies(ctx, req.(*ListStakerStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_GetStrategyForStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStrategyForStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).GetStrategyForStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_GetStrategyForStaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).GetStrategyForStaker(ctx, req.(*GetStrategyForStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_ListStakerQueuedWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStakerQueuedWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).ListStakerQueuedWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_ListStakerQueuedWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).ListStakerQueuedWithdrawals(ctx, req.(*ListStakerQueuedWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_ListStrategyQueuedWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStrategyQueuedWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).ListStrategyQueuedWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_ListStrategyQueuedWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).ListStrategyQueuedWithdrawals(ctx, req.(*ListStrategyQueuedWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_ListOperatorQueuedWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorQueuedWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).ListOperatorQueuedWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_ListOperatorQueuedWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).ListOperatorQueuedWithdrawals(ctx, req.(*ListOperatorQueuedWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Protocol_ListOperatorStrategyQueuedWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorStrategyQueuedWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolServer).ListOperatorStrategyQueuedWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Protocol_ListOperatorStrategyQueuedWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolServer).ListOperatorStrategyQueuedWithdrawals(ctx, req.(*ListOperatorStrategyQueuedWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Protocol_ServiceDesc is the grpc.ServiceDesc for Protocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Protocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.sidecar.v1.protocol.Protocol",
	HandlerType: (*ProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRegisteredAvsForOperator",
			Handler:    _Protocol_GetRegisteredAvsForOperator_Handler,
		},
		{
			MethodName: "GetDelegatedStrategiesForOperator",
			Handler:    _Protocol_GetDelegatedStrategiesForOperator_Handler,
		},
		{
			MethodName: "GetOperatorDelegatedStakeForStrategy",
			Handler:    _Protocol_GetOperatorDelegatedStakeForStrategy_Handler,
		},
		{
			MethodName: "GetDelegatedStakersForOperator",
			Handler:    _Protocol_GetDelegatedStakersForOperator_Handler,
		},
		{
			MethodName: "GetStakerShares",
			Handler:    _Protocol_GetStakerShares_Handler,
		},
		{
			MethodName: "GetEigenStateChanges",
			Handler:    _Protocol_GetEigenStateChanges_Handler,
		},
		{
			MethodName: "ListStrategies",
			Handler:    _Protocol_ListStrategies_Handler,
		},
		{
			MethodName: "ListStakerStrategies",
			Handler:    _Protocol_ListStakerStrategies_Handler,
		},
		{
			MethodName: "GetStrategyForStaker",
			Handler:    _Protocol_GetStrategyForStaker_Handler,
		},
		{
			MethodName: "ListStakerQueuedWithdrawals",
			Handler:    _Protocol_ListStakerQueuedWithdrawals_Handler,
		},
		{
			MethodName: "ListStrategyQueuedWithdrawals",
			Handler:    _Protocol_ListStrategyQueuedWithdrawals_Handler,
		},
		{
			MethodName: "ListOperatorQueuedWithdrawals",
			Handler:    _Protocol_ListOperatorQueuedWithdrawals_Handler,
		},
		{
			MethodName: "ListOperatorStrategyQueuedWithdrawals",
			Handler:    _Protocol_ListOperatorStrategyQueuedWithdrawals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/sidecar/v1/protocol/rpc.proto",
}
