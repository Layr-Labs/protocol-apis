// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: eigenlayer/sidecar/v1/protocol.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRegisteredAvsForOperatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorAddress string  `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	BlockHeight     *uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
}

func (x *GetRegisteredAvsForOperatorRequest) Reset() {
	*x = GetRegisteredAvsForOperatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredAvsForOperatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredAvsForOperatorRequest) ProtoMessage() {}

func (x *GetRegisteredAvsForOperatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredAvsForOperatorRequest.ProtoReflect.Descriptor instead.
func (*GetRegisteredAvsForOperatorRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *GetRegisteredAvsForOperatorRequest) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *GetRegisteredAvsForOperatorRequest) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

type GetRegisteredAvsForOperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvsAddresses []string `protobuf:"bytes,1,rep,name=avs_addresses,json=avsAddresses,proto3" json:"avs_addresses,omitempty"`
}

func (x *GetRegisteredAvsForOperatorResponse) Reset() {
	*x = GetRegisteredAvsForOperatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredAvsForOperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredAvsForOperatorResponse) ProtoMessage() {}

func (x *GetRegisteredAvsForOperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredAvsForOperatorResponse.ProtoReflect.Descriptor instead.
func (*GetRegisteredAvsForOperatorResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *GetRegisteredAvsForOperatorResponse) GetAvsAddresses() []string {
	if x != nil {
		return x.AvsAddresses
	}
	return nil
}

type GetDelegatedStrategiesForOperatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorAddress string  `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	BlockHeight     *uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
}

func (x *GetDelegatedStrategiesForOperatorRequest) Reset() {
	*x = GetDelegatedStrategiesForOperatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStrategiesForOperatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStrategiesForOperatorRequest) ProtoMessage() {}

func (x *GetDelegatedStrategiesForOperatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStrategiesForOperatorRequest.ProtoReflect.Descriptor instead.
func (*GetDelegatedStrategiesForOperatorRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *GetDelegatedStrategiesForOperatorRequest) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *GetDelegatedStrategiesForOperatorRequest) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

type GetDelegatedStrategiesForOperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrategyAddresses []string `protobuf:"bytes,1,rep,name=strategy_addresses,json=strategyAddresses,proto3" json:"strategy_addresses,omitempty"`
}

func (x *GetDelegatedStrategiesForOperatorResponse) Reset() {
	*x = GetDelegatedStrategiesForOperatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStrategiesForOperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStrategiesForOperatorResponse) ProtoMessage() {}

func (x *GetDelegatedStrategiesForOperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStrategiesForOperatorResponse.ProtoReflect.Descriptor instead.
func (*GetDelegatedStrategiesForOperatorResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *GetDelegatedStrategiesForOperatorResponse) GetStrategyAddresses() []string {
	if x != nil {
		return x.StrategyAddresses
	}
	return nil
}

type GetOperatorDelegatedStakeForStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorAddress string  `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	StrategyAddress string  `protobuf:"bytes,2,opt,name=strategy_address,json=strategyAddress,proto3" json:"strategy_address,omitempty"`
	BlockHeight     *uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
}

func (x *GetOperatorDelegatedStakeForStrategyRequest) Reset() {
	*x = GetOperatorDelegatedStakeForStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatorDelegatedStakeForStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatorDelegatedStakeForStrategyRequest) ProtoMessage() {}

func (x *GetOperatorDelegatedStakeForStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatorDelegatedStakeForStrategyRequest.ProtoReflect.Descriptor instead.
func (*GetOperatorDelegatedStakeForStrategyRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *GetOperatorDelegatedStakeForStrategyRequest) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *GetOperatorDelegatedStakeForStrategyRequest) GetStrategyAddress() string {
	if x != nil {
		return x.StrategyAddress
	}
	return ""
}

func (x *GetOperatorDelegatedStakeForStrategyRequest) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

type GetOperatorDelegatedStakeForStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shares       string   `protobuf:"bytes,1,opt,name=shares,proto3" json:"shares,omitempty"`
	AvsAddresses []string `protobuf:"bytes,2,rep,name=avs_addresses,json=avsAddresses,proto3" json:"avs_addresses,omitempty"`
}

func (x *GetOperatorDelegatedStakeForStrategyResponse) Reset() {
	*x = GetOperatorDelegatedStakeForStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperatorDelegatedStakeForStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperatorDelegatedStakeForStrategyResponse) ProtoMessage() {}

func (x *GetOperatorDelegatedStakeForStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperatorDelegatedStakeForStrategyResponse.ProtoReflect.Descriptor instead.
func (*GetOperatorDelegatedStakeForStrategyResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *GetOperatorDelegatedStakeForStrategyResponse) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *GetOperatorDelegatedStakeForStrategyResponse) GetAvsAddresses() []string {
	if x != nil {
		return x.AvsAddresses
	}
	return nil
}

type GetDelegatedStakersForOperatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorAddress string  `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	BlockHeight     *uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
	PageNumber      uint32  `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize        uint32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *GetDelegatedStakersForOperatorRequest) Reset() {
	*x = GetDelegatedStakersForOperatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStakersForOperatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStakersForOperatorRequest) ProtoMessage() {}

func (x *GetDelegatedStakersForOperatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStakersForOperatorRequest.ProtoReflect.Descriptor instead.
func (*GetDelegatedStakersForOperatorRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *GetDelegatedStakersForOperatorRequest) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *GetDelegatedStakersForOperatorRequest) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

func (x *GetDelegatedStakersForOperatorRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *GetDelegatedStakersForOperatorRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetDelegatedStakersForOperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakerAddress []string `protobuf:"bytes,1,rep,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
}

func (x *GetDelegatedStakersForOperatorResponse) Reset() {
	*x = GetDelegatedStakersForOperatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStakersForOperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStakersForOperatorResponse) ProtoMessage() {}

func (x *GetDelegatedStakersForOperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStakersForOperatorResponse.ProtoReflect.Descriptor instead.
func (*GetDelegatedStakersForOperatorResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *GetDelegatedStakersForOperatorResponse) GetStakerAddress() []string {
	if x != nil {
		return x.StakerAddress
	}
	return nil
}

type GetStakerSharesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakerAddress string  `protobuf:"bytes,1,opt,name=staker_address,json=stakerAddress,proto3" json:"staker_address,omitempty"`
	BlockHeight   *uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3,oneof" json:"block_height,omitempty"`
}

func (x *GetStakerSharesRequest) Reset() {
	*x = GetStakerSharesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakerSharesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakerSharesRequest) ProtoMessage() {}

func (x *GetStakerSharesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakerSharesRequest.ProtoReflect.Descriptor instead.
func (*GetStakerSharesRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *GetStakerSharesRequest) GetStakerAddress() string {
	if x != nil {
		return x.StakerAddress
	}
	return ""
}

func (x *GetStakerSharesRequest) GetBlockHeight() uint64 {
	if x != nil && x.BlockHeight != nil {
		return *x.BlockHeight
	}
	return 0
}

type StakerShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy string `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Shares   string `protobuf:"bytes,2,opt,name=shares,proto3" json:"shares,omitempty"`
	// Operator the staker has delegated to if present
	OperatorAddress string `protobuf:"bytes,3,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// The operator could be regietered with 0 or many AVSs
	AvsAddresses []string `protobuf:"bytes,4,rep,name=avs_addresses,json=avsAddresses,proto3" json:"avs_addresses,omitempty"`
}

func (x *StakerShare) Reset() {
	*x = StakerShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakerShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakerShare) ProtoMessage() {}

func (x *StakerShare) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakerShare.ProtoReflect.Descriptor instead.
func (*StakerShare) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *StakerShare) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *StakerShare) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *StakerShare) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *StakerShare) GetAvsAddresses() []string {
	if x != nil {
		return x.AvsAddresses
	}
	return nil
}

type GetStakerSharesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shares []*StakerShare `protobuf:"bytes,1,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *GetStakerSharesResponse) Reset() {
	*x = GetStakerSharesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStakerSharesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStakerSharesResponse) ProtoMessage() {}

func (x *GetStakerSharesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStakerSharesResponse.ProtoReflect.Descriptor instead.
func (*GetStakerSharesResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *GetStakerSharesResponse) GetShares() []*StakerShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

var File_eigenlayer_sidecar_v1_protocol_proto protoreflect.FileDescriptor

var file_eigenlayer_sidecar_v1_protocol_proto_rawDesc = []byte{
	0x0a, 0x24, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x76, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x4a, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x76, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x76, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x28,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x5a, 0x0a, 0x29,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x2b, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6b, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x76, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x4f, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x78, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x76, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22,
	0x5e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x32,
	0xcf, 0x09, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0xe8, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x76,
	0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x76, 0x73, 0x46, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x43, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x76, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x2d, 0x61, 0x76, 0x73, 0x12, 0x80, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0xa2, 0x02, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x4b, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4c, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x12, 0x57, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x7d, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0xf4, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x45, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x7b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x7d, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x36, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x7d, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x42, 0x9c, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x45, 0x53, 0x50, 0xaa, 0x02, 0x1e,
	0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02,
	0x1e, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x2a, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x21, 0x45,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x53, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eigenlayer_sidecar_v1_protocol_proto_rawDescOnce sync.Once
	file_eigenlayer_sidecar_v1_protocol_proto_rawDescData = file_eigenlayer_sidecar_v1_protocol_proto_rawDesc
)

func file_eigenlayer_sidecar_v1_protocol_proto_rawDescGZIP() []byte {
	file_eigenlayer_sidecar_v1_protocol_proto_rawDescOnce.Do(func() {
		file_eigenlayer_sidecar_v1_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_eigenlayer_sidecar_v1_protocol_proto_rawDescData)
	})
	return file_eigenlayer_sidecar_v1_protocol_proto_rawDescData
}

var file_eigenlayer_sidecar_v1_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_eigenlayer_sidecar_v1_protocol_proto_goTypes = []any{
	(*GetRegisteredAvsForOperatorRequest)(nil),           // 0: eigenlayer.sidecar.protocol.v1.GetRegisteredAvsForOperatorRequest
	(*GetRegisteredAvsForOperatorResponse)(nil),          // 1: eigenlayer.sidecar.protocol.v1.GetRegisteredAvsForOperatorResponse
	(*GetDelegatedStrategiesForOperatorRequest)(nil),     // 2: eigenlayer.sidecar.protocol.v1.GetDelegatedStrategiesForOperatorRequest
	(*GetDelegatedStrategiesForOperatorResponse)(nil),    // 3: eigenlayer.sidecar.protocol.v1.GetDelegatedStrategiesForOperatorResponse
	(*GetOperatorDelegatedStakeForStrategyRequest)(nil),  // 4: eigenlayer.sidecar.protocol.v1.GetOperatorDelegatedStakeForStrategyRequest
	(*GetOperatorDelegatedStakeForStrategyResponse)(nil), // 5: eigenlayer.sidecar.protocol.v1.GetOperatorDelegatedStakeForStrategyResponse
	(*GetDelegatedStakersForOperatorRequest)(nil),        // 6: eigenlayer.sidecar.protocol.v1.GetDelegatedStakersForOperatorRequest
	(*GetDelegatedStakersForOperatorResponse)(nil),       // 7: eigenlayer.sidecar.protocol.v1.GetDelegatedStakersForOperatorResponse
	(*GetStakerSharesRequest)(nil),                       // 8: eigenlayer.sidecar.protocol.v1.GetStakerSharesRequest
	(*StakerShare)(nil),                                  // 9: eigenlayer.sidecar.protocol.v1.StakerShare
	(*GetStakerSharesResponse)(nil),                      // 10: eigenlayer.sidecar.protocol.v1.GetStakerSharesResponse
}
var file_eigenlayer_sidecar_v1_protocol_proto_depIdxs = []int32{
	9,  // 0: eigenlayer.sidecar.protocol.v1.GetStakerSharesResponse.shares:type_name -> eigenlayer.sidecar.protocol.v1.StakerShare
	0,  // 1: eigenlayer.sidecar.protocol.v1.Protocol.GetRegisteredAvsForOperator:input_type -> eigenlayer.sidecar.protocol.v1.GetRegisteredAvsForOperatorRequest
	2,  // 2: eigenlayer.sidecar.protocol.v1.Protocol.GetDelegatedStrategiesForOperator:input_type -> eigenlayer.sidecar.protocol.v1.GetDelegatedStrategiesForOperatorRequest
	4,  // 3: eigenlayer.sidecar.protocol.v1.Protocol.GetOperatorDelegatedStakeForStrategy:input_type -> eigenlayer.sidecar.protocol.v1.GetOperatorDelegatedStakeForStrategyRequest
	6,  // 4: eigenlayer.sidecar.protocol.v1.Protocol.GetDelegatedStakersForOperator:input_type -> eigenlayer.sidecar.protocol.v1.GetDelegatedStakersForOperatorRequest
	8,  // 5: eigenlayer.sidecar.protocol.v1.Protocol.GetStakerShares:input_type -> eigenlayer.sidecar.protocol.v1.GetStakerSharesRequest
	1,  // 6: eigenlayer.sidecar.protocol.v1.Protocol.GetRegisteredAvsForOperator:output_type -> eigenlayer.sidecar.protocol.v1.GetRegisteredAvsForOperatorResponse
	3,  // 7: eigenlayer.sidecar.protocol.v1.Protocol.GetDelegatedStrategiesForOperator:output_type -> eigenlayer.sidecar.protocol.v1.GetDelegatedStrategiesForOperatorResponse
	5,  // 8: eigenlayer.sidecar.protocol.v1.Protocol.GetOperatorDelegatedStakeForStrategy:output_type -> eigenlayer.sidecar.protocol.v1.GetOperatorDelegatedStakeForStrategyResponse
	7,  // 9: eigenlayer.sidecar.protocol.v1.Protocol.GetDelegatedStakersForOperator:output_type -> eigenlayer.sidecar.protocol.v1.GetDelegatedStakersForOperatorResponse
	10, // 10: eigenlayer.sidecar.protocol.v1.Protocol.GetStakerShares:output_type -> eigenlayer.sidecar.protocol.v1.GetStakerSharesResponse
	6,  // [6:11] is the sub-list for method output_type
	1,  // [1:6] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_eigenlayer_sidecar_v1_protocol_proto_init() }
func file_eigenlayer_sidecar_v1_protocol_proto_init() {
	if File_eigenlayer_sidecar_v1_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetRegisteredAvsForOperatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetRegisteredAvsForOperatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetDelegatedStrategiesForOperatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetDelegatedStrategiesForOperatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetOperatorDelegatedStakeForStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetOperatorDelegatedStakeForStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetDelegatedStakersForOperatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetDelegatedStakersForOperatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetStakerSharesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StakerShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetStakerSharesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[0].OneofWrappers = []any{}
	file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[2].OneofWrappers = []any{}
	file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[4].OneofWrappers = []any{}
	file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[6].OneofWrappers = []any{}
	file_eigenlayer_sidecar_v1_protocol_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eigenlayer_sidecar_v1_protocol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eigenlayer_sidecar_v1_protocol_proto_goTypes,
		DependencyIndexes: file_eigenlayer_sidecar_v1_protocol_proto_depIdxs,
		MessageInfos:      file_eigenlayer_sidecar_v1_protocol_proto_msgTypes,
	}.Build()
	File_eigenlayer_sidecar_v1_protocol_proto = out.File
	file_eigenlayer_sidecar_v1_protocol_proto_rawDesc = nil
	file_eigenlayer_sidecar_v1_protocol_proto_goTypes = nil
	file_eigenlayer_sidecar_v1_protocol_proto_depIdxs = nil
}
