// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: eigenlayer/sidecar/v1/rewards/common.proto

package rewards

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RewardType int32

const (
	RewardType_REWARD_TYPE_AVS             RewardType = 0
	RewardType_REWARD_TYPE_FOR_ALL         RewardType = 1
	RewardType_REWARD_TYPE_FOR_ALL_EARNERS RewardType = 2
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		0: "REWARD_TYPE_AVS",
		1: "REWARD_TYPE_FOR_ALL",
		2: "REWARD_TYPE_FOR_ALL_EARNERS",
	}
	RewardType_value = map[string]int32{
		"REWARD_TYPE_AVS":             0,
		"REWARD_TYPE_FOR_ALL":         1,
		"REWARD_TYPE_FOR_ALL_EARNERS": 2,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_enumTypes[0].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_eigenlayer_sidecar_v1_rewards_common_proto_enumTypes[0]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{0}
}

type EarnerLeaf struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Earner          string                 `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	EarnerTokenRoot []byte                 `protobuf:"bytes,2,opt,name=earner_token_root,json=earnerTokenRoot,proto3" json:"earner_token_root,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EarnerLeaf) Reset() {
	*x = EarnerLeaf{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EarnerLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarnerLeaf) ProtoMessage() {}

func (x *EarnerLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarnerLeaf.ProtoReflect.Descriptor instead.
func (*EarnerLeaf) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{0}
}

func (x *EarnerLeaf) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *EarnerLeaf) GetEarnerTokenRoot() []byte {
	if x != nil {
		return x.EarnerTokenRoot
	}
	return nil
}

type TokenLeaf struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Token              string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CumulativeEarnings string                 `protobuf:"bytes,2,opt,name=cumulative_earnings,json=cumulativeEarnings,proto3" json:"cumulative_earnings,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TokenLeaf) Reset() {
	*x = TokenLeaf{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenLeaf) ProtoMessage() {}

func (x *TokenLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenLeaf.ProtoReflect.Descriptor instead.
func (*TokenLeaf) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{1}
}

func (x *TokenLeaf) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenLeaf) GetCumulativeEarnings() string {
	if x != nil {
		return x.CumulativeEarnings
	}
	return ""
}

// Proof closely models the IRewardsCoordinatorRewardsMerkleClaim interface found
// in the RewardsCoordinator contract
type Proof struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Root            []byte                 `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	RootIndex       uint32                 `protobuf:"varint,2,opt,name=root_index,json=rootIndex,proto3" json:"root_index,omitempty"`
	EarnerIndex     uint32                 `protobuf:"varint,3,opt,name=earner_index,json=earnerIndex,proto3" json:"earner_index,omitempty"`
	EarnerTreeProof []byte                 `protobuf:"bytes,4,opt,name=earner_tree_proof,json=earnerTreeProof,proto3" json:"earner_tree_proof,omitempty"`
	EarnerLeaf      *EarnerLeaf            `protobuf:"bytes,5,opt,name=earner_leaf,json=earnerLeaf,proto3" json:"earner_leaf,omitempty"`
	TokenIndices    []uint32               `protobuf:"varint,6,rep,packed,name=token_indices,json=tokenIndices,proto3" json:"token_indices,omitempty"`
	TokenTreeProofs [][]byte               `protobuf:"bytes,7,rep,name=token_tree_proofs,json=tokenTreeProofs,proto3" json:"token_tree_proofs,omitempty"`
	TokenLeaves     []*TokenLeaf           `protobuf:"bytes,8,rep,name=token_leaves,json=tokenLeaves,proto3" json:"token_leaves,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Proof) Reset() {
	*x = Proof{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{2}
}

func (x *Proof) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Proof) GetRootIndex() uint32 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

func (x *Proof) GetEarnerIndex() uint32 {
	if x != nil {
		return x.EarnerIndex
	}
	return 0
}

func (x *Proof) GetEarnerTreeProof() []byte {
	if x != nil {
		return x.EarnerTreeProof
	}
	return nil
}

func (x *Proof) GetEarnerLeaf() *EarnerLeaf {
	if x != nil {
		return x.EarnerLeaf
	}
	return nil
}

func (x *Proof) GetTokenIndices() []uint32 {
	if x != nil {
		return x.TokenIndices
	}
	return nil
}

func (x *Proof) GetTokenTreeProofs() [][]byte {
	if x != nil {
		return x.TokenTreeProofs
	}
	return nil
}

func (x *Proof) GetTokenLeaves() []*TokenLeaf {
	if x != nil {
		return x.TokenLeaves
	}
	return nil
}

type Reward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Earner        string                 `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Snapshot      string                 `protobuf:"bytes,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reward) Reset() {
	*x = Reward{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{3}
}

func (x *Reward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *Reward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Reward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Reward) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

type AttributableReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Earner        string                 `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Operator      string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Avs           string                 `protobuf:"bytes,3,opt,name=avs,proto3" json:"avs,omitempty"`
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Strategy      string                 `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Multiplier    string                 `protobuf:"bytes,6,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	Amount        string                 `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	Shares        string                 `protobuf:"bytes,8,opt,name=shares,proto3" json:"shares,omitempty"`
	RewardHash    string                 `protobuf:"bytes,9,opt,name=reward_hash,json=rewardHash,proto3" json:"reward_hash,omitempty"`
	Snapshot      string                 `protobuf:"bytes,10,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	RewardType    RewardType             `protobuf:"varint,11,opt,name=reward_type,json=rewardType,proto3,enum=eigenlayer.sidecar.v1.rewards.RewardType" json:"reward_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributableReward) Reset() {
	*x = AttributableReward{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributableReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributableReward) ProtoMessage() {}

func (x *AttributableReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributableReward.ProtoReflect.Descriptor instead.
func (*AttributableReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{4}
}

func (x *AttributableReward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *AttributableReward) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AttributableReward) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *AttributableReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AttributableReward) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *AttributableReward) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *AttributableReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AttributableReward) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *AttributableReward) GetRewardHash() string {
	if x != nil {
		return x.RewardHash
	}
	return ""
}

func (x *AttributableReward) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *AttributableReward) GetRewardType() RewardType {
	if x != nil {
		return x.RewardType
	}
	return RewardType_REWARD_TYPE_AVS
}

type AvsReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Earner        string                 `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Avs           string                 `protobuf:"bytes,2,opt,name=avs,proto3" json:"avs,omitempty"`
	Token         string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount        string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	RewardHash    string                 `protobuf:"bytes,5,opt,name=reward_hash,json=rewardHash,proto3" json:"reward_hash,omitempty"`
	Snapshot      string                 `protobuf:"bytes,6,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	RewardType    RewardType             `protobuf:"varint,7,opt,name=reward_type,json=rewardType,proto3,enum=eigenlayer.sidecar.v1.rewards.RewardType" json:"reward_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvsReward) Reset() {
	*x = AvsReward{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvsReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvsReward) ProtoMessage() {}

func (x *AvsReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvsReward.ProtoReflect.Descriptor instead.
func (*AvsReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{5}
}

func (x *AvsReward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *AvsReward) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *AvsReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AvsReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *AvsReward) GetRewardHash() string {
	if x != nil {
		return x.RewardHash
	}
	return ""
}

func (x *AvsReward) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *AvsReward) GetRewardType() RewardType {
	if x != nil {
		return x.RewardType
	}
	return RewardType_REWARD_TYPE_AVS
}

type DistributionRoot struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Root                      string                 `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	RootIndex                 uint64                 `protobuf:"varint,2,opt,name=root_index,json=rootIndex,proto3" json:"root_index,omitempty"`
	RewardsCalculationEnd     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=rewards_calculation_end,json=rewardsCalculationEnd,proto3" json:"rewards_calculation_end,omitempty"`
	RewardsCalculationEndUnit string                 `protobuf:"bytes,4,opt,name=rewards_calculation_end_unit,json=rewardsCalculationEndUnit,proto3" json:"rewards_calculation_end_unit,omitempty"`
	ActivatedAt               *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
	ActivatedAtUnit           string                 `protobuf:"bytes,6,opt,name=activated_at_unit,json=activatedAtUnit,proto3" json:"activated_at_unit,omitempty"`
	CreatedAtBlockNumber      uint64                 `protobuf:"varint,7,opt,name=created_at_block_number,json=createdAtBlockNumber,proto3" json:"created_at_block_number,omitempty"`
	TransactionHash           string                 `protobuf:"bytes,8,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHeight               uint64                 `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	LogIndex                  uint64                 `protobuf:"varint,10,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	Disabled                  bool                   `protobuf:"varint,11,opt,name=disabled,proto3" json:"disabled,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DistributionRoot) Reset() {
	*x = DistributionRoot{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistributionRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistributionRoot) ProtoMessage() {}

func (x *DistributionRoot) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistributionRoot.ProtoReflect.Descriptor instead.
func (*DistributionRoot) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{6}
}

func (x *DistributionRoot) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *DistributionRoot) GetRootIndex() uint64 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

func (x *DistributionRoot) GetRewardsCalculationEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RewardsCalculationEnd
	}
	return nil
}

func (x *DistributionRoot) GetRewardsCalculationEndUnit() string {
	if x != nil {
		return x.RewardsCalculationEndUnit
	}
	return ""
}

func (x *DistributionRoot) GetActivatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivatedAt
	}
	return nil
}

func (x *DistributionRoot) GetActivatedAtUnit() string {
	if x != nil {
		return x.ActivatedAtUnit
	}
	return ""
}

func (x *DistributionRoot) GetCreatedAtBlockNumber() uint64 {
	if x != nil {
		return x.CreatedAtBlockNumber
	}
	return 0
}

func (x *DistributionRoot) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *DistributionRoot) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *DistributionRoot) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *DistributionRoot) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type TotalClaimedReward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Earner        string                 `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Amount        string                 `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TotalClaimedReward) Reset() {
	*x = TotalClaimedReward{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TotalClaimedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalClaimedReward) ProtoMessage() {}

func (x *TotalClaimedReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalClaimedReward.ProtoReflect.Descriptor instead.
func (*TotalClaimedReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{7}
}

func (x *TotalClaimedReward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *TotalClaimedReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TotalClaimedReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type SummarizedEarnerReward struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Token string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Rewards that have been earned but not necessarily activated yet
	Earned string `protobuf:"bytes,2,opt,name=earned,proto3" json:"earned,omitempty"`
	// total rewards that are claimable (does not account for claimed)
	Active string `protobuf:"bytes,3,opt,name=active,proto3" json:"active,omitempty"`
	// total rewards that have been claimed
	Claimed string `protobuf:"bytes,4,opt,name=claimed,proto3" json:"claimed,omitempty"`
	// rewards that can be claimed at the block height
	Claimable     string `protobuf:"bytes,5,opt,name=claimable,proto3" json:"claimable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SummarizedEarnerReward) Reset() {
	*x = SummarizedEarnerReward{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummarizedEarnerReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizedEarnerReward) ProtoMessage() {}

func (x *SummarizedEarnerReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizedEarnerReward.ProtoReflect.Descriptor instead.
func (*SummarizedEarnerReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{8}
}

func (x *SummarizedEarnerReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SummarizedEarnerReward) GetEarned() string {
	if x != nil {
		return x.Earned
	}
	return ""
}

func (x *SummarizedEarnerReward) GetActive() string {
	if x != nil {
		return x.Active
	}
	return ""
}

func (x *SummarizedEarnerReward) GetClaimed() string {
	if x != nil {
		return x.Claimed
	}
	return ""
}

func (x *SummarizedEarnerReward) GetClaimable() string {
	if x != nil {
		return x.Claimable
	}
	return ""
}

type ClaimedReward struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Earner           string                 `protobuf:"bytes,1,opt,name=earner,proto3" json:"earner,omitempty"`
	Claimer          string                 `protobuf:"bytes,2,opt,name=claimer,proto3" json:"claimer,omitempty"`
	Token            string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount           string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	DistributionRoot string                 `protobuf:"bytes,5,opt,name=distribution_root,json=distributionRoot,proto3" json:"distribution_root,omitempty"`
	BlockNumber      uint64                 `protobuf:"varint,6,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Recipient        string                 `protobuf:"bytes,7,opt,name=recipient,proto3" json:"recipient,omitempty"`
	TransactionHash  string                 `protobuf:"bytes,8,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	LogIndex         uint64                 `protobuf:"varint,9,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ClaimedReward) Reset() {
	*x = ClaimedReward{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimedReward) ProtoMessage() {}

func (x *ClaimedReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimedReward.ProtoReflect.Descriptor instead.
func (*ClaimedReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{9}
}

func (x *ClaimedReward) GetEarner() string {
	if x != nil {
		return x.Earner
	}
	return ""
}

func (x *ClaimedReward) GetClaimer() string {
	if x != nil {
		return x.Claimer
	}
	return ""
}

func (x *ClaimedReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ClaimedReward) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ClaimedReward) GetDistributionRoot() string {
	if x != nil {
		return x.DistributionRoot
	}
	return ""
}

func (x *ClaimedReward) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ClaimedReward) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *ClaimedReward) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *ClaimedReward) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

type RewardAmount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Amount        string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardAmount) Reset() {
	*x = RewardAmount{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardAmount) ProtoMessage() {}

func (x *RewardAmount) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardAmount.ProtoReflect.Descriptor instead.
func (*RewardAmount) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{10}
}

func (x *RewardAmount) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RewardAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type HistoricalReward struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Token         string                                     `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Amounts       []*HistoricalReward_HistoricalRewardAmount `protobuf:"bytes,2,rep,name=amounts,proto3" json:"amounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoricalReward) Reset() {
	*x = HistoricalReward{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalReward) ProtoMessage() {}

func (x *HistoricalReward) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalReward.ProtoReflect.Descriptor instead.
func (*HistoricalReward) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{11}
}

func (x *HistoricalReward) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HistoricalReward) GetAmounts() []*HistoricalReward_HistoricalRewardAmount {
	if x != nil {
		return x.Amounts
	}
	return nil
}

type HistoricalReward_HistoricalRewardAmount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        string                 `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Snapshot      string                 `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoricalReward_HistoricalRewardAmount) Reset() {
	*x = HistoricalReward_HistoricalRewardAmount{}
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalReward_HistoricalRewardAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalReward_HistoricalRewardAmount) ProtoMessage() {}

func (x *HistoricalReward_HistoricalRewardAmount) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalReward_HistoricalRewardAmount.ProtoReflect.Descriptor instead.
func (*HistoricalReward_HistoricalRewardAmount) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP(), []int{11, 0}
}

func (x *HistoricalReward_HistoricalRewardAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *HistoricalReward_HistoricalRewardAmount) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

var File_eigenlayer_sidecar_v1_rewards_common_proto protoreflect.FileDescriptor

var file_eigenlayer_sidecar_v1_rewards_common_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x0a, 0x45, 0x61,
	0x72, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x52, 0x0a, 0x09,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xf3, 0x02, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x4a, 0x0a, 0x0b,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x0a, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x76, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4a,
	0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x09, 0x41,
	0x76, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x76, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x4a, 0x0a,
	0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x10, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x52, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x5a, 0x0a, 0x12, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x16,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3c, 0x0a, 0x0c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x10, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x60, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x4c, 0x0a, 0x16, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2a, 0x5b, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x56, 0x53, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x52, 0x53,
	0x10, 0x02, 0x42, 0x95, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0xa2, 0x02, 0x04, 0x45, 0x53, 0x56, 0x52, 0xaa, 0x02, 0x1d, 0x45, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x56, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0xca, 0x02, 0x1d, 0x45, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x5c, 0x56, 0x31, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0xe2, 0x02, 0x29, 0x45, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x5c, 0x56, 0x31, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x3a, 0x3a, 0x56,
	0x31, 0x3a, 0x3a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescOnce sync.Once
	file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescData []byte
)

func file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescGZIP() []byte {
	file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescOnce.Do(func() {
		file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eigenlayer_sidecar_v1_rewards_common_proto_rawDesc), len(file_eigenlayer_sidecar_v1_rewards_common_proto_rawDesc)))
	})
	return file_eigenlayer_sidecar_v1_rewards_common_proto_rawDescData
}

var file_eigenlayer_sidecar_v1_rewards_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_eigenlayer_sidecar_v1_rewards_common_proto_goTypes = []any{
	(RewardType)(0),                                 // 0: eigenlayer.sidecar.v1.rewards.RewardType
	(*EarnerLeaf)(nil),                              // 1: eigenlayer.sidecar.v1.rewards.EarnerLeaf
	(*TokenLeaf)(nil),                               // 2: eigenlayer.sidecar.v1.rewards.TokenLeaf
	(*Proof)(nil),                                   // 3: eigenlayer.sidecar.v1.rewards.Proof
	(*Reward)(nil),                                  // 4: eigenlayer.sidecar.v1.rewards.Reward
	(*AttributableReward)(nil),                      // 5: eigenlayer.sidecar.v1.rewards.AttributableReward
	(*AvsReward)(nil),                               // 6: eigenlayer.sidecar.v1.rewards.AvsReward
	(*DistributionRoot)(nil),                        // 7: eigenlayer.sidecar.v1.rewards.DistributionRoot
	(*TotalClaimedReward)(nil),                      // 8: eigenlayer.sidecar.v1.rewards.TotalClaimedReward
	(*SummarizedEarnerReward)(nil),                  // 9: eigenlayer.sidecar.v1.rewards.SummarizedEarnerReward
	(*ClaimedReward)(nil),                           // 10: eigenlayer.sidecar.v1.rewards.ClaimedReward
	(*RewardAmount)(nil),                            // 11: eigenlayer.sidecar.v1.rewards.RewardAmount
	(*HistoricalReward)(nil),                        // 12: eigenlayer.sidecar.v1.rewards.HistoricalReward
	(*HistoricalReward_HistoricalRewardAmount)(nil), // 13: eigenlayer.sidecar.v1.rewards.HistoricalReward.HistoricalRewardAmount
	(*timestamppb.Timestamp)(nil),                   // 14: google.protobuf.Timestamp
}
var file_eigenlayer_sidecar_v1_rewards_common_proto_depIdxs = []int32{
	1,  // 0: eigenlayer.sidecar.v1.rewards.Proof.earner_leaf:type_name -> eigenlayer.sidecar.v1.rewards.EarnerLeaf
	2,  // 1: eigenlayer.sidecar.v1.rewards.Proof.token_leaves:type_name -> eigenlayer.sidecar.v1.rewards.TokenLeaf
	0,  // 2: eigenlayer.sidecar.v1.rewards.AttributableReward.reward_type:type_name -> eigenlayer.sidecar.v1.rewards.RewardType
	0,  // 3: eigenlayer.sidecar.v1.rewards.AvsReward.reward_type:type_name -> eigenlayer.sidecar.v1.rewards.RewardType
	14, // 4: eigenlayer.sidecar.v1.rewards.DistributionRoot.rewards_calculation_end:type_name -> google.protobuf.Timestamp
	14, // 5: eigenlayer.sidecar.v1.rewards.DistributionRoot.activated_at:type_name -> google.protobuf.Timestamp
	13, // 6: eigenlayer.sidecar.v1.rewards.HistoricalReward.amounts:type_name -> eigenlayer.sidecar.v1.rewards.HistoricalReward.HistoricalRewardAmount
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_eigenlayer_sidecar_v1_rewards_common_proto_init() }
func file_eigenlayer_sidecar_v1_rewards_common_proto_init() {
	if File_eigenlayer_sidecar_v1_rewards_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eigenlayer_sidecar_v1_rewards_common_proto_rawDesc), len(file_eigenlayer_sidecar_v1_rewards_common_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eigenlayer_sidecar_v1_rewards_common_proto_goTypes,
		DependencyIndexes: file_eigenlayer_sidecar_v1_rewards_common_proto_depIdxs,
		EnumInfos:         file_eigenlayer_sidecar_v1_rewards_common_proto_enumTypes,
		MessageInfos:      file_eigenlayer_sidecar_v1_rewards_common_proto_msgTypes,
	}.Build()
	File_eigenlayer_sidecar_v1_rewards_common_proto = out.File
	file_eigenlayer_sidecar_v1_rewards_common_proto_goTypes = nil
	file_eigenlayer_sidecar_v1_rewards_common_proto_depIdxs = nil
}
