// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: eigenlayer/sidecar/v1/eigenState/eigenState.proto

package eigenState

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RewardSubmission_RewardType int32

const (
	RewardSubmission_AVS         RewardSubmission_RewardType = 0
	RewardSubmission_ALL_STAKERS RewardSubmission_RewardType = 1
	RewardSubmission_ALL_EARNERS RewardSubmission_RewardType = 2
)

// Enum value maps for RewardSubmission_RewardType.
var (
	RewardSubmission_RewardType_name = map[int32]string{
		0: "AVS",
		1: "ALL_STAKERS",
		2: "ALL_EARNERS",
	}
	RewardSubmission_RewardType_value = map[string]int32{
		"AVS":         0,
		"ALL_STAKERS": 1,
		"ALL_EARNERS": 2,
	}
)

func (x RewardSubmission_RewardType) Enum() *RewardSubmission_RewardType {
	p := new(RewardSubmission_RewardType)
	*p = x
	return p
}

func (x RewardSubmission_RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardSubmission_RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_enumTypes[0].Descriptor()
}

func (RewardSubmission_RewardType) Type() protoreflect.EnumType {
	return &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_enumTypes[0]
}

func (x RewardSubmission_RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardSubmission_RewardType.Descriptor instead.
func (RewardSubmission_RewardType) EnumDescriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{4, 0}
}

type StateRoot struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EthBlockNumber uint64                 `protobuf:"varint,1,opt,name=eth_block_number,json=ethBlockNumber,proto3" json:"eth_block_number,omitempty"`
	EthBlockHash   string                 `protobuf:"bytes,2,opt,name=eth_block_hash,json=ethBlockHash,proto3" json:"eth_block_hash,omitempty"`
	StateRoot      string                 `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StateRoot) Reset() {
	*x = StateRoot{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRoot) ProtoMessage() {}

func (x *StateRoot) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateRoot.ProtoReflect.Descriptor instead.
func (*StateRoot) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{0}
}

func (x *StateRoot) GetEthBlockNumber() uint64 {
	if x != nil {
		return x.EthBlockNumber
	}
	return 0
}

func (x *StateRoot) GetEthBlockHash() string {
	if x != nil {
		return x.EthBlockHash
	}
	return ""
}

func (x *StateRoot) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

type TransactionMetadata struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LogIndex        uint64                 `protobuf:"varint,4,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	TransactionHash string                 `protobuf:"bytes,5,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	BlockHeight     uint64                 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransactionMetadata) Reset() {
	*x = TransactionMetadata{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionMetadata) ProtoMessage() {}

func (x *TransactionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionMetadata.ProtoReflect.Descriptor instead.
func (*TransactionMetadata) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{1}
}

func (x *TransactionMetadata) GetLogIndex() uint64 {
	if x != nil {
		return x.LogIndex
	}
	return 0
}

func (x *TransactionMetadata) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *TransactionMetadata) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

type AvsOperatorStateChange struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Avs                 string                 `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
	Operator            string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Registered          bool                   `protobuf:"varint,3,opt,name=registered,proto3" json:"registered,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AvsOperatorStateChange) Reset() {
	*x = AvsOperatorStateChange{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvsOperatorStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvsOperatorStateChange) ProtoMessage() {}

func (x *AvsOperatorStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvsOperatorStateChange.ProtoReflect.Descriptor instead.
func (*AvsOperatorStateChange) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{2}
}

func (x *AvsOperatorStateChange) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *AvsOperatorStateChange) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *AvsOperatorStateChange) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

func (x *AvsOperatorStateChange) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorShareDelta struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Staker              string                 `protobuf:"bytes,2,opt,name=staker,proto3" json:"staker,omitempty"`
	Strategy            string                 `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Shares              string                 `protobuf:"bytes,4,opt,name=shares,proto3" json:"shares,omitempty"`
	BlockTime           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockDate           string                 `protobuf:"bytes,6,opt,name=block_date,json=blockDate,proto3" json:"block_date,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,7,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorShareDelta) Reset() {
	*x = OperatorShareDelta{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorShareDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorShareDelta) ProtoMessage() {}

func (x *OperatorShareDelta) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorShareDelta.ProtoReflect.Descriptor instead.
func (*OperatorShareDelta) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{3}
}

func (x *OperatorShareDelta) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *OperatorShareDelta) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *OperatorShareDelta) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *OperatorShareDelta) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *OperatorShareDelta) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *OperatorShareDelta) GetBlockDate() string {
	if x != nil {
		return x.BlockDate
	}
	return ""
}

func (x *OperatorShareDelta) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type RewardSubmission struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	Avs                 string                      `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
	RewardHash          string                      `protobuf:"bytes,2,opt,name=reward_hash,json=rewardHash,proto3" json:"reward_hash,omitempty"`
	Token               string                      `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount              string                      `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Strategy            string                      `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	StrategyIndex       uint64                      `protobuf:"varint,6,opt,name=strategy_index,json=strategyIndex,proto3" json:"strategy_index,omitempty"`
	Multiplier          string                      `protobuf:"bytes,7,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	StartTimestamp      *timestamppb.Timestamp      `protobuf:"bytes,8,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp        *timestamppb.Timestamp      `protobuf:"bytes,9,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Duration            uint64                      `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	RewardType          RewardSubmission_RewardType `protobuf:"varint,11,opt,name=reward_type,json=rewardType,proto3,enum=eigenlayer.sidecar.v1.eigenState.RewardSubmission_RewardType" json:"reward_type,omitempty"`
	TransactionMetadata *TransactionMetadata        `protobuf:"bytes,12,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RewardSubmission) Reset() {
	*x = RewardSubmission{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardSubmission) ProtoMessage() {}

func (x *RewardSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardSubmission.ProtoReflect.Descriptor instead.
func (*RewardSubmission) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{4}
}

func (x *RewardSubmission) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *RewardSubmission) GetRewardHash() string {
	if x != nil {
		return x.RewardHash
	}
	return ""
}

func (x *RewardSubmission) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RewardSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *RewardSubmission) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *RewardSubmission) GetStrategyIndex() uint64 {
	if x != nil {
		return x.StrategyIndex
	}
	return 0
}

func (x *RewardSubmission) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *RewardSubmission) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *RewardSubmission) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *RewardSubmission) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RewardSubmission) GetRewardType() RewardSubmission_RewardType {
	if x != nil {
		return x.RewardType
	}
	return RewardSubmission_AVS
}

func (x *RewardSubmission) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type StakerDelegationChange struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Staker              string                 `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	Operator            string                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Delegated           bool                   `protobuf:"varint,3,opt,name=delegated,proto3" json:"delegated,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StakerDelegationChange) Reset() {
	*x = StakerDelegationChange{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakerDelegationChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakerDelegationChange) ProtoMessage() {}

func (x *StakerDelegationChange) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakerDelegationChange.ProtoReflect.Descriptor instead.
func (*StakerDelegationChange) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{5}
}

func (x *StakerDelegationChange) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *StakerDelegationChange) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *StakerDelegationChange) GetDelegated() bool {
	if x != nil {
		return x.Delegated
	}
	return false
}

func (x *StakerDelegationChange) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type StakerShareDelta struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Staker              string                 `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	Strategy            string                 `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Shares              string                 `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares,omitempty"`
	StrategyIndex       uint64                 `protobuf:"varint,4,opt,name=strategy_index,json=strategyIndex,proto3" json:"strategy_index,omitempty"`
	BlockTime           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	BlockDate           string                 `protobuf:"bytes,6,opt,name=block_date,json=blockDate,proto3" json:"block_date,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,7,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *StakerShareDelta) Reset() {
	*x = StakerShareDelta{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakerShareDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakerShareDelta) ProtoMessage() {}

func (x *StakerShareDelta) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakerShareDelta.ProtoReflect.Descriptor instead.
func (*StakerShareDelta) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{6}
}

func (x *StakerShareDelta) GetStaker() string {
	if x != nil {
		return x.Staker
	}
	return ""
}

func (x *StakerShareDelta) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *StakerShareDelta) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *StakerShareDelta) GetStrategyIndex() uint64 {
	if x != nil {
		return x.StrategyIndex
	}
	return 0
}

func (x *StakerShareDelta) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

func (x *StakerShareDelta) GetBlockDate() string {
	if x != nil {
		return x.BlockDate
	}
	return ""
}

func (x *StakerShareDelta) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type SubmittedDistributionRoot struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Root                      string                 `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	RootIndex                 uint64                 `protobuf:"varint,2,opt,name=root_index,json=rootIndex,proto3" json:"root_index,omitempty"`
	RewardsCalculationEnd     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=rewards_calculation_end,json=rewardsCalculationEnd,proto3" json:"rewards_calculation_end,omitempty"`
	RewardsCalculationEndUnit string                 `protobuf:"bytes,4,opt,name=rewards_calculation_end_unit,json=rewardsCalculationEndUnit,proto3" json:"rewards_calculation_end_unit,omitempty"`
	ActivatedAt               *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=activated_at,json=activatedAt,proto3" json:"activated_at,omitempty"`
	ActivatedAtUnit           string                 `protobuf:"bytes,6,opt,name=activated_at_unit,json=activatedAtUnit,proto3" json:"activated_at_unit,omitempty"`
	CreatedAtBlockNumber      uint64                 `protobuf:"varint,7,opt,name=created_at_block_number,json=createdAtBlockNumber,proto3" json:"created_at_block_number,omitempty"`
	TransactionMetadata       *TransactionMetadata   `protobuf:"bytes,8,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SubmittedDistributionRoot) Reset() {
	*x = SubmittedDistributionRoot{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmittedDistributionRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmittedDistributionRoot) ProtoMessage() {}

func (x *SubmittedDistributionRoot) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmittedDistributionRoot.ProtoReflect.Descriptor instead.
func (*SubmittedDistributionRoot) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{7}
}

func (x *SubmittedDistributionRoot) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *SubmittedDistributionRoot) GetRootIndex() uint64 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

func (x *SubmittedDistributionRoot) GetRewardsCalculationEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.RewardsCalculationEnd
	}
	return nil
}

func (x *SubmittedDistributionRoot) GetRewardsCalculationEndUnit() string {
	if x != nil {
		return x.RewardsCalculationEndUnit
	}
	return ""
}

func (x *SubmittedDistributionRoot) GetActivatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivatedAt
	}
	return nil
}

func (x *SubmittedDistributionRoot) GetActivatedAtUnit() string {
	if x != nil {
		return x.ActivatedAtUnit
	}
	return ""
}

func (x *SubmittedDistributionRoot) GetCreatedAtBlockNumber() uint64 {
	if x != nil {
		return x.CreatedAtBlockNumber
	}
	return 0
}

func (x *SubmittedDistributionRoot) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type DisabledDistributionRoot struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RootIndex           uint64                 `protobuf:"varint,1,opt,name=root_index,json=rootIndex,proto3" json:"root_index,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,2,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DisabledDistributionRoot) Reset() {
	*x = DisabledDistributionRoot{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisabledDistributionRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisabledDistributionRoot) ProtoMessage() {}

func (x *DisabledDistributionRoot) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisabledDistributionRoot.ProtoReflect.Descriptor instead.
func (*DisabledDistributionRoot) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{8}
}

func (x *DisabledDistributionRoot) GetRootIndex() uint64 {
	if x != nil {
		return x.RootIndex
	}
	return 0
}

func (x *DisabledDistributionRoot) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

// Slashing-related messages
type CompletedSlashingWithdrawal struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	WithdrawalRoot      string                 `protobuf:"bytes,1,opt,name=withdrawal_root,json=withdrawalRoot,proto3" json:"withdrawal_root,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,2,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CompletedSlashingWithdrawal) Reset() {
	*x = CompletedSlashingWithdrawal{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompletedSlashingWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletedSlashingWithdrawal) ProtoMessage() {}

func (x *CompletedSlashingWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletedSlashingWithdrawal.ProtoReflect.Descriptor instead.
func (*CompletedSlashingWithdrawal) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{9}
}

func (x *CompletedSlashingWithdrawal) GetWithdrawalRoot() string {
	if x != nil {
		return x.WithdrawalRoot
	}
	return ""
}

func (x *CompletedSlashingWithdrawal) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type QueuedSlashingWithdrawal struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Operator                 string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	WithdrawalRoot           string                 `protobuf:"bytes,2,opt,name=withdrawal_root,json=withdrawalRoot,proto3" json:"withdrawal_root,omitempty"`
	TargetBlock              uint64                 `protobuf:"varint,3,opt,name=target_block,json=targetBlock,proto3" json:"target_block,omitempty"`
	StakerOptOutWindowBlocks uint64                 `protobuf:"varint,4,opt,name=staker_opt_out_window_blocks,json=stakerOptOutWindowBlocks,proto3" json:"staker_opt_out_window_blocks,omitempty"`
	OperatorSetId            uint64                 `protobuf:"varint,5,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	Avs                      string                 `protobuf:"bytes,6,opt,name=avs,proto3" json:"avs,omitempty"`
	TransactionMetadata      *TransactionMetadata   `protobuf:"bytes,7,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *QueuedSlashingWithdrawal) Reset() {
	*x = QueuedSlashingWithdrawal{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuedSlashingWithdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedSlashingWithdrawal) ProtoMessage() {}

func (x *QueuedSlashingWithdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedSlashingWithdrawal.ProtoReflect.Descriptor instead.
func (*QueuedSlashingWithdrawal) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{10}
}

func (x *QueuedSlashingWithdrawal) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *QueuedSlashingWithdrawal) GetWithdrawalRoot() string {
	if x != nil {
		return x.WithdrawalRoot
	}
	return ""
}

func (x *QueuedSlashingWithdrawal) GetTargetBlock() uint64 {
	if x != nil {
		return x.TargetBlock
	}
	return 0
}

func (x *QueuedSlashingWithdrawal) GetStakerOptOutWindowBlocks() uint64 {
	if x != nil {
		return x.StakerOptOutWindowBlocks
	}
	return 0
}

func (x *QueuedSlashingWithdrawal) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *QueuedSlashingWithdrawal) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *QueuedSlashingWithdrawal) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type SlashedOperator struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OperatorSetId       uint64                 `protobuf:"varint,2,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	Avs                 string                 `protobuf:"bytes,3,opt,name=avs,proto3" json:"avs,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SlashedOperator) Reset() {
	*x = SlashedOperator{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlashedOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashedOperator) ProtoMessage() {}

func (x *SlashedOperator) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashedOperator.ProtoReflect.Descriptor instead.
func (*SlashedOperator) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{11}
}

func (x *SlashedOperator) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SlashedOperator) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *SlashedOperator) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *SlashedOperator) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type SlashedOperatorShares struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Strategy            string                 `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Shares              string                 `protobuf:"bytes,3,opt,name=shares,proto3" json:"shares,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SlashedOperatorShares) Reset() {
	*x = SlashedOperatorShares{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlashedOperatorShares) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashedOperatorShares) ProtoMessage() {}

func (x *SlashedOperatorShares) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashedOperatorShares.ProtoReflect.Descriptor instead.
func (*SlashedOperatorShares) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{12}
}

func (x *SlashedOperatorShares) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *SlashedOperatorShares) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *SlashedOperatorShares) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *SlashedOperatorShares) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

// Operator allocation & split messages
type DefaultOperatorSplit struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Operator               string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OldOperatorBasisPoints uint64                 `protobuf:"varint,2,opt,name=old_operator_basis_points,json=oldOperatorBasisPoints,proto3" json:"old_operator_basis_points,omitempty"`
	NewOperatorBasisPoints uint64                 `protobuf:"varint,3,opt,name=new_operator_basis_points,json=newOperatorBasisPoints,proto3" json:"new_operator_basis_points,omitempty"`
	TransactionMetadata    *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DefaultOperatorSplit) Reset() {
	*x = DefaultOperatorSplit{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DefaultOperatorSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultOperatorSplit) ProtoMessage() {}

func (x *DefaultOperatorSplit) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultOperatorSplit.ProtoReflect.Descriptor instead.
func (*DefaultOperatorSplit) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{13}
}

func (x *DefaultOperatorSplit) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *DefaultOperatorSplit) GetOldOperatorBasisPoints() uint64 {
	if x != nil {
		return x.OldOperatorBasisPoints
	}
	return 0
}

func (x *DefaultOperatorSplit) GetNewOperatorBasisPoints() uint64 {
	if x != nil {
		return x.NewOperatorBasisPoints
	}
	return 0
}

func (x *DefaultOperatorSplit) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorAllocation struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OperatorSetId       uint64                 `protobuf:"varint,2,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	Avs                 string                 `protobuf:"bytes,3,opt,name=avs,proto3" json:"avs,omitempty"`
	Strategy            string                 `protobuf:"bytes,4,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Shares              string                 `protobuf:"bytes,5,opt,name=shares,proto3" json:"shares,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,6,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorAllocation) Reset() {
	*x = OperatorAllocation{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorAllocation) ProtoMessage() {}

func (x *OperatorAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorAllocation.ProtoReflect.Descriptor instead.
func (*OperatorAllocation) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{14}
}

func (x *OperatorAllocation) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *OperatorAllocation) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *OperatorAllocation) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorAllocation) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *OperatorAllocation) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *OperatorAllocation) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorAllocationDelay struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Delay               uint64                 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	EffectiveBlock      uint64                 `protobuf:"varint,3,opt,name=effective_block,json=effectiveBlock,proto3" json:"effective_block,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorAllocationDelay) Reset() {
	*x = OperatorAllocationDelay{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorAllocationDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorAllocationDelay) ProtoMessage() {}

func (x *OperatorAllocationDelay) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorAllocationDelay.ProtoReflect.Descriptor instead.
func (*OperatorAllocationDelay) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{15}
}

func (x *OperatorAllocationDelay) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *OperatorAllocationDelay) GetDelay() uint64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *OperatorAllocationDelay) GetEffectiveBlock() uint64 {
	if x != nil {
		return x.EffectiveBlock
	}
	return 0
}

func (x *OperatorAllocationDelay) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorAVSSplit struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Avs                 string                 `protobuf:"bytes,2,opt,name=avs,proto3" json:"avs,omitempty"`
	OperatorBasisPoints uint64                 `protobuf:"varint,3,opt,name=operator_basis_points,json=operatorBasisPoints,proto3" json:"operator_basis_points,omitempty"`
	AvsBasisPoints      uint64                 `protobuf:"varint,4,opt,name=avs_basis_points,json=avsBasisPoints,proto3" json:"avs_basis_points,omitempty"`
	StartTimestamp      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,7,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorAVSSplit) Reset() {
	*x = OperatorAVSSplit{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorAVSSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorAVSSplit) ProtoMessage() {}

func (x *OperatorAVSSplit) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorAVSSplit.ProtoReflect.Descriptor instead.
func (*OperatorAVSSplit) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{16}
}

func (x *OperatorAVSSplit) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *OperatorAVSSplit) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorAVSSplit) GetOperatorBasisPoints() uint64 {
	if x != nil {
		return x.OperatorBasisPoints
	}
	return 0
}

func (x *OperatorAVSSplit) GetAvsBasisPoints() uint64 {
	if x != nil {
		return x.AvsBasisPoints
	}
	return 0
}

func (x *OperatorAVSSplit) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *OperatorAVSSplit) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *OperatorAVSSplit) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorPISplit struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OperatorBasisPoints uint64                 `protobuf:"varint,2,opt,name=operator_basis_points,json=operatorBasisPoints,proto3" json:"operator_basis_points,omitempty"`
	PiBasisPoints       uint64                 `protobuf:"varint,3,opt,name=pi_basis_points,json=piBasisPoints,proto3" json:"pi_basis_points,omitempty"`
	StartTimestamp      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,6,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorPISplit) Reset() {
	*x = OperatorPISplit{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorPISplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorPISplit) ProtoMessage() {}

func (x *OperatorPISplit) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorPISplit.ProtoReflect.Descriptor instead.
func (*OperatorPISplit) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{17}
}

func (x *OperatorPISplit) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *OperatorPISplit) GetOperatorBasisPoints() uint64 {
	if x != nil {
		return x.OperatorBasisPoints
	}
	return 0
}

func (x *OperatorPISplit) GetPiBasisPoints() uint64 {
	if x != nil {
		return x.PiBasisPoints
	}
	return 0
}

func (x *OperatorPISplit) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *OperatorPISplit) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *OperatorPISplit) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

// Operator set messages
type OperatorSet struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	OperatorSetId       uint64                 `protobuf:"varint,1,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	Avs                 string                 `protobuf:"bytes,2,opt,name=avs,proto3" json:"avs,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,3,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorSet) Reset() {
	*x = OperatorSet{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSet) ProtoMessage() {}

func (x *OperatorSet) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSet.ProtoReflect.Descriptor instead.
func (*OperatorSet) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{18}
}

func (x *OperatorSet) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *OperatorSet) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorSet) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorSetOperatorRegistration struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OperatorSetId       uint64                 `protobuf:"varint,2,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	Avs                 string                 `protobuf:"bytes,3,opt,name=avs,proto3" json:"avs,omitempty"`
	Registered          bool                   `protobuf:"varint,4,opt,name=registered,proto3" json:"registered,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,5,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorSetOperatorRegistration) Reset() {
	*x = OperatorSetOperatorRegistration{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSetOperatorRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSetOperatorRegistration) ProtoMessage() {}

func (x *OperatorSetOperatorRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSetOperatorRegistration.ProtoReflect.Descriptor instead.
func (*OperatorSetOperatorRegistration) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{19}
}

func (x *OperatorSetOperatorRegistration) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *OperatorSetOperatorRegistration) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *OperatorSetOperatorRegistration) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorSetOperatorRegistration) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

func (x *OperatorSetOperatorRegistration) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorSetSplit struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	OperatorSetId          uint64                 `protobuf:"varint,1,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	Avs                    string                 `protobuf:"bytes,2,opt,name=avs,proto3" json:"avs,omitempty"`
	OperatorSetBasisPoints uint64                 `protobuf:"varint,3,opt,name=operator_set_basis_points,json=operatorSetBasisPoints,proto3" json:"operator_set_basis_points,omitempty"`
	AvsBasisPoints         uint64                 `protobuf:"varint,4,opt,name=avs_basis_points,json=avsBasisPoints,proto3" json:"avs_basis_points,omitempty"`
	StartTimestamp         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	TransactionMetadata    *TransactionMetadata   `protobuf:"bytes,7,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *OperatorSetSplit) Reset() {
	*x = OperatorSetSplit{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSetSplit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSetSplit) ProtoMessage() {}

func (x *OperatorSetSplit) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSetSplit.ProtoReflect.Descriptor instead.
func (*OperatorSetSplit) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{20}
}

func (x *OperatorSetSplit) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *OperatorSetSplit) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorSetSplit) GetOperatorSetBasisPoints() uint64 {
	if x != nil {
		return x.OperatorSetBasisPoints
	}
	return 0
}

func (x *OperatorSetSplit) GetAvsBasisPoints() uint64 {
	if x != nil {
		return x.AvsBasisPoints
	}
	return 0
}

func (x *OperatorSetSplit) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *OperatorSetSplit) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *OperatorSetSplit) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorSetStrategyRegistration struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	OperatorSetId       uint64                 `protobuf:"varint,1,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	Avs                 string                 `protobuf:"bytes,2,opt,name=avs,proto3" json:"avs,omitempty"`
	Strategy            string                 `protobuf:"bytes,3,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Registered          bool                   `protobuf:"varint,4,opt,name=registered,proto3" json:"registered,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,5,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorSetStrategyRegistration) Reset() {
	*x = OperatorSetStrategyRegistration{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorSetStrategyRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorSetStrategyRegistration) ProtoMessage() {}

func (x *OperatorSetStrategyRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorSetStrategyRegistration.ProtoReflect.Descriptor instead.
func (*OperatorSetStrategyRegistration) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{21}
}

func (x *OperatorSetStrategyRegistration) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *OperatorSetStrategyRegistration) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorSetStrategyRegistration) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *OperatorSetStrategyRegistration) GetRegistered() bool {
	if x != nil {
		return x.Registered
	}
	return false
}

func (x *OperatorSetStrategyRegistration) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

// Operator-directed reward messages
type OperatorDirectedRewardSubmission struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Avs                 string                 `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
	RewardHash          string                 `protobuf:"bytes,2,opt,name=reward_hash,json=rewardHash,proto3" json:"reward_hash,omitempty"`
	Token               string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount              string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Strategy            string                 `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	StrategyIndex       uint64                 `protobuf:"varint,6,opt,name=strategy_index,json=strategyIndex,proto3" json:"strategy_index,omitempty"`
	Multiplier          string                 `protobuf:"bytes,7,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	StartTimestamp      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Duration            uint64                 `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	Recipient           string                 `protobuf:"bytes,11,opt,name=recipient,proto3" json:"recipient,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,12,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorDirectedRewardSubmission) Reset() {
	*x = OperatorDirectedRewardSubmission{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorDirectedRewardSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorDirectedRewardSubmission) ProtoMessage() {}

func (x *OperatorDirectedRewardSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorDirectedRewardSubmission.ProtoReflect.Descriptor instead.
func (*OperatorDirectedRewardSubmission) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{22}
}

func (x *OperatorDirectedRewardSubmission) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorDirectedRewardSubmission) GetRewardHash() string {
	if x != nil {
		return x.RewardHash
	}
	return ""
}

func (x *OperatorDirectedRewardSubmission) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OperatorDirectedRewardSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperatorDirectedRewardSubmission) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *OperatorDirectedRewardSubmission) GetStrategyIndex() uint64 {
	if x != nil {
		return x.StrategyIndex
	}
	return 0
}

func (x *OperatorDirectedRewardSubmission) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *OperatorDirectedRewardSubmission) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *OperatorDirectedRewardSubmission) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *OperatorDirectedRewardSubmission) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *OperatorDirectedRewardSubmission) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *OperatorDirectedRewardSubmission) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorDirectedOperatorSetRewardSubmission struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Avs                 string                 `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
	RewardHash          string                 `protobuf:"bytes,2,opt,name=reward_hash,json=rewardHash,proto3" json:"reward_hash,omitempty"`
	Token               string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Amount              string                 `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Strategy            string                 `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	StrategyIndex       uint64                 `protobuf:"varint,6,opt,name=strategy_index,json=strategyIndex,proto3" json:"strategy_index,omitempty"`
	Multiplier          string                 `protobuf:"bytes,7,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	StartTimestamp      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Duration            uint64                 `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	OperatorSetId       uint64                 `protobuf:"varint,11,opt,name=operator_set_id,json=operatorSetId,proto3" json:"operator_set_id,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,12,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorDirectedOperatorSetRewardSubmission) Reset() {
	*x = OperatorDirectedOperatorSetRewardSubmission{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorDirectedOperatorSetRewardSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorDirectedOperatorSetRewardSubmission) ProtoMessage() {}

func (x *OperatorDirectedOperatorSetRewardSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorDirectedOperatorSetRewardSubmission.ProtoReflect.Descriptor instead.
func (*OperatorDirectedOperatorSetRewardSubmission) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{23}
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetAvs() string {
	if x != nil {
		return x.Avs
	}
	return ""
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetRewardHash() string {
	if x != nil {
		return x.RewardHash
	}
	return ""
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetStrategyIndex() uint64 {
	if x != nil {
		return x.StrategyIndex
	}
	return 0
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetOperatorSetId() uint64 {
	if x != nil {
		return x.OperatorSetId
	}
	return 0
}

func (x *OperatorDirectedOperatorSetRewardSubmission) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

// Magnitude tracking messages
type EncumberedMagnitude struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Strategy            string                 `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	EncumberedMagnitude string                 `protobuf:"bytes,3,opt,name=encumbered_magnitude,json=encumberedMagnitude,proto3" json:"encumbered_magnitude,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EncumberedMagnitude) Reset() {
	*x = EncumberedMagnitude{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncumberedMagnitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncumberedMagnitude) ProtoMessage() {}

func (x *EncumberedMagnitude) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncumberedMagnitude.ProtoReflect.Descriptor instead.
func (*EncumberedMagnitude) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{24}
}

func (x *EncumberedMagnitude) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EncumberedMagnitude) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *EncumberedMagnitude) GetEncumberedMagnitude() string {
	if x != nil {
		return x.EncumberedMagnitude
	}
	return ""
}

func (x *EncumberedMagnitude) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type OperatorMaxMagnitude struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Operator            string                 `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Strategy            string                 `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	MaxMagnitude        string                 `protobuf:"bytes,3,opt,name=max_magnitude,json=maxMagnitude,proto3" json:"max_magnitude,omitempty"`
	TransactionMetadata *TransactionMetadata   `protobuf:"bytes,4,opt,name=transaction_metadata,json=transactionMetadata,proto3" json:"transaction_metadata,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OperatorMaxMagnitude) Reset() {
	*x = OperatorMaxMagnitude{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorMaxMagnitude) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorMaxMagnitude) ProtoMessage() {}

func (x *OperatorMaxMagnitude) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorMaxMagnitude.ProtoReflect.Descriptor instead.
func (*OperatorMaxMagnitude) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{25}
}

func (x *OperatorMaxMagnitude) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *OperatorMaxMagnitude) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *OperatorMaxMagnitude) GetMaxMagnitude() string {
	if x != nil {
		return x.MaxMagnitude
	}
	return ""
}

func (x *OperatorMaxMagnitude) GetTransactionMetadata() *TransactionMetadata {
	if x != nil {
		return x.TransactionMetadata
	}
	return nil
}

type EigenStateChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Change:
	//
	//	*EigenStateChange_AvsOperatorStateChange
	//	*EigenStateChange_OperatorShareDelta
	//	*EigenStateChange_RewardSubmission
	//	*EigenStateChange_StakerDelegationChange
	//	*EigenStateChange_StakerShareDelta
	//	*EigenStateChange_SubmittedDistributionRoot
	//	*EigenStateChange_DisabledDistributionRoot
	//	*EigenStateChange_CompletedSlashingWithdrawal
	//	*EigenStateChange_QueuedSlashingWithdrawal
	//	*EigenStateChange_SlashedOperator
	//	*EigenStateChange_SlashedOperatorShares
	//	*EigenStateChange_DefaultOperatorSplit
	//	*EigenStateChange_OperatorAllocation
	//	*EigenStateChange_OperatorAllocationDelay
	//	*EigenStateChange_OperatorAvsSplit
	//	*EigenStateChange_OperatorPiSplit
	//	*EigenStateChange_OperatorSet
	//	*EigenStateChange_OperatorSetOperatorRegistration
	//	*EigenStateChange_OperatorSetSplit
	//	*EigenStateChange_OperatorSetStrategyRegistration
	//	*EigenStateChange_OperatorDirectedRewardSubmission
	//	*EigenStateChange_OperatorDirectedOperatorSetRewardSubmission
	//	*EigenStateChange_EncumberedMagnitude
	//	*EigenStateChange_OperatorMaxMagnitude
	Change        isEigenStateChange_Change `protobuf_oneof:"change"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EigenStateChange) Reset() {
	*x = EigenStateChange{}
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EigenStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EigenStateChange) ProtoMessage() {}

func (x *EigenStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EigenStateChange.ProtoReflect.Descriptor instead.
func (*EigenStateChange) Descriptor() ([]byte, []int) {
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP(), []int{26}
}

func (x *EigenStateChange) GetChange() isEigenStateChange_Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *EigenStateChange) GetAvsOperatorStateChange() *AvsOperatorStateChange {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_AvsOperatorStateChange); ok {
			return x.AvsOperatorStateChange
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorShareDelta() *OperatorShareDelta {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorShareDelta); ok {
			return x.OperatorShareDelta
		}
	}
	return nil
}

func (x *EigenStateChange) GetRewardSubmission() *RewardSubmission {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_RewardSubmission); ok {
			return x.RewardSubmission
		}
	}
	return nil
}

func (x *EigenStateChange) GetStakerDelegationChange() *StakerDelegationChange {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_StakerDelegationChange); ok {
			return x.StakerDelegationChange
		}
	}
	return nil
}

func (x *EigenStateChange) GetStakerShareDelta() *StakerShareDelta {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_StakerShareDelta); ok {
			return x.StakerShareDelta
		}
	}
	return nil
}

func (x *EigenStateChange) GetSubmittedDistributionRoot() *SubmittedDistributionRoot {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_SubmittedDistributionRoot); ok {
			return x.SubmittedDistributionRoot
		}
	}
	return nil
}

func (x *EigenStateChange) GetDisabledDistributionRoot() *DisabledDistributionRoot {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_DisabledDistributionRoot); ok {
			return x.DisabledDistributionRoot
		}
	}
	return nil
}

func (x *EigenStateChange) GetCompletedSlashingWithdrawal() *CompletedSlashingWithdrawal {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_CompletedSlashingWithdrawal); ok {
			return x.CompletedSlashingWithdrawal
		}
	}
	return nil
}

func (x *EigenStateChange) GetQueuedSlashingWithdrawal() *QueuedSlashingWithdrawal {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_QueuedSlashingWithdrawal); ok {
			return x.QueuedSlashingWithdrawal
		}
	}
	return nil
}

func (x *EigenStateChange) GetSlashedOperator() *SlashedOperator {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_SlashedOperator); ok {
			return x.SlashedOperator
		}
	}
	return nil
}

func (x *EigenStateChange) GetSlashedOperatorShares() *SlashedOperatorShares {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_SlashedOperatorShares); ok {
			return x.SlashedOperatorShares
		}
	}
	return nil
}

func (x *EigenStateChange) GetDefaultOperatorSplit() *DefaultOperatorSplit {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_DefaultOperatorSplit); ok {
			return x.DefaultOperatorSplit
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorAllocation() *OperatorAllocation {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorAllocation); ok {
			return x.OperatorAllocation
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorAllocationDelay() *OperatorAllocationDelay {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorAllocationDelay); ok {
			return x.OperatorAllocationDelay
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorAvsSplit() *OperatorAVSSplit {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorAvsSplit); ok {
			return x.OperatorAvsSplit
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorPiSplit() *OperatorPISplit {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorPiSplit); ok {
			return x.OperatorPiSplit
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorSet() *OperatorSet {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorSet); ok {
			return x.OperatorSet
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorSetOperatorRegistration() *OperatorSetOperatorRegistration {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorSetOperatorRegistration); ok {
			return x.OperatorSetOperatorRegistration
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorSetSplit() *OperatorSetSplit {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorSetSplit); ok {
			return x.OperatorSetSplit
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorSetStrategyRegistration() *OperatorSetStrategyRegistration {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorSetStrategyRegistration); ok {
			return x.OperatorSetStrategyRegistration
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorDirectedRewardSubmission() *OperatorDirectedRewardSubmission {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorDirectedRewardSubmission); ok {
			return x.OperatorDirectedRewardSubmission
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorDirectedOperatorSetRewardSubmission() *OperatorDirectedOperatorSetRewardSubmission {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorDirectedOperatorSetRewardSubmission); ok {
			return x.OperatorDirectedOperatorSetRewardSubmission
		}
	}
	return nil
}

func (x *EigenStateChange) GetEncumberedMagnitude() *EncumberedMagnitude {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_EncumberedMagnitude); ok {
			return x.EncumberedMagnitude
		}
	}
	return nil
}

func (x *EigenStateChange) GetOperatorMaxMagnitude() *OperatorMaxMagnitude {
	if x != nil {
		if x, ok := x.Change.(*EigenStateChange_OperatorMaxMagnitude); ok {
			return x.OperatorMaxMagnitude
		}
	}
	return nil
}

type isEigenStateChange_Change interface {
	isEigenStateChange_Change()
}

type EigenStateChange_AvsOperatorStateChange struct {
	AvsOperatorStateChange *AvsOperatorStateChange `protobuf:"bytes,1,opt,name=avs_operator_state_change,json=avsOperatorStateChange,proto3,oneof"`
}

type EigenStateChange_OperatorShareDelta struct {
	OperatorShareDelta *OperatorShareDelta `protobuf:"bytes,2,opt,name=operator_share_delta,json=operatorShareDelta,proto3,oneof"`
}

type EigenStateChange_RewardSubmission struct {
	RewardSubmission *RewardSubmission `protobuf:"bytes,3,opt,name=reward_submission,json=rewardSubmission,proto3,oneof"`
}

type EigenStateChange_StakerDelegationChange struct {
	StakerDelegationChange *StakerDelegationChange `protobuf:"bytes,4,opt,name=staker_delegation_change,json=stakerDelegationChange,proto3,oneof"`
}

type EigenStateChange_StakerShareDelta struct {
	StakerShareDelta *StakerShareDelta `protobuf:"bytes,5,opt,name=staker_share_delta,json=stakerShareDelta,proto3,oneof"`
}

type EigenStateChange_SubmittedDistributionRoot struct {
	SubmittedDistributionRoot *SubmittedDistributionRoot `protobuf:"bytes,6,opt,name=submitted_distribution_root,json=submittedDistributionRoot,proto3,oneof"`
}

type EigenStateChange_DisabledDistributionRoot struct {
	DisabledDistributionRoot *DisabledDistributionRoot `protobuf:"bytes,7,opt,name=disabled_distribution_root,json=disabledDistributionRoot,proto3,oneof"`
}

type EigenStateChange_CompletedSlashingWithdrawal struct {
	// slashing models
	CompletedSlashingWithdrawal *CompletedSlashingWithdrawal `protobuf:"bytes,8,opt,name=completed_slashing_withdrawal,json=completedSlashingWithdrawal,proto3,oneof"`
}

type EigenStateChange_QueuedSlashingWithdrawal struct {
	QueuedSlashingWithdrawal *QueuedSlashingWithdrawal `protobuf:"bytes,9,opt,name=queued_slashing_withdrawal,json=queuedSlashingWithdrawal,proto3,oneof"`
}

type EigenStateChange_SlashedOperator struct {
	SlashedOperator *SlashedOperator `protobuf:"bytes,10,opt,name=slashed_operator,json=slashedOperator,proto3,oneof"`
}

type EigenStateChange_SlashedOperatorShares struct {
	SlashedOperatorShares *SlashedOperatorShares `protobuf:"bytes,11,opt,name=slashed_operator_shares,json=slashedOperatorShares,proto3,oneof"`
}

type EigenStateChange_DefaultOperatorSplit struct {
	// operator allocations
	DefaultOperatorSplit *DefaultOperatorSplit `protobuf:"bytes,12,opt,name=default_operator_split,json=defaultOperatorSplit,proto3,oneof"`
}

type EigenStateChange_OperatorAllocation struct {
	OperatorAllocation *OperatorAllocation `protobuf:"bytes,13,opt,name=operator_allocation,json=operatorAllocation,proto3,oneof"`
}

type EigenStateChange_OperatorAllocationDelay struct {
	OperatorAllocationDelay *OperatorAllocationDelay `protobuf:"bytes,14,opt,name=operator_allocation_delay,json=operatorAllocationDelay,proto3,oneof"`
}

type EigenStateChange_OperatorAvsSplit struct {
	OperatorAvsSplit *OperatorAVSSplit `protobuf:"bytes,15,opt,name=operator_avs_split,json=operatorAvsSplit,proto3,oneof"`
}

type EigenStateChange_OperatorPiSplit struct {
	OperatorPiSplit *OperatorPISplit `protobuf:"bytes,16,opt,name=operator_pi_split,json=operatorPiSplit,proto3,oneof"`
}

type EigenStateChange_OperatorSet struct {
	// operator sets
	OperatorSet *OperatorSet `protobuf:"bytes,17,opt,name=operator_set,json=operatorSet,proto3,oneof"`
}

type EigenStateChange_OperatorSetOperatorRegistration struct {
	OperatorSetOperatorRegistration *OperatorSetOperatorRegistration `protobuf:"bytes,18,opt,name=operator_set_operator_registration,json=operatorSetOperatorRegistration,proto3,oneof"`
}

type EigenStateChange_OperatorSetSplit struct {
	OperatorSetSplit *OperatorSetSplit `protobuf:"bytes,19,opt,name=operator_set_split,json=operatorSetSplit,proto3,oneof"`
}

type EigenStateChange_OperatorSetStrategyRegistration struct {
	OperatorSetStrategyRegistration *OperatorSetStrategyRegistration `protobuf:"bytes,20,opt,name=operator_set_strategy_registration,json=operatorSetStrategyRegistration,proto3,oneof"`
}

type EigenStateChange_OperatorDirectedRewardSubmission struct {
	// operator-directed rewards
	OperatorDirectedRewardSubmission *OperatorDirectedRewardSubmission `protobuf:"bytes,21,opt,name=operator_directed_reward_submission,json=operatorDirectedRewardSubmission,proto3,oneof"`
}

type EigenStateChange_OperatorDirectedOperatorSetRewardSubmission struct {
	OperatorDirectedOperatorSetRewardSubmission *OperatorDirectedOperatorSetRewardSubmission `protobuf:"bytes,22,opt,name=operator_directed_operator_set_reward_submission,json=operatorDirectedOperatorSetRewardSubmission,proto3,oneof"`
}

type EigenStateChange_EncumberedMagnitude struct {
	// operator magnitudes
	EncumberedMagnitude *EncumberedMagnitude `protobuf:"bytes,23,opt,name=encumbered_magnitude,json=encumberedMagnitude,proto3,oneof"`
}

type EigenStateChange_OperatorMaxMagnitude struct {
	OperatorMaxMagnitude *OperatorMaxMagnitude `protobuf:"bytes,24,opt,name=operator_max_magnitude,json=operatorMaxMagnitude,proto3,oneof"`
}

func (*EigenStateChange_AvsOperatorStateChange) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorShareDelta) isEigenStateChange_Change() {}

func (*EigenStateChange_RewardSubmission) isEigenStateChange_Change() {}

func (*EigenStateChange_StakerDelegationChange) isEigenStateChange_Change() {}

func (*EigenStateChange_StakerShareDelta) isEigenStateChange_Change() {}

func (*EigenStateChange_SubmittedDistributionRoot) isEigenStateChange_Change() {}

func (*EigenStateChange_DisabledDistributionRoot) isEigenStateChange_Change() {}

func (*EigenStateChange_CompletedSlashingWithdrawal) isEigenStateChange_Change() {}

func (*EigenStateChange_QueuedSlashingWithdrawal) isEigenStateChange_Change() {}

func (*EigenStateChange_SlashedOperator) isEigenStateChange_Change() {}

func (*EigenStateChange_SlashedOperatorShares) isEigenStateChange_Change() {}

func (*EigenStateChange_DefaultOperatorSplit) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorAllocation) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorAllocationDelay) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorAvsSplit) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorPiSplit) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorSet) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorSetOperatorRegistration) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorSetSplit) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorSetStrategyRegistration) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorDirectedRewardSubmission) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorDirectedOperatorSetRewardSubmission) isEigenStateChange_Change() {}

func (*EigenStateChange_EncumberedMagnitude) isEigenStateChange_Change() {}

func (*EigenStateChange_OperatorMaxMagnitude) isEigenStateChange_Change() {}

var File_eigenlayer_sidecar_v1_eigenState_eigenState_proto protoreflect.FileDescriptor

var file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDesc = string([]byte{
	0x0a, 0x31, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7a, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x74, 0x68,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x65,
	0x74, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x74, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x22, 0x80, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x41, 0x76, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x02, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfb, 0x04, 0x0a, 0x10, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37,
	0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x56, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x4b, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x41,
	0x52, 0x4e, 0x45, 0x52, 0x53, 0x10, 0x02, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc9,
	0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xef, 0x03, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x17, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a,
	0x18, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72,
	0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x68, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe6, 0x02, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x53, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x76, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1,
	0x01, 0x0a, 0x0f, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x6f,
	0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x02, 0x0a, 0x12,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xde, 0x01, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x68, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x03, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x56, 0x53, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x76, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x73, 0x42, 0x61, 0x73,
	0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x68,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x02, 0x0a, 0x0f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x49, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x76, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x68,
	0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x76, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x03, 0x0a,
	0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x69, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x73, 0x5f, 0x62, 0x61,
	0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x61, 0x76, 0x73, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x81, 0x02, 0x0a, 0x1f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x76, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x04, 0x0a, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa5, 0x04, 0x0a, 0x2b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x76, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xea, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x31, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65,
	0x6e, 0x63, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x01, 0x0a,
	0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x67, 0x6e,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xaa, 0x16, 0x0a,
	0x10, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x75, 0x0a, 0x19, 0x61, 0x76, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x76, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x61, 0x76, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x61, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x12, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x7d, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x7a,
	0x0a, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x1d, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x12, 0x7a, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x18, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x10,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6c, 0x61,
	0x73, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x17,
	0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x15, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x6e, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x67, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x62, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x76,
	0x73, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x56, 0x53, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x76, 0x73,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x49, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x69, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x90, 0x01, 0x0a, 0x22, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x90, 0x01, 0x0a, 0x22, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x1f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x93, 0x01, 0x0a, 0x23, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb6, 0x01, 0x0a, 0x30, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x2b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x6a, 0x0a, 0x14, 0x65, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x48, 0x00, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x6e, 0x0a, 0x16, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x61,
	0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0xab, 0x02, 0x0a, 0x24, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0f, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0xa2, 0x02, 0x04, 0x45, 0x53, 0x56, 0x45, 0xaa, 0x02, 0x20, 0x45,
	0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x2e, 0x56, 0x31, 0x2e, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0xca,
	0x02, 0x20, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x53, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0xe2, 0x02, 0x2c, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x45, 0x69, 0x67, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x23, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x45, 0x69, 0x67,
	0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescOnce sync.Once
	file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescData []byte
)

func file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescGZIP() []byte {
	file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescOnce.Do(func() {
		file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDesc), len(file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDesc)))
	})
	return file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDescData
}

var file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_goTypes = []any{
	(RewardSubmission_RewardType)(0),                    // 0: eigenlayer.sidecar.v1.eigenState.RewardSubmission.RewardType
	(*StateRoot)(nil),                                   // 1: eigenlayer.sidecar.v1.eigenState.StateRoot
	(*TransactionMetadata)(nil),                         // 2: eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	(*AvsOperatorStateChange)(nil),                      // 3: eigenlayer.sidecar.v1.eigenState.AvsOperatorStateChange
	(*OperatorShareDelta)(nil),                          // 4: eigenlayer.sidecar.v1.eigenState.OperatorShareDelta
	(*RewardSubmission)(nil),                            // 5: eigenlayer.sidecar.v1.eigenState.RewardSubmission
	(*StakerDelegationChange)(nil),                      // 6: eigenlayer.sidecar.v1.eigenState.StakerDelegationChange
	(*StakerShareDelta)(nil),                            // 7: eigenlayer.sidecar.v1.eigenState.StakerShareDelta
	(*SubmittedDistributionRoot)(nil),                   // 8: eigenlayer.sidecar.v1.eigenState.SubmittedDistributionRoot
	(*DisabledDistributionRoot)(nil),                    // 9: eigenlayer.sidecar.v1.eigenState.DisabledDistributionRoot
	(*CompletedSlashingWithdrawal)(nil),                 // 10: eigenlayer.sidecar.v1.eigenState.CompletedSlashingWithdrawal
	(*QueuedSlashingWithdrawal)(nil),                    // 11: eigenlayer.sidecar.v1.eigenState.QueuedSlashingWithdrawal
	(*SlashedOperator)(nil),                             // 12: eigenlayer.sidecar.v1.eigenState.SlashedOperator
	(*SlashedOperatorShares)(nil),                       // 13: eigenlayer.sidecar.v1.eigenState.SlashedOperatorShares
	(*DefaultOperatorSplit)(nil),                        // 14: eigenlayer.sidecar.v1.eigenState.DefaultOperatorSplit
	(*OperatorAllocation)(nil),                          // 15: eigenlayer.sidecar.v1.eigenState.OperatorAllocation
	(*OperatorAllocationDelay)(nil),                     // 16: eigenlayer.sidecar.v1.eigenState.OperatorAllocationDelay
	(*OperatorAVSSplit)(nil),                            // 17: eigenlayer.sidecar.v1.eigenState.OperatorAVSSplit
	(*OperatorPISplit)(nil),                             // 18: eigenlayer.sidecar.v1.eigenState.OperatorPISplit
	(*OperatorSet)(nil),                                 // 19: eigenlayer.sidecar.v1.eigenState.OperatorSet
	(*OperatorSetOperatorRegistration)(nil),             // 20: eigenlayer.sidecar.v1.eigenState.OperatorSetOperatorRegistration
	(*OperatorSetSplit)(nil),                            // 21: eigenlayer.sidecar.v1.eigenState.OperatorSetSplit
	(*OperatorSetStrategyRegistration)(nil),             // 22: eigenlayer.sidecar.v1.eigenState.OperatorSetStrategyRegistration
	(*OperatorDirectedRewardSubmission)(nil),            // 23: eigenlayer.sidecar.v1.eigenState.OperatorDirectedRewardSubmission
	(*OperatorDirectedOperatorSetRewardSubmission)(nil), // 24: eigenlayer.sidecar.v1.eigenState.OperatorDirectedOperatorSetRewardSubmission
	(*EncumberedMagnitude)(nil),                         // 25: eigenlayer.sidecar.v1.eigenState.EncumberedMagnitude
	(*OperatorMaxMagnitude)(nil),                        // 26: eigenlayer.sidecar.v1.eigenState.OperatorMaxMagnitude
	(*EigenStateChange)(nil),                            // 27: eigenlayer.sidecar.v1.eigenState.EigenStateChange
	(*timestamppb.Timestamp)(nil),                       // 28: google.protobuf.Timestamp
}
var file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_depIdxs = []int32{
	2,  // 0: eigenlayer.sidecar.v1.eigenState.AvsOperatorStateChange.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 1: eigenlayer.sidecar.v1.eigenState.OperatorShareDelta.block_time:type_name -> google.protobuf.Timestamp
	2,  // 2: eigenlayer.sidecar.v1.eigenState.OperatorShareDelta.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 3: eigenlayer.sidecar.v1.eigenState.RewardSubmission.start_timestamp:type_name -> google.protobuf.Timestamp
	28, // 4: eigenlayer.sidecar.v1.eigenState.RewardSubmission.end_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 5: eigenlayer.sidecar.v1.eigenState.RewardSubmission.reward_type:type_name -> eigenlayer.sidecar.v1.eigenState.RewardSubmission.RewardType
	2,  // 6: eigenlayer.sidecar.v1.eigenState.RewardSubmission.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 7: eigenlayer.sidecar.v1.eigenState.StakerDelegationChange.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 8: eigenlayer.sidecar.v1.eigenState.StakerShareDelta.block_time:type_name -> google.protobuf.Timestamp
	2,  // 9: eigenlayer.sidecar.v1.eigenState.StakerShareDelta.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 10: eigenlayer.sidecar.v1.eigenState.SubmittedDistributionRoot.rewards_calculation_end:type_name -> google.protobuf.Timestamp
	28, // 11: eigenlayer.sidecar.v1.eigenState.SubmittedDistributionRoot.activated_at:type_name -> google.protobuf.Timestamp
	2,  // 12: eigenlayer.sidecar.v1.eigenState.SubmittedDistributionRoot.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 13: eigenlayer.sidecar.v1.eigenState.DisabledDistributionRoot.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 14: eigenlayer.sidecar.v1.eigenState.CompletedSlashingWithdrawal.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 15: eigenlayer.sidecar.v1.eigenState.QueuedSlashingWithdrawal.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 16: eigenlayer.sidecar.v1.eigenState.SlashedOperator.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 17: eigenlayer.sidecar.v1.eigenState.SlashedOperatorShares.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 18: eigenlayer.sidecar.v1.eigenState.DefaultOperatorSplit.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 19: eigenlayer.sidecar.v1.eigenState.OperatorAllocation.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 20: eigenlayer.sidecar.v1.eigenState.OperatorAllocationDelay.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 21: eigenlayer.sidecar.v1.eigenState.OperatorAVSSplit.start_timestamp:type_name -> google.protobuf.Timestamp
	28, // 22: eigenlayer.sidecar.v1.eigenState.OperatorAVSSplit.end_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 23: eigenlayer.sidecar.v1.eigenState.OperatorAVSSplit.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 24: eigenlayer.sidecar.v1.eigenState.OperatorPISplit.start_timestamp:type_name -> google.protobuf.Timestamp
	28, // 25: eigenlayer.sidecar.v1.eigenState.OperatorPISplit.end_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 26: eigenlayer.sidecar.v1.eigenState.OperatorPISplit.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 27: eigenlayer.sidecar.v1.eigenState.OperatorSet.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 28: eigenlayer.sidecar.v1.eigenState.OperatorSetOperatorRegistration.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 29: eigenlayer.sidecar.v1.eigenState.OperatorSetSplit.start_timestamp:type_name -> google.protobuf.Timestamp
	28, // 30: eigenlayer.sidecar.v1.eigenState.OperatorSetSplit.end_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 31: eigenlayer.sidecar.v1.eigenState.OperatorSetSplit.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 32: eigenlayer.sidecar.v1.eigenState.OperatorSetStrategyRegistration.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 33: eigenlayer.sidecar.v1.eigenState.OperatorDirectedRewardSubmission.start_timestamp:type_name -> google.protobuf.Timestamp
	28, // 34: eigenlayer.sidecar.v1.eigenState.OperatorDirectedRewardSubmission.end_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 35: eigenlayer.sidecar.v1.eigenState.OperatorDirectedRewardSubmission.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	28, // 36: eigenlayer.sidecar.v1.eigenState.OperatorDirectedOperatorSetRewardSubmission.start_timestamp:type_name -> google.protobuf.Timestamp
	28, // 37: eigenlayer.sidecar.v1.eigenState.OperatorDirectedOperatorSetRewardSubmission.end_timestamp:type_name -> google.protobuf.Timestamp
	2,  // 38: eigenlayer.sidecar.v1.eigenState.OperatorDirectedOperatorSetRewardSubmission.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 39: eigenlayer.sidecar.v1.eigenState.EncumberedMagnitude.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	2,  // 40: eigenlayer.sidecar.v1.eigenState.OperatorMaxMagnitude.transaction_metadata:type_name -> eigenlayer.sidecar.v1.eigenState.TransactionMetadata
	3,  // 41: eigenlayer.sidecar.v1.eigenState.EigenStateChange.avs_operator_state_change:type_name -> eigenlayer.sidecar.v1.eigenState.AvsOperatorStateChange
	4,  // 42: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_share_delta:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorShareDelta
	5,  // 43: eigenlayer.sidecar.v1.eigenState.EigenStateChange.reward_submission:type_name -> eigenlayer.sidecar.v1.eigenState.RewardSubmission
	6,  // 44: eigenlayer.sidecar.v1.eigenState.EigenStateChange.staker_delegation_change:type_name -> eigenlayer.sidecar.v1.eigenState.StakerDelegationChange
	7,  // 45: eigenlayer.sidecar.v1.eigenState.EigenStateChange.staker_share_delta:type_name -> eigenlayer.sidecar.v1.eigenState.StakerShareDelta
	8,  // 46: eigenlayer.sidecar.v1.eigenState.EigenStateChange.submitted_distribution_root:type_name -> eigenlayer.sidecar.v1.eigenState.SubmittedDistributionRoot
	9,  // 47: eigenlayer.sidecar.v1.eigenState.EigenStateChange.disabled_distribution_root:type_name -> eigenlayer.sidecar.v1.eigenState.DisabledDistributionRoot
	10, // 48: eigenlayer.sidecar.v1.eigenState.EigenStateChange.completed_slashing_withdrawal:type_name -> eigenlayer.sidecar.v1.eigenState.CompletedSlashingWithdrawal
	11, // 49: eigenlayer.sidecar.v1.eigenState.EigenStateChange.queued_slashing_withdrawal:type_name -> eigenlayer.sidecar.v1.eigenState.QueuedSlashingWithdrawal
	12, // 50: eigenlayer.sidecar.v1.eigenState.EigenStateChange.slashed_operator:type_name -> eigenlayer.sidecar.v1.eigenState.SlashedOperator
	13, // 51: eigenlayer.sidecar.v1.eigenState.EigenStateChange.slashed_operator_shares:type_name -> eigenlayer.sidecar.v1.eigenState.SlashedOperatorShares
	14, // 52: eigenlayer.sidecar.v1.eigenState.EigenStateChange.default_operator_split:type_name -> eigenlayer.sidecar.v1.eigenState.DefaultOperatorSplit
	15, // 53: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_allocation:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorAllocation
	16, // 54: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_allocation_delay:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorAllocationDelay
	17, // 55: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_avs_split:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorAVSSplit
	18, // 56: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_pi_split:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorPISplit
	19, // 57: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_set:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorSet
	20, // 58: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_set_operator_registration:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorSetOperatorRegistration
	21, // 59: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_set_split:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorSetSplit
	22, // 60: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_set_strategy_registration:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorSetStrategyRegistration
	23, // 61: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_directed_reward_submission:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorDirectedRewardSubmission
	24, // 62: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_directed_operator_set_reward_submission:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorDirectedOperatorSetRewardSubmission
	25, // 63: eigenlayer.sidecar.v1.eigenState.EigenStateChange.encumbered_magnitude:type_name -> eigenlayer.sidecar.v1.eigenState.EncumberedMagnitude
	26, // 64: eigenlayer.sidecar.v1.eigenState.EigenStateChange.operator_max_magnitude:type_name -> eigenlayer.sidecar.v1.eigenState.OperatorMaxMagnitude
	65, // [65:65] is the sub-list for method output_type
	65, // [65:65] is the sub-list for method input_type
	65, // [65:65] is the sub-list for extension type_name
	65, // [65:65] is the sub-list for extension extendee
	0,  // [0:65] is the sub-list for field type_name
}

func init() { file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_init() }
func file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_init() {
	if File_eigenlayer_sidecar_v1_eigenState_eigenState_proto != nil {
		return
	}
	file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes[26].OneofWrappers = []any{
		(*EigenStateChange_AvsOperatorStateChange)(nil),
		(*EigenStateChange_OperatorShareDelta)(nil),
		(*EigenStateChange_RewardSubmission)(nil),
		(*EigenStateChange_StakerDelegationChange)(nil),
		(*EigenStateChange_StakerShareDelta)(nil),
		(*EigenStateChange_SubmittedDistributionRoot)(nil),
		(*EigenStateChange_DisabledDistributionRoot)(nil),
		(*EigenStateChange_CompletedSlashingWithdrawal)(nil),
		(*EigenStateChange_QueuedSlashingWithdrawal)(nil),
		(*EigenStateChange_SlashedOperator)(nil),
		(*EigenStateChange_SlashedOperatorShares)(nil),
		(*EigenStateChange_DefaultOperatorSplit)(nil),
		(*EigenStateChange_OperatorAllocation)(nil),
		(*EigenStateChange_OperatorAllocationDelay)(nil),
		(*EigenStateChange_OperatorAvsSplit)(nil),
		(*EigenStateChange_OperatorPiSplit)(nil),
		(*EigenStateChange_OperatorSet)(nil),
		(*EigenStateChange_OperatorSetOperatorRegistration)(nil),
		(*EigenStateChange_OperatorSetSplit)(nil),
		(*EigenStateChange_OperatorSetStrategyRegistration)(nil),
		(*EigenStateChange_OperatorDirectedRewardSubmission)(nil),
		(*EigenStateChange_OperatorDirectedOperatorSetRewardSubmission)(nil),
		(*EigenStateChange_EncumberedMagnitude)(nil),
		(*EigenStateChange_OperatorMaxMagnitude)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDesc), len(file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_goTypes,
		DependencyIndexes: file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_depIdxs,
		EnumInfos:         file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_enumTypes,
		MessageInfos:      file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_msgTypes,
	}.Build()
	File_eigenlayer_sidecar_v1_eigenState_eigenState_proto = out.File
	file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_goTypes = nil
	file_eigenlayer_sidecar_v1_eigenState_eigenState_proto_depIdxs = nil
}
