// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/sidecar/v1/events/rpc.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Events_StreamEigenStateChanges_FullMethodName = "/eigenlayer.sidecar.v1.events.Events/StreamEigenStateChanges"
	Events_StreamIndexedBlocks_FullMethodName     = "/eigenlayer.sidecar.v1.events.Events/StreamIndexedBlocks"
)

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventsClient interface {
	StreamEigenStateChanges(ctx context.Context, in *StreamEigenStateChangesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEigenStateChangesResponse], error)
	StreamIndexedBlocks(ctx context.Context, in *StreamIndexedBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamIndexedBlocksResponse], error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) StreamEigenStateChanges(ctx context.Context, in *StreamEigenStateChangesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEigenStateChangesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Events_ServiceDesc.Streams[0], Events_StreamEigenStateChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEigenStateChangesRequest, StreamEigenStateChangesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Events_StreamEigenStateChangesClient = grpc.ServerStreamingClient[StreamEigenStateChangesResponse]

func (c *eventsClient) StreamIndexedBlocks(ctx context.Context, in *StreamIndexedBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamIndexedBlocksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Events_ServiceDesc.Streams[1], Events_StreamIndexedBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamIndexedBlocksRequest, StreamIndexedBlocksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Events_StreamIndexedBlocksClient = grpc.ServerStreamingClient[StreamIndexedBlocksResponse]

// EventsServer is the server API for Events service.
// All implementations should embed UnimplementedEventsServer
// for forward compatibility.
type EventsServer interface {
	StreamEigenStateChanges(*StreamEigenStateChangesRequest, grpc.ServerStreamingServer[StreamEigenStateChangesResponse]) error
	StreamIndexedBlocks(*StreamIndexedBlocksRequest, grpc.ServerStreamingServer[StreamIndexedBlocksResponse]) error
}

// UnimplementedEventsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventsServer struct{}

func (UnimplementedEventsServer) StreamEigenStateChanges(*StreamEigenStateChangesRequest, grpc.ServerStreamingServer[StreamEigenStateChangesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEigenStateChanges not implemented")
}
func (UnimplementedEventsServer) StreamIndexedBlocks(*StreamIndexedBlocksRequest, grpc.ServerStreamingServer[StreamIndexedBlocksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamIndexedBlocks not implemented")
}
func (UnimplementedEventsServer) testEmbeddedByValue() {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	// If the following call pancis, it indicates UnimplementedEventsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_StreamEigenStateChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEigenStateChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).StreamEigenStateChanges(m, &grpc.GenericServerStream[StreamEigenStateChangesRequest, StreamEigenStateChangesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Events_StreamEigenStateChangesServer = grpc.ServerStreamingServer[StreamEigenStateChangesResponse]

func _Events_StreamIndexedBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamIndexedBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventsServer).StreamIndexedBlocks(m, &grpc.GenericServerStream[StreamIndexedBlocksRequest, StreamIndexedBlocksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Events_StreamIndexedBlocksServer = grpc.ServerStreamingServer[StreamIndexedBlocksResponse]

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.sidecar.v1.events.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEigenStateChanges",
			Handler:       _Events_StreamEigenStateChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamIndexedBlocks",
			Handler:       _Events_StreamIndexedBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eigenlayer/sidecar/v1/events/rpc.proto",
}
