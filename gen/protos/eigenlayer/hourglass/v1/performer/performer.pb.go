// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: eigenlayer/hourglass/v1/performer/performer.proto

package performer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PerformerStatus int32

const (
	PerformerStatus_READY_FOR_SYNC PerformerStatus = 0
	PerformerStatus_READY_FOR_TASK PerformerStatus = 1
)

// Enum value maps for PerformerStatus.
var (
	PerformerStatus_name = map[int32]string{
		0: "READY_FOR_SYNC",
		1: "READY_FOR_TASK",
	}
	PerformerStatus_value = map[string]int32{
		"READY_FOR_SYNC": 0,
		"READY_FOR_TASK": 1,
	}
)

func (x PerformerStatus) Enum() *PerformerStatus {
	p := new(PerformerStatus)
	*p = x
	return p
}

func (x PerformerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_enumTypes[0].Descriptor()
}

func (PerformerStatus) Type() protoreflect.EnumType {
	return &file_eigenlayer_hourglass_v1_performer_performer_proto_enumTypes[0]
}

func (x PerformerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformerStatus.Descriptor instead.
func (PerformerStatus) EnumDescriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP(), []int{0}
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        PerformerStatus        `protobuf:"varint,1,opt,name=status,proto3,enum=eigenlayer.hourglass.v1.performer.PerformerStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckResponse) GetStatus() PerformerStatus {
	if x != nil {
		return x.Status
	}
	return PerformerStatus_READY_FOR_SYNC
}

type StartSyncRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartSyncRequest) Reset() {
	*x = StartSyncRequest{}
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSyncRequest) ProtoMessage() {}

func (x *StartSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSyncRequest.ProtoReflect.Descriptor instead.
func (*StartSyncRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP(), []int{2}
}

func (x *StartSyncRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type StartSyncResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartSyncResponse) Reset() {
	*x = StartSyncResponse{}
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSyncResponse) ProtoMessage() {}

func (x *StartSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSyncResponse.ProtoReflect.Descriptor instead.
func (*StartSyncResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP(), []int{3}
}

type TaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        []byte                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP(), []int{4}
}

func (x *TaskRequest) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type TaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        []byte                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Result        []byte                 `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP(), []int{5}
}

func (x *TaskResponse) GetTaskId() []byte {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_eigenlayer_hourglass_v1_performer_performer_proto protoreflect.FileDescriptor

var file_eigenlayer_hourglass_v1_performer_performer_proto_rawDesc = string([]byte{
	0x0a, 0x31, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x68, 0x6f, 0x75,
	0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x21, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x13,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x2c, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x13, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x40, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3f, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x39, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01,
	0x32, 0xfe, 0x02, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x65, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x33, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x70, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0xb0, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x0e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c,
	0x61, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0xa2, 0x02,
	0x04, 0x45, 0x48, 0x56, 0x50, 0xaa, 0x02, 0x21, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x56, 0x31, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0xca, 0x02, 0x21, 0x45, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0xe2, 0x02, 0x2d,
	0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x48, 0x6f, 0x75, 0x72, 0x67,
	0x6c, 0x61, 0x73, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x24,
	0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x48, 0x6f, 0x75, 0x72,
	0x67, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x3a, 0x3a, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescOnce sync.Once
	file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescData []byte
)

func file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescGZIP() []byte {
	file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescOnce.Do(func() {
		file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eigenlayer_hourglass_v1_performer_performer_proto_rawDesc), len(file_eigenlayer_hourglass_v1_performer_performer_proto_rawDesc)))
	})
	return file_eigenlayer_hourglass_v1_performer_performer_proto_rawDescData
}

var file_eigenlayer_hourglass_v1_performer_performer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_eigenlayer_hourglass_v1_performer_performer_proto_goTypes = []any{
	(PerformerStatus)(0),        // 0: eigenlayer.hourglass.v1.performer.PerformerStatus
	(*HealthCheckRequest)(nil),  // 1: eigenlayer.hourglass.v1.performer.HealthCheckRequest
	(*HealthCheckResponse)(nil), // 2: eigenlayer.hourglass.v1.performer.HealthCheckResponse
	(*StartSyncRequest)(nil),    // 3: eigenlayer.hourglass.v1.performer.StartSyncRequest
	(*StartSyncResponse)(nil),   // 4: eigenlayer.hourglass.v1.performer.StartSyncResponse
	(*TaskRequest)(nil),         // 5: eigenlayer.hourglass.v1.performer.TaskRequest
	(*TaskResponse)(nil),        // 6: eigenlayer.hourglass.v1.performer.TaskResponse
}
var file_eigenlayer_hourglass_v1_performer_performer_proto_depIdxs = []int32{
	0, // 0: eigenlayer.hourglass.v1.performer.HealthCheckResponse.status:type_name -> eigenlayer.hourglass.v1.performer.PerformerStatus
	1, // 1: eigenlayer.hourglass.v1.performer.PerformerService.HealthCheck:input_type -> eigenlayer.hourglass.v1.performer.HealthCheckRequest
	3, // 2: eigenlayer.hourglass.v1.performer.PerformerService.StartSync:input_type -> eigenlayer.hourglass.v1.performer.StartSyncRequest
	5, // 3: eigenlayer.hourglass.v1.performer.PerformerService.ExecuteTask:input_type -> eigenlayer.hourglass.v1.performer.TaskRequest
	2, // 4: eigenlayer.hourglass.v1.performer.PerformerService.HealthCheck:output_type -> eigenlayer.hourglass.v1.performer.HealthCheckResponse
	4, // 5: eigenlayer.hourglass.v1.performer.PerformerService.StartSync:output_type -> eigenlayer.hourglass.v1.performer.StartSyncResponse
	6, // 6: eigenlayer.hourglass.v1.performer.PerformerService.ExecuteTask:output_type -> eigenlayer.hourglass.v1.performer.TaskResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_eigenlayer_hourglass_v1_performer_performer_proto_init() }
func file_eigenlayer_hourglass_v1_performer_performer_proto_init() {
	if File_eigenlayer_hourglass_v1_performer_performer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eigenlayer_hourglass_v1_performer_performer_proto_rawDesc), len(file_eigenlayer_hourglass_v1_performer_performer_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eigenlayer_hourglass_v1_performer_performer_proto_goTypes,
		DependencyIndexes: file_eigenlayer_hourglass_v1_performer_performer_proto_depIdxs,
		EnumInfos:         file_eigenlayer_hourglass_v1_performer_performer_proto_enumTypes,
		MessageInfos:      file_eigenlayer_hourglass_v1_performer_performer_proto_msgTypes,
	}.Build()
	File_eigenlayer_hourglass_v1_performer_performer_proto = out.File
	file_eigenlayer_hourglass_v1_performer_performer_proto_goTypes = nil
	file_eigenlayer_hourglass_v1_performer_performer_proto_depIdxs = nil
}
