// Code generated by protoc-gen-grpc-gateway. DO NOT EDIT.
// source: eigenlayer/pds/v1/aprs.proto

/*
Package v1 is a reverse proxy.

It translates gRPC into RESTful JSON APIs.
*/
package v1

import (
	"context"
	"errors"
	"io"
	"net/http"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/grpc-ecosystem/grpc-gateway/v2/utilities"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/grpclog"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// Suppress "imported and not used" errors
var (
	_ codes.Code
	_ io.Reader
	_ status.Status
	_ = errors.New
	_ = runtime.String
	_ = utilities.NewDoubleArray
	_ = metadata.Join
)

func request_Aprs_GetDailyOperatorStrategyAprs_0(ctx context.Context, marshaler runtime.Marshaler, client AprsClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq GetDailyOperatorStrategyAprsRequest
		metadata runtime.ServerMetadata
		err      error
	)
	io.Copy(io.Discard, req.Body)
	val, ok := pathParams["operator_address"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "operator_address")
	}
	protoReq.OperatorAddress, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "operator_address", err)
	}
	val, ok = pathParams["date"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "date")
	}
	protoReq.Date, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "date", err)
	}
	msg, err := client.GetDailyOperatorStrategyAprs(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_Aprs_GetDailyOperatorStrategyAprs_0(ctx context.Context, marshaler runtime.Marshaler, server AprsServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq GetDailyOperatorStrategyAprsRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["operator_address"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "operator_address")
	}
	protoReq.OperatorAddress, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "operator_address", err)
	}
	val, ok = pathParams["date"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "date")
	}
	protoReq.Date, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "date", err)
	}
	msg, err := server.GetDailyOperatorStrategyAprs(ctx, &protoReq)
	return msg, metadata, err
}

func request_Aprs_GetDailyAprForEarnerStrategy_0(ctx context.Context, marshaler runtime.Marshaler, client AprsClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq GetDailyAprForEarnerStrategyRequest
		metadata runtime.ServerMetadata
		err      error
	)
	io.Copy(io.Discard, req.Body)
	val, ok := pathParams["earner_address"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "earner_address")
	}
	protoReq.EarnerAddress, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "earner_address", err)
	}
	val, ok = pathParams["strategy"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "strategy")
	}
	protoReq.Strategy, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "strategy", err)
	}
	val, ok = pathParams["date"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "date")
	}
	protoReq.Date, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "date", err)
	}
	msg, err := client.GetDailyAprForEarnerStrategy(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))
	return msg, metadata, err
}

func local_request_Aprs_GetDailyAprForEarnerStrategy_0(ctx context.Context, marshaler runtime.Marshaler, server AprsServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {
	var (
		protoReq GetDailyAprForEarnerStrategyRequest
		metadata runtime.ServerMetadata
		err      error
	)
	val, ok := pathParams["earner_address"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "earner_address")
	}
	protoReq.EarnerAddress, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "earner_address", err)
	}
	val, ok = pathParams["strategy"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "strategy")
	}
	protoReq.Strategy, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "strategy", err)
	}
	val, ok = pathParams["date"]
	if !ok {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "missing parameter %s", "date")
	}
	protoReq.Date, err = runtime.String(val)
	if err != nil {
		return nil, metadata, status.Errorf(codes.InvalidArgument, "type mismatch, parameter: %s, error: %v", "date", err)
	}
	msg, err := server.GetDailyAprForEarnerStrategy(ctx, &protoReq)
	return msg, metadata, err
}

// RegisterAprsHandlerServer registers the http handlers for service Aprs to "mux".
// UnaryRPC     :call AprsServer directly.
// StreamingRPC :currently unsupported pending https://github.com/grpc/grpc-go/issues/906.
// Note that using this registration option will cause many gRPC library features to stop working. Consider using RegisterAprsHandlerFromEndpoint instead.
// GRPC interceptors will not work for this type of registration. To use interceptors, you must use the "runtime.WithMiddlewares" option in the "runtime.NewServeMux" call.
func RegisterAprsHandlerServer(ctx context.Context, mux *runtime.ServeMux, server AprsServer) error {
	mux.Handle(http.MethodGet, pattern_Aprs_GetDailyOperatorStrategyAprs_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/eigenlayer.pds.aprs.v1.Aprs/GetDailyOperatorStrategyAprs", runtime.WithHTTPPathPattern("/aprs/v1/operators/{operator_address}/daily-aprs/{date}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_Aprs_GetDailyOperatorStrategyAprs_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_Aprs_GetDailyOperatorStrategyAprs_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodGet, pattern_Aprs_GetDailyAprForEarnerStrategy_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		var stream runtime.ServerTransportStream
		ctx = grpc.NewContextWithServerTransportStream(ctx, &stream)
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateIncomingContext(ctx, mux, req, "/eigenlayer.pds.aprs.v1.Aprs/GetDailyAprForEarnerStrategy", runtime.WithHTTPPathPattern("/aprs/v1/earners/{earner_address}/strategies/{strategy}/daily-apr/{date}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := local_request_Aprs_GetDailyAprForEarnerStrategy_0(annotatedContext, inboundMarshaler, server, req, pathParams)
		md.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_Aprs_GetDailyAprForEarnerStrategy_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})

	return nil
}

// RegisterAprsHandlerFromEndpoint is same as RegisterAprsHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterAprsHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) (err error) {
	conn, err := grpc.NewClient(endpoint, opts...)
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				grpclog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()
	return RegisterAprsHandler(ctx, mux, conn)
}

// RegisterAprsHandler registers the http handlers for service Aprs to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterAprsHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return RegisterAprsHandlerClient(ctx, mux, NewAprsClient(conn))
}

// RegisterAprsHandlerClient registers the http handlers for service Aprs
// to "mux". The handlers forward requests to the grpc endpoint over the given implementation of "AprsClient".
// Note: the gRPC framework executes interceptors within the gRPC handler. If the passed in "AprsClient"
// doesn't go through the normal gRPC flow (creating a gRPC client etc.) then it will be up to the passed in
// "AprsClient" to call the correct interceptors. This client ignores the HTTP middlewares.
func RegisterAprsHandlerClient(ctx context.Context, mux *runtime.ServeMux, client AprsClient) error {
	mux.Handle(http.MethodGet, pattern_Aprs_GetDailyOperatorStrategyAprs_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/eigenlayer.pds.aprs.v1.Aprs/GetDailyOperatorStrategyAprs", runtime.WithHTTPPathPattern("/aprs/v1/operators/{operator_address}/daily-aprs/{date}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_Aprs_GetDailyOperatorStrategyAprs_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_Aprs_GetDailyOperatorStrategyAprs_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	mux.Handle(http.MethodGet, pattern_Aprs_GetDailyAprForEarnerStrategy_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		ctx, cancel := context.WithCancel(req.Context())
		defer cancel()
		inboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)
		annotatedContext, err := runtime.AnnotateContext(ctx, mux, req, "/eigenlayer.pds.aprs.v1.Aprs/GetDailyAprForEarnerStrategy", runtime.WithHTTPPathPattern("/aprs/v1/earners/{earner_address}/strategies/{strategy}/daily-apr/{date}"))
		if err != nil {
			runtime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)
			return
		}
		resp, md, err := request_Aprs_GetDailyAprForEarnerStrategy_0(annotatedContext, inboundMarshaler, client, req, pathParams)
		annotatedContext = runtime.NewServerMetadataContext(annotatedContext, md)
		if err != nil {
			runtime.HTTPError(annotatedContext, mux, outboundMarshaler, w, req, err)
			return
		}
		forward_Aprs_GetDailyAprForEarnerStrategy_0(annotatedContext, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)
	})
	return nil
}

var (
	pattern_Aprs_GetDailyOperatorStrategyAprs_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5}, []string{"aprs", "v1", "operators", "operator_address", "daily-aprs", "date"}, ""))
	pattern_Aprs_GetDailyAprForEarnerStrategy_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4, 1, 0, 4, 1, 5, 5, 2, 6, 1, 0, 4, 1, 5, 7}, []string{"aprs", "v1", "earners", "earner_address", "strategies", "strategy", "daily-apr", "date"}, ""))
)

var (
	forward_Aprs_GetDailyOperatorStrategyAprs_0 = runtime.ForwardResponseMessage
	forward_Aprs_GetDailyAprForEarnerStrategy_0 = runtime.ForwardResponseMessage
)
