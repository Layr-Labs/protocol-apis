// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/pds/v1/aprs.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Aprs_GetDailyOperatorStrategyAprs_FullMethodName = "/eigenlayer.pds.aprs.v1.Aprs/GetDailyOperatorStrategyAprs"
	Aprs_GetDailyAprForEarnerStrategy_FullMethodName = "/eigenlayer.pds.aprs.v1.Aprs/GetDailyAprForEarnerStrategy"
)

// AprsClient is the client API for Aprs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AprsClient interface {
	GetDailyOperatorStrategyAprs(ctx context.Context, in *GetDailyOperatorStrategyAprsRequest, opts ...grpc.CallOption) (*GetDailyOperatorStrategyAprsResponse, error)
	GetDailyAprForEarnerStrategy(ctx context.Context, in *GetDailyAprForEarnerStrategyRequest, opts ...grpc.CallOption) (*GetDailyAprForEarnerStrategyResponse, error)
}

type aprsClient struct {
	cc grpc.ClientConnInterface
}

func NewAprsClient(cc grpc.ClientConnInterface) AprsClient {
	return &aprsClient{cc}
}

func (c *aprsClient) GetDailyOperatorStrategyAprs(ctx context.Context, in *GetDailyOperatorStrategyAprsRequest, opts ...grpc.CallOption) (*GetDailyOperatorStrategyAprsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyOperatorStrategyAprsResponse)
	err := c.cc.Invoke(ctx, Aprs_GetDailyOperatorStrategyAprs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aprsClient) GetDailyAprForEarnerStrategy(ctx context.Context, in *GetDailyAprForEarnerStrategyRequest, opts ...grpc.CallOption) (*GetDailyAprForEarnerStrategyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyAprForEarnerStrategyResponse)
	err := c.cc.Invoke(ctx, Aprs_GetDailyAprForEarnerStrategy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AprsServer is the server API for Aprs service.
// All implementations should embed UnimplementedAprsServer
// for forward compatibility.
type AprsServer interface {
	GetDailyOperatorStrategyAprs(context.Context, *GetDailyOperatorStrategyAprsRequest) (*GetDailyOperatorStrategyAprsResponse, error)
	GetDailyAprForEarnerStrategy(context.Context, *GetDailyAprForEarnerStrategyRequest) (*GetDailyAprForEarnerStrategyResponse, error)
}

// UnimplementedAprsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAprsServer struct{}

func (UnimplementedAprsServer) GetDailyOperatorStrategyAprs(context.Context, *GetDailyOperatorStrategyAprsRequest) (*GetDailyOperatorStrategyAprsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyOperatorStrategyAprs not implemented")
}
func (UnimplementedAprsServer) GetDailyAprForEarnerStrategy(context.Context, *GetDailyAprForEarnerStrategyRequest) (*GetDailyAprForEarnerStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyAprForEarnerStrategy not implemented")
}
func (UnimplementedAprsServer) testEmbeddedByValue() {}

// UnsafeAprsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AprsServer will
// result in compilation errors.
type UnsafeAprsServer interface {
	mustEmbedUnimplementedAprsServer()
}

func RegisterAprsServer(s grpc.ServiceRegistrar, srv AprsServer) {
	// If the following call pancis, it indicates UnimplementedAprsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Aprs_ServiceDesc, srv)
}

func _Aprs_GetDailyOperatorStrategyAprs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyOperatorStrategyAprsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AprsServer).GetDailyOperatorStrategyAprs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aprs_GetDailyOperatorStrategyAprs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AprsServer).GetDailyOperatorStrategyAprs(ctx, req.(*GetDailyOperatorStrategyAprsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aprs_GetDailyAprForEarnerStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyAprForEarnerStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AprsServer).GetDailyAprForEarnerStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Aprs_GetDailyAprForEarnerStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AprsServer).GetDailyAprForEarnerStrategy(ctx, req.(*GetDailyAprForEarnerStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aprs_ServiceDesc is the grpc.ServiceDesc for Aprs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aprs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.pds.aprs.v1.Aprs",
	HandlerType: (*AprsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDailyOperatorStrategyAprs",
			Handler:    _Aprs_GetDailyOperatorStrategyAprs_Handler,
		},
		{
			MethodName: "GetDailyAprForEarnerStrategy",
			Handler:    _Aprs_GetDailyAprForEarnerStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/pds/v1/aprs.proto",
}
