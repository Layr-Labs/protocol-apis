syntax = "proto3";

package eigenlayer.sidecar.api.v1;

option go_package = "github.com/Layr-Labs/sidecar/protos/eigenlayer/api/v1";

import "google/api/annotations.proto";

message GetBlockHeightRequest {
}

message GetBlockHeightResponse {
  uint64 blockNumber = 1;
  string blockHash = 2;
}

message GetStateRootRequest {
  uint64 blockNumber = 1;
}

message GetStateRootResponse {
  uint64 ethBlockNumber = 1;
  string ethBlockHash = 2;
  string stateRoot = 3;
}

message GetRewardsRootRequest {
  uint64 blockNumber = 1;
}

message GetRewardsRootResponse {
  string rewardsRoot = 1;
}

message GenerateClaimProofRequest {
  string earner_address = 1;
  repeated string tokens = 2;
}

message EarnerLeaf {
  string earner = 1;
  string earner_token_root = 2;
}

message TokenLeaf {
  string token = 1;
  string cumulative_earnings = 2;
}

message Proof {
  string root = 1;
  uint32 root_index = 2;
  uint32 earner_index = 3;
  string earner_tree_proof = 4;
  EarnerLeaf earner_leaf = 5;
  repeated uint32 leaf_indices = 6;
  repeated string token_tree_proofs = 7;
  repeated TokenLeaf token_leaves = 8;
}

message GenerateClaimProofResponse {
  Proof proof = 1;
}

message GetAvailableRewardsRequest {
  string earner_address = 1;
}

message Reward {
  string token = 1;
  string amount = 2;
}

message GetAvailableRewardsResponse {
  repeated Reward rewards = 1;
}

message GetAvailableRewardsTokensRequest {
  string earner_address = 1;
}

message GetAvailableRewardsTokensResponse {
  repeated string tokens = 1;
}

service Rpc {
  rpc GetBlockHeight(GetBlockHeightRequest) returns (GetBlockHeightResponse) {
    option (google.api.http) = {
      post: "/v1/latest-block"
      body: "*"
    };
  }

  rpc GetStateRoot(GetStateRootRequest) returns (GetStateRootResponse) {
    option (google.api.http) = {
      post: "/v1/state-roots/{blockNumber}"
      body: "*"
    };
  }

  rpc GetRewardsRoot(GetRewardsRootRequest) returns (GetRewardsRootResponse) {
    option (google.api.http) = {
      post: "/v1/rewards-roots/{blockNumber}"
      body: "*"
    };
  }

  rpc GenerateClaimProof(GenerateClaimProofRequest) returns (GenerateClaimProofResponse) {
    option (google.api.http) = {
      post: "/v1/claim-proof"
      body: "*"
    };
  }

  rpc GetAvailableRewards(GetAvailableRewardsRequest) returns (GetAvailableRewardsResponse) {
    option (google.api.http) = {
      post: "/v1/available-rewards"
      body: "*"
    };
  }

  rpc GetAvailableRewardsTokens(GetAvailableRewardsTokensRequest) returns (GetAvailableRewardsTokensResponse) {
    option (google.api.http) = {
      post: "/v1/available-rewards-tokens"
      body: "*"
    };
  }
}
