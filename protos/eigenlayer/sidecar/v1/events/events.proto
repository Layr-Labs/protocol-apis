syntax = "proto3";

package eigenlayer.sidecar.v1.events;

option go_package = "github.com/Layr-Labs/protocol-apis/gen/protos/eigenlayer/sidecar/v1/events";

import "google/api/annotations.proto";
import "eigenlayer/sidecar/v1/eigenState/eigenState.proto";
import "eigenlayer/sidecar/v1/ethereumTypes/ethereumTypes.proto";

message StreamEigenStateChangesRequest {
  optional string state_change_filter = 1;
}

message StreamEigenStateChangesResponse {
  uint64 block_number = 1;
  eigenlayer.sidecar.v1.eigenState.StateRoot state_root = 2;
  repeated eigenlayer.sidecar.v1.eigenState.EigenStateChange changes = 3;
}


message StreamIndexedBlocksRequest {
  // In addition to block data, include EigenState changes related to the block
  bool include_state_changes = 1;

  // If true, only returns blocks that had transactions/logs index or state changes if included
  bool only_blocks_with_data = 2;

  message Filters {
    optional string block_filter = 1;
    optional string state_change_filter = 2;
  }

  optional Filters filters = 3;
}
message StreamIndexedBlocksResponse {
  eigenlayer.sidecar.v1.ethereumTypes.Block block = 1;
  eigenlayer.sidecar.v1.eigenState.StateRoot state_root = 2;
  repeated eigenlayer.sidecar.v1.eigenState.EigenStateChange changes = 3;
}
