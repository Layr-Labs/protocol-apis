syntax = "proto3";

package eigenlayer.sidecar.v1.rewards;

option go_package = "github.com/Layr-Labs/protocol-apis/gen/protos/eigenlayer/sidecar/v1/rewards";

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "eigenlayer/sidecar/v1/rewards/rewards.proto";
import "eigenlayer/lib/annotations/annotations.proto";

service Rewards {

  // GetRewardsRoot returns the posted on-chain root for the give block height
  rpc GetRewardsRoot(GetRewardsRootRequest) returns (GetRewardsRootResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/blocks/{block_height}/rewards-root"
    };
  }

  // GenerateRewards generates rewards for the given cutoff_date.
  // If respondWithRewardsData is true, the response will include the rewards data, otherwise
  // the sidecar will cache the data to be requested later.
  rpc GenerateRewards(GenerateRewardsRequest) returns (GenerateRewardsResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/generate-rewards"
      body: "*"
    };
  }

  rpc GenerateStakerOperators(GenerateStakerOperatorsRequest) returns (GenerateStakerOperatorsResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/generate-staker-operators"
      body: "*"
    };
  }

  rpc BackfillStakerOperators(BackfillStakerOperatorsRequest) returns (BackfillStakerOperatorsResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/backfill-staker-operators"
      body: "*"
    };
  }

  // GenerateRewardsRoot generates a rewards root for the given snapshot.
  // Returns an error if the rewards have not been generated for the snapshot.
  rpc GenerateRewardsRoot(GenerateRewardsRootRequest) returns (GenerateRewardsRootResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/generate-rewards-root"
      body: "*"
    };
  }

  // GetRewardsForSnapshot returns the rewards for the provided snapshot.
  // Useful if you generated the rewards and want to fetch them later.
  rpc GetRewardsForSnapshot(GetRewardsForSnapshotRequest) returns (GetRewardsForSnapshotResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/rewards/{snapshot}"
    };
  }

  rpc GetRewardsForDistributionRoot(GetRewardsForDistributionRootRequest) returns (GetRewardsForDistributionRootResponse) {
    option (eigenlayer.lib.annotations.isPublic) = true;
    option (google.api.http) = {
      get: "/rewards/v1/distribution-roots/{root_index}/rewards"
    };
  }

  // GetAttributableRewardsForSnapshot returns the attributable rewards for the provided snapshot.
  // This takes the cumulative rewards amounts and breaks them down across operators, avss, strategies, etc
  rpc GetAttributableRewardsForSnapshot(GetAttributableRewardsForSnapshotRequest) returns (GetAttributableRewardsForSnapshotResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/attributable-rewards/{snapshot}"
    };
  }

  rpc GetAttributableRewardsForDistributionRoot(GetAttributableRewardsForDistributionRootRequest) returns (GetAttributableRewardsForDistributionRootResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/attributable-rewards-by-root/{distribution_root}"
    };
  }

  rpc GetRewardsByAvsForDistributionRoot(GetRewardsByAvsForDistributionRootRequest) returns (GetRewardsByAvsForDistributionRootResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/avs-rewards-by-root/{root_index}"
    };
  }

  // GenerateClaimProof generates a proof for the given earner address and tokens for claiming
  // tokens against the RewardsCoordinator
  rpc GenerateClaimProof(GenerateClaimProofRequest) returns (GenerateClaimProofResponse) {
    option (eigenlayer.lib.annotations.isPublic) = true;
    option (google.api.http) = {
      post: "/rewards/v1/claim-proof"
      body: "*"
    };
  }

  // GetClaimableRewards returns the claimable rewards for the given earner address.
  // This takes the current active tokens earned and subtracts total claimed.
  rpc GetClaimableRewards(GetClaimableRewardsRequest) returns (GetClaimableRewardsResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/claimable-rewards"
    };
  }

  // GetTotalClaimedRewards returns the total claimed rewards for the given earner address, summed up to and including
  // the provided blockHeight. If a blockHeight is omitted, the most recent indexed block is used.
  rpc GetTotalClaimedRewards(GetTotalClaimedRewardsRequest) returns (GetTotalClaimedRewardsResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/total-claimed-rewards"
    };
  }

  // GetAvailableRewardsTokens returns the available rewards tokens for the given earner address
  rpc GetAvailableRewardsTokens(GetAvailableRewardsTokensRequest) returns (GetAvailableRewardsTokensResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/available-rewards-tokens"
    };
  }

  // GetSummarizedRewardsForEarner returns the summarized rewards for the given earner address, including:
  // - total tokens earned
  // - total tokens active (subset of earned that are in roots that have surpassed their activation delay)
  // - total claimed
  // - total claimable (total active - total claimed)
  rpc GetSummarizedRewardsForEarner(GetSummarizedRewardsForEarnerRequest) returns (GetSummarizedRewardsForEarnerResponse) {
    option (eigenlayer.lib.annotations.isPublic) = true;
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/summarized-rewards"
    };
  }

  // GetClaimedRewardsByBlock returns the claimed rewards for the provided block height
  rpc GetClaimedRewardsByBlock(GetClaimedRewardsByBlockRequest) returns (GetClaimedRewardsByBlockResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/blocks/{block_height}/claimed-rewards"
    };
  }

  // ListClaimedRewardsByBlockRange returns the claimed rewards for the given earner address and block range,
  // inclusive of the start and end block heights
  rpc ListClaimedRewardsByBlockRange(ListClaimedRewardsByBlockRangeRequest) returns (ListClaimedRewardsByBlockRangeResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/claimed-rewards"
    };
  }

  rpc ListDistributionRoots(ListDistributionRootsRequest) returns (ListDistributionRootsResponse) {
    option (eigenlayer.lib.annotations.isPublic) = true;
    option (google.api.http) = {
      get: "/rewards/v1/distribution-roots"
    };
  }

  // Lists the lifetime rewards for an earner
  //
  // Returns a list of tokens and the total amount accumulated
  rpc ListEarnerLifetimeRewards(ListEarnerLifetimeRewardsRequest) returns (ListEarnerLifetimeRewardsResponse) {
    option (eigenlayer.lib.annotations.isPublic) = true;
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earnerAddress}/lifetime-rewards"
    };
  }

  // List historical rewards for a given earner address
  //
  // Returns a list of tokens containing a list of delta rewards for each snapshot date
  rpc ListEarnerHistoricalRewards(ListEarnerHistoricalRewardsRequest) returns (ListEarnerHistoricalRewardsResponse) {
    option (eigenlayer.lib.annotations.isPublic) = true;
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earnerAddress}/historical-rewards"
    };
  }
}
