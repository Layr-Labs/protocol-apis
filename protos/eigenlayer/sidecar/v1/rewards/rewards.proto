syntax = "proto3";

package eigenlayer.sidecar.v1.rewards;

option go_package = "github.com/Layr-Labs/protocol-apis/gen/protos/eigenlayer/sidecar/v1/rewards";

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";


message EarnerLeaf {
  string earner = 1;
  bytes earner_token_root = 2;
}

message TokenLeaf {
  string token = 1;
  string cumulative_earnings = 2;
}

// Proof closely models the IRewardsCoordinatorRewardsMerkleClaim interface found
// in the RewardsCoordinator contract
message Proof {
  bytes root = 1;
  uint32 root_index = 2;
  uint32 earner_index = 3;
  bytes earner_tree_proof = 4;
  EarnerLeaf earner_leaf = 5;
  repeated uint32 token_indices = 6;
  repeated bytes token_tree_proofs = 7;
  repeated TokenLeaf token_leaves = 8;
}

enum RewardType {
  REWARD_TYPE_AVS = 0;
  REWARD_TYPE_FOR_ALL = 1;
  REWARD_TYPE_FOR_ALL_EARNERS = 2;
}

message Reward {
  string earner = 1;
  string token = 2;
  string amount = 3;
  string snapshot = 4;
}

message AttributableReward {
  string earner = 1;
  string operator = 2;
  string avs = 3;
  string token = 4;
  string strategy = 5;
  string multiplier = 6;
  string amount = 7;
  string shares = 8;
  string reward_hash = 9;
  string snapshot = 10;
  RewardType reward_type = 11;
}

message AvsReward {
  string earner = 1;
  string avs = 2;
  string token = 3;
  string amount = 4;
  string reward_hash = 5;
  string snapshot = 6;
  RewardType reward_type = 7;
}

message DistributionRoot {
  string root = 1;
  uint64 root_index = 2;
  google.protobuf.Timestamp rewards_calculation_end = 3;
  string rewards_calculation_end_unit = 4;
  google.protobuf.Timestamp activated_at = 5;
  string activated_at_unit = 6;
  uint64 created_at_block_number = 7;
  string transaction_hash = 8;
  uint64 block_height = 9;
  uint64 log_index = 10;
  bool disabled = 11;
}

message GetRewardsRootRequest {
  uint64 block_height = 1;
}
message GetRewardsRootResponse {
  DistributionRoot rewards_root = 1;
}

message GenerateRewardsRequest {
  string cutoff_date = 1;
  bool respond_with_rewards_data = 2;
  bool wait_for_complete = 3;
}
message GenerateRewardsResponse {
  string cutoff_date = 1;

  // Returned if respondWithRewardsData is true in the request
  optional Reward rewards = 2;
  bool queued = 3;
}


message GenerateStakerOperatorsRequest {
  string cutoff_date = 1;
  bool wait_for_complete = 2;
}

message GenerateStakerOperatorsResponse {
  bool queued = 1;
}

message BackfillStakerOperatorsRequest {
  bool wait_for_complete = 1;
}

message BackfillStakerOperatorsResponse {
  bool queued = 1;
}


message GenerateRewardsRootRequest {
  // The date to calculate rewards up to, exclusive
  string cutoff_date = 1;
}
message GenerateRewardsRootResponse {
  string rewards_root = 1;
  string rewards_calc_end_date = 2;
}


message GetRewardsForSnapshotRequest {
  string snapshot = 1;
}
message GetRewardsForSnapshotResponse {
  repeated Reward rewards = 1;
}


message GetAttributableRewardsForSnapshotRequest {
  string snapshot = 1;
}
message GetAttributableRewardsForSnapshotResponse {
  repeated AttributableReward rewards = 1;
}

message GetAttributableRewardsForDistributionRootRequest {
  string distribution_root = 1;
}
message GetAttributableRewardsForDistributionRootResponse {
  repeated AttributableReward rewards = 1;
}

message GetRewardsByAvsForDistributionRootRequest {
  uint64 root_index = 1;
}

message GetRewardsByAvsForDistributionRootResponse {
  repeated AvsReward rewards = 1;
}


message GenerateClaimProofRequest {
  string earner_address = 1;
  repeated string tokens = 2;
  // if root_index is omitted, the current active root will be used
  optional google.protobuf.Int64Value root_index = 3;
}
message GenerateClaimProofResponse {
  Proof proof = 1;
}


message GetClaimableRewardsRequest {
  string earner_address = 1;
  uint64 block_height = 2;
}
message GetClaimableRewardsResponse {
  repeated Reward rewards = 1;
}

message TotalClaimedReward {
  string earner = 1;
  string token = 2;
  string amount = 3;
}

message GetTotalClaimedRewardsRequest {
  string earner_address = 1;
  optional uint64 block_height = 2;
}
message GetTotalClaimedRewardsResponse {
  repeated TotalClaimedReward rewards = 1;
}


message GetAvailableRewardsTokensRequest {
  string earner_address = 1;
  optional uint64 block_height = 2;
}
message GetAvailableRewardsTokensResponse {
  repeated string tokens = 1;
}

message SummarizedEarnerReward {
  string token = 1;

  // Rewards that have been earned but not necessarily activated yet
  string earned = 2;

  // total rewards that are claimable (does not account for claimed)
  string active = 3;

  // total rewards that have been claimed
  string claimed = 4;

  // rewards that can be claimed at the block height
  string claimable = 5;
}

message GetSummarizedRewardsForEarnerRequest {
  string earner_address = 1;
  optional uint64 block_height = 2;
}

message GetSummarizedRewardsForEarnerResponse {
  repeated SummarizedEarnerReward rewards = 1;
}

message ClaimedReward {
  string earner = 1;
  string claimer = 2;
  string token = 3;
  string amount = 4;
  string distribution_root = 5;
  uint64 block_number = 6;
  string recipient = 7;
}
message GetClaimedRewardsByBlockRequest {
  uint64 block_height = 1;
}
message GetClaimedRewardsByBlockResponse {
  repeated ClaimedReward rewards = 1;
}

message ListDistributionRootsRequest {
  optional uint64 block_height = 1;
}

message ListDistributionRootsResponse {
  repeated DistributionRoot distribution_roots = 1;
}

message ListClaimedRewardsByBlockRangeRequest {
  string earner_address = 1;
  uint64 start_block_height = 2;
  uint64 end_block_height = 3;
}

message ListClaimedRewardsByBlockRangeResponse {
  repeated ClaimedReward rewards = 1;
}

service Rewards {

  // GetRewardsRoot returns the posted on-chain root for the give block height
  rpc GetRewardsRoot(GetRewardsRootRequest) returns (GetRewardsRootResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/blocks/{block_height}/rewards-root"
    };
  }

  // GenerateRewards generates rewards for the given cutoff_date.
  // If respondWithRewardsData is true, the response will include the rewards data, otherwise
  // the sidecar will cache the data to be requested later.
  rpc GenerateRewards(GenerateRewardsRequest) returns (GenerateRewardsResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/generate-rewards"
      body: "*"
    };
  }

  rpc GenerateStakerOperators(GenerateStakerOperatorsRequest) returns (GenerateStakerOperatorsResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/generate-staker-operators"
      body: "*"
    };
  }

  rpc BackfillStakerOperators(BackfillStakerOperatorsRequest) returns (BackfillStakerOperatorsResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/backfill-staker-operators"
      body: "*"
    };
  }

  // GenerateRewardsRoot generates a rewards root for the given snapshot.
  // Returns an error if the rewards have not been generated for the snapshot.
  rpc GenerateRewardsRoot(GenerateRewardsRootRequest) returns (GenerateRewardsRootResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/generate-rewards-root"
      body: "*"
    };
  }

  // GetRewardsForSnapshot returns the rewards for the provided snapshot.
  // Useful if you generated the rewards and want to fetch them later.
  rpc GetRewardsForSnapshot(GetRewardsForSnapshotRequest) returns (GetRewardsForSnapshotResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/rewards/{snapshot}"
    };
  }

  // GetAttributableRewardsForSnapshot returns the attributable rewards for the provided snapshot.
  // This takes the cumulative rewards amounts and breaks them down across operators, avss, strategies, etc
  rpc GetAttributableRewardsForSnapshot(GetAttributableRewardsForSnapshotRequest) returns (GetAttributableRewardsForSnapshotResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/attributable-rewards/{snapshot}"
    };
  }

  rpc GetAttributableRewardsForDistributionRoot(GetAttributableRewardsForDistributionRootRequest) returns (GetAttributableRewardsForDistributionRootResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/attributable-rewards-by-root/{distribution_root}"
    };
  }

  rpc GetRewardsByAvsForDistributionRoot(GetRewardsByAvsForDistributionRootRequest) returns (GetRewardsByAvsForDistributionRootResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/avs-rewards-by-root/{root_index}"
    };
  }

  // GenerateClaimProof generates a proof for the given earner address and tokens for claiming
  // tokens against the RewardsCoordinator
  rpc GenerateClaimProof(GenerateClaimProofRequest) returns (GenerateClaimProofResponse) {
    option (google.api.http) = {
      post: "/rewards/v1/claim-proof"
      body: "*"
    };
  }

  // GetClaimableRewards returns the claimable rewards for the given earner address.
  // This takes the current active tokens earned and subtracts total claimed.
  rpc GetClaimableRewards(GetClaimableRewardsRequest) returns (GetClaimableRewardsResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/claimable-rewards"
    };
  }

  // GetTotalClaimedRewards returns the total claimed rewards for the given earner address, summed up to and including
  // the provided blockHeight. If a blockHeight is omitted, the most recent indexed block is used.
  rpc GetTotalClaimedRewards(GetTotalClaimedRewardsRequest) returns (GetTotalClaimedRewardsResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/total-claimed-rewards"
    };
  }

  // GetAvailableRewardsTokens returns the available rewards tokens for the given earner address
  rpc GetAvailableRewardsTokens(GetAvailableRewardsTokensRequest) returns (GetAvailableRewardsTokensResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/available-rewards-tokens"
    };
  }

  // GetSummarizedRewardsForEarner returns the summarized rewards for the given earner address, including:
  // - total tokens earned
  // - total tokens active (subset of earned that are in roots that have surpassed their activation delay)
  // - total claimed
  // - total claimable (total active - total claimed)
  rpc GetSummarizedRewardsForEarner(GetSummarizedRewardsForEarnerRequest) returns (GetSummarizedRewardsForEarnerResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/summarized-rewards"
    };
  }

  // GetClaimedRewardsByBlock returns the claimed rewards for the provided block height
  rpc GetClaimedRewardsByBlock(GetClaimedRewardsByBlockRequest) returns (GetClaimedRewardsByBlockResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/blocks/{block_height}/claimed-rewards"
    };
  }

  // ListClaimedRewardsByBlockRange returns the claimed rewards for the given earner address and block range,
  // inclusive of the start and end block heights
  rpc ListClaimedRewardsByBlockRange(ListClaimedRewardsByBlockRangeRequest) returns (ListClaimedRewardsByBlockRangeResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/earners/{earner_address}/claimed-rewards"
    };
  }

  rpc ListDistributionRoots(ListDistributionRootsRequest) returns (ListDistributionRootsResponse) {
    option (google.api.http) = {
      get: "/rewards/v1/distribution-roots"
    };
  }
}
