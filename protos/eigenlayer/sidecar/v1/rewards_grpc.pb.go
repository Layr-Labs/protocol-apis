// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: eigenlayer/sidecar/v1/rewards.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Rewards_GetRewardsRoot_FullMethodName            = "/eigenlayer.sidecar.rewards.v1.Rewards/GetRewardsRoot"
	Rewards_GenerateClaimProof_FullMethodName        = "/eigenlayer.sidecar.rewards.v1.Rewards/GenerateClaimProof"
	Rewards_GetAvailableRewards_FullMethodName       = "/eigenlayer.sidecar.rewards.v1.Rewards/GetAvailableRewards"
	Rewards_GetAvailableRewardsTokens_FullMethodName = "/eigenlayer.sidecar.rewards.v1.Rewards/GetAvailableRewardsTokens"
)

// RewardsClient is the client API for Rewards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RewardsClient interface {
	GetRewardsRoot(ctx context.Context, in *GetRewardsRootRequest, opts ...grpc.CallOption) (*GetRewardsRootResponse, error)
	GenerateClaimProof(ctx context.Context, in *GenerateClaimProofRequest, opts ...grpc.CallOption) (*GenerateClaimProofResponse, error)
	GetAvailableRewards(ctx context.Context, in *GetAvailableRewardsRequest, opts ...grpc.CallOption) (*GetAvailableRewardsResponse, error)
	GetAvailableRewardsTokens(ctx context.Context, in *GetAvailableRewardsTokensRequest, opts ...grpc.CallOption) (*GetAvailableRewardsTokensResponse, error)
}

type rewardsClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardsClient(cc grpc.ClientConnInterface) RewardsClient {
	return &rewardsClient{cc}
}

func (c *rewardsClient) GetRewardsRoot(ctx context.Context, in *GetRewardsRootRequest, opts ...grpc.CallOption) (*GetRewardsRootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRewardsRootResponse)
	err := c.cc.Invoke(ctx, Rewards_GetRewardsRoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsClient) GenerateClaimProof(ctx context.Context, in *GenerateClaimProofRequest, opts ...grpc.CallOption) (*GenerateClaimProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateClaimProofResponse)
	err := c.cc.Invoke(ctx, Rewards_GenerateClaimProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsClient) GetAvailableRewards(ctx context.Context, in *GetAvailableRewardsRequest, opts ...grpc.CallOption) (*GetAvailableRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableRewardsResponse)
	err := c.cc.Invoke(ctx, Rewards_GetAvailableRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsClient) GetAvailableRewardsTokens(ctx context.Context, in *GetAvailableRewardsTokensRequest, opts ...grpc.CallOption) (*GetAvailableRewardsTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableRewardsTokensResponse)
	err := c.cc.Invoke(ctx, Rewards_GetAvailableRewardsTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardsServer is the server API for Rewards service.
// All implementations should embed UnimplementedRewardsServer
// for forward compatibility.
type RewardsServer interface {
	GetRewardsRoot(context.Context, *GetRewardsRootRequest) (*GetRewardsRootResponse, error)
	GenerateClaimProof(context.Context, *GenerateClaimProofRequest) (*GenerateClaimProofResponse, error)
	GetAvailableRewards(context.Context, *GetAvailableRewardsRequest) (*GetAvailableRewardsResponse, error)
	GetAvailableRewardsTokens(context.Context, *GetAvailableRewardsTokensRequest) (*GetAvailableRewardsTokensResponse, error)
}

// UnimplementedRewardsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRewardsServer struct{}

func (UnimplementedRewardsServer) GetRewardsRoot(context.Context, *GetRewardsRootRequest) (*GetRewardsRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardsRoot not implemented")
}
func (UnimplementedRewardsServer) GenerateClaimProof(context.Context, *GenerateClaimProofRequest) (*GenerateClaimProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateClaimProof not implemented")
}
func (UnimplementedRewardsServer) GetAvailableRewards(context.Context, *GetAvailableRewardsRequest) (*GetAvailableRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableRewards not implemented")
}
func (UnimplementedRewardsServer) GetAvailableRewardsTokens(context.Context, *GetAvailableRewardsTokensRequest) (*GetAvailableRewardsTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableRewardsTokens not implemented")
}
func (UnimplementedRewardsServer) testEmbeddedByValue() {}

// UnsafeRewardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardsServer will
// result in compilation errors.
type UnsafeRewardsServer interface {
	mustEmbedUnimplementedRewardsServer()
}

func RegisterRewardsServer(s grpc.ServiceRegistrar, srv RewardsServer) {
	// If the following call pancis, it indicates UnimplementedRewardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Rewards_ServiceDesc, srv)
}

func _Rewards_GetRewardsRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardsRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsServer).GetRewardsRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rewards_GetRewardsRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsServer).GetRewardsRoot(ctx, req.(*GetRewardsRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rewards_GenerateClaimProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateClaimProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsServer).GenerateClaimProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rewards_GenerateClaimProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsServer).GenerateClaimProof(ctx, req.(*GenerateClaimProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rewards_GetAvailableRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsServer).GetAvailableRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rewards_GetAvailableRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsServer).GetAvailableRewards(ctx, req.(*GetAvailableRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rewards_GetAvailableRewardsTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableRewardsTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsServer).GetAvailableRewardsTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rewards_GetAvailableRewardsTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsServer).GetAvailableRewardsTokens(ctx, req.(*GetAvailableRewardsTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rewards_ServiceDesc is the grpc.ServiceDesc for Rewards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rewards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eigenlayer.sidecar.rewards.v1.Rewards",
	HandlerType: (*RewardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRewardsRoot",
			Handler:    _Rewards_GetRewardsRoot_Handler,
		},
		{
			MethodName: "GenerateClaimProof",
			Handler:    _Rewards_GenerateClaimProof_Handler,
		},
		{
			MethodName: "GetAvailableRewards",
			Handler:    _Rewards_GetAvailableRewards_Handler,
		},
		{
			MethodName: "GetAvailableRewardsTokens",
			Handler:    _Rewards_GetAvailableRewardsTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eigenlayer/sidecar/v1/rewards.proto",
}
